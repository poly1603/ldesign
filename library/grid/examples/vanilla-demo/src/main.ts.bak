import { GridStack } from 'gridstack'
// import { GridStackManager } from '@ldesign/gridstack/vanilla'
// import '@ldesign/gridstack/styles'
import 'gridstack/dist/gridstack.min.css'
import './style.css'

// 初始化网格
const grid = GridStack.init({
  column: 12,
  cellHeight: 70,
  animate: true,
  float: false,
  margin: 5
}, '#grid')

// 初始网格项
const initialItems = [
  { x: 0, y: 0, w: 4, h: 2, content: '网格项 1' },
  { x: 4, y: 0, w: 4, h: 2, content: '网格项 2' },
  { x: 8, y: 0, w: 4, h: 2, content: '网���项 3' },
  { x: 0, y: 2, w: 6, h: 3, content: '网格项 4' },
  { x: 6, y: 2, w: 6, h: 3, content: '网格项 5' }
]

// 加载初始项
initialItems.forEach((item, index) => {
  const widget = grid.addWidget({
    ...item,
    content: createWidgetContent(item.content, index)
  })
})

// 创建网格项内容
function createWidgetContent(title: string, index: number): string {
  return `
    <div class="widget-header">
      <span>${title}</span>
      <button class="widget-close" data-index="${index}">×</button>
    </div>
    <div style="display: flex; align-items: center; justify-content: center; height: 100%;">
      ${title}
    </div>
  `
}

// 监听变化事件
grid.on('change', (event, items) => {
  console.log('Grid changed:', items)
})

// 控制按钮
let widgetCount = initialItems.length

document.getElementById('addWidget')?.addEventListener('click', () => {
  widgetCount++
  grid.addWidget({
    w: 4,
    h: 2,
    content: createWidgetContent(`网格项 ${widgetCount}`, widgetCount - 1)
  })
})

document.getElementById('addRandom')?.addEventListener('click', () => {
  widgetCount++
  grid.addWidget({
    w: Math.floor(Math.random() * 4) + 2,
    h: Math.floor(Math.random() * 3) + 1,
    content: createWidgetContent(`随机项 ${widgetCount}`, widgetCount - 1)
  })
})

document.getElementById('compact')?.addEventListener('click', () => {
  grid.compact()
})

let isFloating = false
document.getElementById('toggleFloat')?.addEventListener('click', () => {
  isFloating = !isFloating
  grid.float(isFloating)
  console.log('Float mode:', isFloating)
})

document.getElementById('save')?.addEventListener('click', () => {
  const layout = grid.save()
  localStorage.setItem('gridLayout', JSON.stringify(layout))
  alert('布局已保存到 localStorage')
  console.log('Saved layout:', layout)
})

document.getElementById('load')?.addEventListener('click', () => {
  const savedLayout = localStorage.getItem('gridLayout')
  if (savedLayout) {
    try {
      const layout = JSON.parse(savedLayout)
      grid.load(layout, true)
      alert('布局已加载')
    } catch (error) {
      alert('加载失败：布局数据格式错误')
    }
  } else {
    alert('没有保存的布局')
  }
})

let isStatic = false
document.getElementById('toggleStatic')?.addEventListener('click', () => {
  isStatic = !isStatic
  grid.setStatic(isStatic)
  const btn = document.getElementById('toggleStatic')
  if (btn) {
    btn.textContent = isStatic ? '启用交互' : '切换静态模式'
  }
})

document.getElementById('clearAll')?.addEventListener('click', () => {
  if (confirm('确定要清空所有网格项吗？')) {
    grid.removeAll()
    widgetCount = 0
  }
})

// 删除网格项
document.addEventListener('click', (e) => {
  const target = e.target as HTMLElement
  if (target.classList.contains('widget-close')) {
    const item = target.closest('.grid-stack-item') as HTMLElement
    if (item) {
      grid.removeWidget(item)
    }
  }
})

console.log('GridStack instance:', grid)
console.log('Column count:', grid.getColumn())
console.log('Cell height:', grid.getCellHeight())
