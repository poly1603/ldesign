---
alwaysApply: true
description: LDesign 设计系统项目开发规范和最佳实践
---

# LDesign 设计系统开发规范

## 项目概述

LDesign 是一个基于 pnpm workspace 的现代化设计系统 monorepo 项目，提供丰富的组件库、工具和基础设施。

### 核心特性
- 🚀 **现代化技术栈**: TypeScript 5.7+ / Vue 3 / React 18
- 📦 **Monorepo 架构**: pnpm workspace 管理
- 🎯 **多框架支持**: Vue, React, Web Components
- ⚡ **高性能构建**: Vite + Rollup
- 🔧 **完整工具链**: ESLint, Prettier, Vitest, Playwright

## 项目结构

### 核心目录结构

```
ldesign/
├── packages/          # 核心基础包
│   ├── api/          # API 通信层
│   ├── cache/        # 缓存管理
│   ├── color/        # 颜色工具
│   ├── crypto/       # 加密工具
│   ├── device/       # 设备检测
│   ├── engine/       # 核心引擎
│   ├── http/         # HTTP 客户端
│   ├── i18n/         # 国际化
│   ├── router/       # 路由管理
│   ├── shared/       # 共享工具
│   ├── size/         # 尺寸计算
│   ├── store/        # 状态管理
│   └── template/     # 模板引擎
├── libraries/        # 组件库（20+ 个独立库）
│   ├── 3d-viewer/   # 3D 查看器
│   ├── chart/       # 图表组件
│   ├── code-editor/ # 代码编辑器
│   ├── cropper/     # 图片裁剪
│   ├── datepicker/  # 日期选择器
│   ├── editor/      # 富文本编辑器
│   ├── excel/       # Excel 操作
│   ├── flowchart/   # 流程图
│   ├── form/        # 表单组件
│   ├── grid/        # 网格布局
│   └── ...          # 其他 10+ 个库
├── tools/           # 开发工具
│   ├── builder/     # 构建工具
│   ├── cli/         # 命令行工具
│   ├── kit/         # 开发套件
│   └── launcher/    # 启动器
├── apps/            # 应用程序
│   └── app/         # 示例应用
└── scripts/         # 脚本工具
```

关键文件：
- [package.json](mdc:package.json) - 根项目配置
- [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml) - Workspace 配置
- [tsconfig.json](mdc:tsconfig.json) - TypeScript 配置
- [eslint.config.js](mdc:eslint.config.js) - ESLint 配置

## 开发规范

### 1. TypeScript 规范

#### 类型定义
```typescript
// ✅ 推荐：始终显式声明类型
interface ComponentProps {
  title: string
  size?: 'small' | 'medium' | 'large'
  onClose?: () => void
}

// ✅ 推荐：使用类型别名简化复杂类型
type AsyncResult<T> = Promise<T | null>

// ❌ 避免：过度使用 any
// const data: any = {}

// ✅ 推荐：使用 unknown 或具体类型
const data: unknown = {}
```

#### 配置要点
- **Target**: ES2020
- **Module**: ESNext  
- **Strict Mode**: 启用（但 noImplicitAny 和 strictNullChecks 设为 false）
- **Path Alias**: 
  - `@/*` → `./src/*`
  - `@ldesign/*` → `./packages/*/src`

### 2. Vue 开发规范

#### 组件结构
```vue
<script setup lang="ts">
// ✅ 推荐：使用 Composition API + <script setup>
import { ref, computed, onMounted } from 'vue'

interface Props {
  modelValue: string
  disabled?: boolean
}

const props = defineProps<Props>()
const emit = defineEmits<{
  'update:modelValue': [value: string]
  'change': [value: string]
}>()

// 响应式状态
const internalValue = ref(props.modelValue)

// 计算属性
const isDisabled = computed(() => props.disabled ?? false)

// 生命周期
onMounted(() => {
  // 初始化逻辑
})
</script>

<template>
  <div class="component-wrapper">
    <!-- 使用语义化的 HTML -->
  </div>
</template>

<style scoped>
/* 使用 scoped 避免样式污染 */
.component-wrapper {
  /* 样式定义 */
}
</style>
```

#### 命名规范
- **组件名**: PascalCase (例：`DatePicker.vue`)
- **Props**: camelCase (例：`modelValue`, `maxLength`)
- **Events**: kebab-case (例：`update:modelValue`, `on-change`)
- **文件名**: kebab-case 或 PascalCase

### 3. 代码质量规范

#### ESLint 规则
基于 `@antfu/eslint-config`，关键规则：

```typescript
// ✅ 必须：未使用的变量（以 _ 开头的除外）
const _unusedVar = 1  // ✅ 允许
const unusedVar = 1   // ❌ 错误

// ⚠️ 警告：显式 any 类型
function process(data: any) {}  // ⚠️ 尽量避免

// ⚠️ 警告：console.log（特定 console 方法允许）
console.log('debug')       // ⚠️ 警告
console.warn('warning')    // ✅ 允许
console.error('error')     // ✅ 允许
console.info('info')       // ✅ 允许

// ✅ 必须：使用 const 而非 let（如果变量不会重新赋值）
const count = 1           // ✅ 推荐
let count = 1             // ⚠️ 如果不重新赋值则警告

// ❌ 禁止：使用 var
var oldStyle = 1          // ❌ 错误

// ❌ 禁止：debugger
debugger                  // ❌ 错误
```

#### 特殊规则覆盖
- **packages/template**: 允许 any 和 non-null assertion
- **tests**: 允许 console 和宽松类型
- **packages/device**: 允许宽松类型规则

### 4. Git 提交规范

遵循 [Conventional Commits](https://www.conventionalcommits.org/)：

```bash
# 格式
<type>(<scope>): <subject>

# 类型（必选）
feat:      # 新功能
fix:       # 修复 bug
docs:      # 文档更新
style:     # 代码格式化（不影响功能）
refactor:  # 重构（既不是新功能也不是修复）
perf:      # 性能优化
test:      # 测试相关
build:     # 构建系统或外部依赖
ci:        # CI/CD 配置
chore:     # 其他杂项
revert:    # 回滚提交

# 示例
feat(chart): 添加饼图组件
fix(datepicker): 修复日期选择器范围错误
docs(readme): 更新安装说明
refactor(form): 优化表单验证逻辑
```

**提交规则**：
- Subject 最大长度：100 字符
- 不限制大小写
- 清晰描述变更内容

### 5. 包管理规范

#### pnpm 使用
```bash
# ✅ 安装依赖（根目录）
pnpm install

# ✅ 添加依赖到特定包
pnpm add <package> --filter <workspace-name>

# ✅ 运行特定包的脚本
pnpm --filter <workspace-name> <script>

# ✅ 运行所有包的脚本
pnpm -r <script>

# ✅ 清理构建产物
pnpm clean-build

# ❌ 避免：不要使用 npm 或 yarn
# npm install  # ❌
```

#### 版本要求
- **Node.js**: >= 18.0.0
- **pnpm**: >= 8.0.0（推荐 9.15.9）

### 6. 构建和打包

#### 构建命令
```bash
# 开发模式
pnpm dev

# 构建单个库
pnpm build:lib

# 构建所有包
pnpm build:all

# 清理并构建
pnpm build:all:clean

# 详细输出
pnpm build:all:verbose

# 干运行（不实际构建）
pnpm build:all:dry
```

#### 输出目录
- **dist/**: 构建输出（UMD/CJS）
- **es/**: ES Module 输出
- **lib/**: CommonJS 输出
- **types/**: TypeScript 类型定义

### 7. 测试规范

#### 测试工具
- **单元测试**: Vitest
- **E2E 测试**: Playwright
- **覆盖率**: 使用 Vitest 内置覆盖率工具

#### 测试文件命名
```
src/
├── Component.ts
├── Component.test.ts      # 单元测试
├── Component.spec.ts      # 规范测试
└── Component.bench.ts     # 性能测试
```

### 8. 文档规范

#### README 结构
每个包应包含：
1. **简介**: 包的用途和特性
2. **安装**: 安装说明
3. **快速开始**: 基本用法示例
4. **API 文档**: 详细的 API 说明
5. **示例**: 实际使用案例
6. **许可证**: MIT License

#### 注释规范
```typescript
/**
 * 组件描述
 * 
 * @example
 * ```ts
 * const result = myFunction('example')
 * ```
 * 
 * @param param1 - 参数说明
 * @param param2 - 参数说明
 * @returns 返回值说明
 */
export function myFunction(param1: string, param2?: number): string {
  // 实现逻辑
}
```

## 开发工作流

### 1. 添加新组件库

```bash
# 使用脚本创建
pnpm create-submodule

# 按照提示输入信息
# - 库名称
# - 库描述
# - 作者信息
```

### 2. 开发流程

1. **创建功能分支**
   ```bash
   git checkout -b feat/component-name
   ```

2. **开发功能**
   - 编写代码
   - 添加类型定义
   - 编写测试
   - 添加文档

3. **本地验证**
   ```bash
   pnpm lint           # 代码检查
   pnpm lint:fix       # 自动修复
   pnpm test           # 运行测试
   pnpm build          # 构建验证
   ```

4. **提交代码**
   ```bash
   git add .
   git commit -m "feat(component): 添加新组件"
   ```

5. **推送和 PR**
   ```bash
   git push origin feat/component-name
   # 创建 Pull Request
   ```

### 3. 维护子模块

```bash
# 提交所有子模块
pnpm commit-submodules

# 设置所有包
pnpm setup-packages
```

## 最佳实践

### 1. 性能优化

- ✅ 使用 `computed` 缓存计算结果
- ✅ 大列表使用虚拟滚动
- ✅ 使用 `v-once` 对于静态内容
- ✅ 合理使用 `v-show` vs `v-if`
- ✅ 组件懒加载
- ✅ Tree-shaking 友好的代码组织

### 2. 代码组织

```typescript
// ✅ 推荐：按功能模块组织
src/
├── components/      # 组件
├── composables/     # 组合式函数
├── utils/           # 工具函数
├── types/           # 类型定义
├── constants/       # 常量
└── index.ts         # 入口文件
```

### 3. 依赖管理

- ✅ 使用 workspace protocol: `"@ldesign/shared": "workspace:*"`
- ✅ 统一版本管理（在 pnpm-workspace.yaml 的 catalog 中）
- ✅ 区分 dependencies 和 devDependencies
- ❌ 避免循环依赖

### 4. 样式管理

```vue
<style scoped>
/* ✅ 推荐：使用 CSS 变量 */
.component {
  color: var(--ld-color-primary);
  font-size: var(--ld-font-size-base);
}

/* ✅ 推荐：使用 BEM 命名 */
.ld-button {}
.ld-button__icon {}
.ld-button--primary {}
.ld-button--disabled {}
</style>
```

### 5. 错误处理

```typescript
// ✅ 推荐：完善的错误处理
try {
  await riskyOperation()
} catch (error) {
  console.error('操作失败:', error)
  // 优雅降级或用户提示
}

// ✅ 推荐：使用类型守卫
function isValidData(data: unknown): data is ValidData {
  return typeof data === 'object' && data !== null && 'id' in data
}
```

## 故障排查

### 常见问题

#### 1. 依赖安装失败
```bash
# 清理缓存重新安装
rm -rf node_modules pnpm-lock.yaml
pnpm install
```

#### 2. 构建错误
```bash
# 清理构建产物
pnpm clean-build
pnpm build:all
```

#### 3. TypeScript 错误
- 检查 `tsconfig.json` 配置
- 确保类型定义文件存在
- 重启 TypeScript 服务器

#### 4. Lint 错误
```bash
# 自动修复常见问题
pnpm lint:fix

# 如果自动修复无效，手动检查具体错误
pnpm lint
```

## 资源链接

- **TypeScript**: https://www.typescriptlang.org/
- **Vue 3**: https://vuejs.org/
- **pnpm**: https://pnpm.io/
- **Vite**: https://vitejs.dev/
- **Vitest**: https://vitest.dev/
- **Playwright**: https://playwright.dev/
- **ESLint**: https://eslint.org/
- **Conventional Commits**: https://www.conventionalcommits.org/

## 注意事项

1. **始终使用 pnpm**，不要使用 npm 或 yarn
2. **遵循 TypeScript strict 模式**（配置中已启用）
3. **每个 PR 必须通过 lint 和 test**
4. **保持向后兼容性**，重大变更需要在 CHANGELOG 中说明
5. **文档和代码同步更新**
6. **性能敏感代码必须进行基准测试**
7. **避免不必要的依赖**，保持包体积最小
8. **始终使用中文回复我**

---

> 本规范持续更新，请关注项目 [CHANGELOG](mdc:CHANGELOG.md) 获取最新变更。
