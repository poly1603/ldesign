name: Build Validation

on:
  push:
    branches: [main, develop, master]
    paths:
      - "packages/**"
      - "tools/scripts/build/**"
      - ".github/workflows/build-validation.yml"
  pull_request:
    branches: [main, develop, master]
    paths:
      - "packages/**"
      - "tools/scripts/build/**"
  workflow_dispatch:
    inputs:
      package:
        description: "Specific package to validate (optional)"
        required: false
        type: string
      include_browser_tests:
        description: "Include browser compatibility tests"
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: 20
  PNPM_VERSION: 8

jobs:
  # 检测需要校验的包
  detect-packages:
    name: Detect Packages to Validate
    runs-on: ubuntu-latest
    outputs:
      packages: ${{ steps.detect.outputs.packages }}
      matrix: ${{ steps.detect.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect packages with build artifacts
        id: detect
        run: |
          packages=()
          for package_dir in packages/*; do
            if [ -d "$package_dir" ]; then
              package_name=$(basename "$package_dir")
              
              # 检查是否有构建产物目录
              if [ -d "$package_dir/dist" ] || [ -d "$package_dir/es" ] || [ -d "$package_dir/lib" ]; then
                # 检查是否有构建校验脚本
                if grep -q "build:validate" "$package_dir/package.json" 2>/dev/null; then
                  packages+=("$package_name")
                fi
              fi
            fi
          done

          # 如果指定了特定包，只校验该包
          if [ -n "${{ github.event.inputs.package }}" ]; then
            if [[ " ${packages[@]} " =~ " ${{ github.event.inputs.package }} " ]]; then
              packages=("${{ github.event.inputs.package }}")
            else
              echo "指定的包 '${{ github.event.inputs.package }}' 不存在或没有构建校验脚本"
              packages=()
            fi
          fi

          # 生成矩阵
          matrix_json=$(printf '%s\n' "${packages[@]}" | jq -R . | jq -s .)

          echo "packages=${packages[*]}" >> $GITHUB_OUTPUT
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

          echo "检测到的包: ${packages[*]}"

  # 基础构建校验
  basic-validation:
    name: Basic Validation
    runs-on: ubuntu-latest
    needs: detect-packages
    if: needs.detect-packages.outputs.packages != ''
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.pnpm-store
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache build artifacts
        uses: actions/cache@v3
        with:
          path: |
            packages/${{ matrix.package }}/dist
            packages/${{ matrix.package }}/es
            packages/${{ matrix.package }}/lib
            packages/${{ matrix.package }}/types
          key: ${{ runner.os }}-build-${{ matrix.package }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.package }}-

      - name: Run basic validation for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          echo "🔍 运行基础构建校验: ${{ matrix.package }}"
          pnpm run build:check
        continue-on-error: false

      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: validation-results-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/validation-report.json
            packages/${{ matrix.package }}/build-analysis.json
          retention-days: 7

  # 详细包分析
  detailed-analysis:
    name: Detailed Analysis
    runs-on: ubuntu-latest
    needs: [detect-packages, basic-validation]
    if: needs.detect-packages.outputs.packages != ''
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            packages/${{ matrix.package }}/dist
            packages/${{ matrix.package }}/es
            packages/${{ matrix.package }}/lib
            packages/${{ matrix.package }}/types
          key: ${{ runner.os }}-build-${{ matrix.package }}-${{ github.sha }}

      - name: Run detailed analysis for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          echo "📊 运行详细包分析: ${{ matrix.package }}"
          pnpm run build:analyze
        continue-on-error: true

      - name: Upload analysis results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: analysis-results-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/bundle-analysis.json
            packages/${{ matrix.package }}/performance-report.json
          retention-days: 30

  # 浏览器兼容性测试
  browser-compatibility:
    name: Browser Compatibility
    runs-on: ubuntu-latest
    needs: [detect-packages, basic-validation]
    if: needs.detect-packages.outputs.packages != '' && (github.event.inputs.include_browser_tests == 'true' || github.event_name == 'schedule')
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.detect-packages.outputs.matrix) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        run: pnpm exec playwright install chromium --with-deps

      - name: Restore build cache
        uses: actions/cache@v3
        with:
          path: |
            packages/${{ matrix.package }}/dist
            packages/${{ matrix.package }}/es
            packages/${{ matrix.package }}/lib
            packages/${{ matrix.package }}/types
          key: ${{ runner.os }}-build-${{ matrix.package }}-${{ github.sha }}

      - name: Run browser compatibility tests for ${{ matrix.package }}
        run: |
          cd packages/${{ matrix.package }}
          echo "🧪 运行浏览器兼容性测试: ${{ matrix.package }}"
          pnpm run build:browser-test
        continue-on-error: true

      - name: Upload browser test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: browser-test-results-${{ matrix.package }}
          path: |
            packages/${{ matrix.package }}/browser-test-report.json
            packages/${{ matrix.package }}/screenshots/
          retention-days: 7

  # 生成综合报告
  generate-report:
    name: Generate Validation Report
    runs-on: ubuntu-latest
    needs: [detect-packages, basic-validation, detailed-analysis]
    if: always() && needs.detect-packages.outputs.packages != ''

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Generate comprehensive report
        run: |
          echo "# 🔍 构建产物校验报告" > validation-report.md
          echo "" >> validation-report.md
          echo "**生成时间**: $(date)" >> validation-report.md
          echo "**提交**: ${{ github.sha }}" >> validation-report.md
          echo "**分支**: ${{ github.ref_name }}" >> validation-report.md
          echo "" >> validation-report.md

          packages="${{ needs.detect-packages.outputs.packages }}"
          echo "**校验的包**: $packages" >> validation-report.md
          echo "" >> validation-report.md

          echo "## 📊 校验结果汇总" >> validation-report.md
          echo "" >> validation-report.md
          echo "| 包名 | 基础校验 | 详细分析 | 浏览器测试 |" >> validation-report.md
          echo "|------|----------|----------|------------|" >> validation-report.md

          for package in $packages; do
            basic_status="❌"
            analysis_status="❌"
            browser_status="⏭️"
            
            if [ -d "./artifacts/validation-results-$package" ]; then
              basic_status="✅"
            fi
            
            if [ -d "./artifacts/analysis-results-$package" ]; then
              analysis_status="✅"
            fi
            
            if [ -d "./artifacts/browser-test-results-$package" ]; then
              browser_status="✅"
            fi
            
            echo "| $package | $basic_status | $analysis_status | $browser_status |" >> validation-report.md
          done

          echo "" >> validation-report.md
          echo "## 📋 详细信息" >> validation-report.md
          echo "" >> validation-report.md
          echo "- ✅ 通过" >> validation-report.md
          echo "- ❌ 失败" >> validation-report.md
          echo "- ⏭️ 跳过" >> validation-report.md
          echo "" >> validation-report.md
          echo "查看具体的校验结果，请下载对应的构件文件。" >> validation-report.md

      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: validation-report.md
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('validation-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
