<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Delete Confirm Dialog Plugin - Demo</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 40px 20px;
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
    }

    h1 {
      color: white;
      text-align: center;
      margin-bottom: 40px;
      font-size: 36px;
      text-shadow: 0 2px 4px rgba(0,0,0,0.2);
    }

    .demo-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 24px;
      margin-bottom: 40px;
    }

    .demo-card {
      background: white;
      border-radius: 12px;
      padding: 24px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1), 0 1px 3px rgba(0,0,0,0.08);
      transition: transform 0.2s, box-shadow 0.2s;
    }

    .demo-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 24px rgba(0,0,0,0.15), 0 4px 8px rgba(0,0,0,0.1);
    }

    .demo-card h3 {
      color: #333;
      margin-bottom: 12px;
      font-size: 20px;
    }

    .demo-card p {
      color: #666;
      margin-bottom: 20px;
      line-height: 1.6;
      font-size: 14px;
    }

    .demo-card button {
      width: 100%;
      padding: 12px 24px;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      border-radius: 8px;
      font-size: 16px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s;
      box-shadow: 0 4px 6px rgba(102, 126, 234, 0.3);
    }

    .demo-card button:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(102, 126, 234, 0.4);
    }

    .demo-card button:active {
      transform: translateY(0);
    }

    .result {
      margin-top: 40px;
      background: white;
      border-radius: 12px;
      padding: 24px;
      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }

    .result h2 {
      color: #333;
      margin-bottom: 16px;
    }

    .result-content {
      background: #f5f5f5;
      border-radius: 8px;
      padding: 16px;
      font-family: 'Courier New', monospace;
      font-size: 14px;
      color: #333;
      max-height: 300px;
      overflow-y: auto;
    }

    .result-item {
      padding: 8px 0;
      border-bottom: 1px solid #e0e0e0;
    }

    .result-item:last-child {
      border-bottom: none;
    }

    .result-time {
      color: #999;
      font-size: 12px;
    }

    .result-message {
      margin-top: 4px;
    }

    .result-success {
      color: #4caf50;
    }

    .result-cancel {
      color: #ff9800;
    }

    .result-error {
      color: #f44336;
    }

    /* Dialog 基础样式 */
    .engine-dialog-mask {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      align-items: center;
      justify-content: center;
      z-index: 2000;
    }

    .engine-dialog {
      position: relative;
      background: white;
      border-radius: 12px;
      box-shadow: 0 12px 48px rgba(0, 0, 0, 0.2);
      max-width: 90vw;
      max-height: 90vh;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }

    .engine-dialog-header {
      padding: 20px 24px;
      border-bottom: 1px solid #e8e8e8;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .engine-dialog-title {
      font-size: 18px;
      font-weight: 600;
      color: #333;
      margin: 0;
    }

    .engine-dialog-close {
      background: none;
      border: none;
      font-size: 24px;
      cursor: pointer;
      color: #999;
      padding: 0;
      width: 28px;
      height: 28px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 4px;
      transition: all 0.2s;
    }

    .engine-dialog-close:hover {
      background: #f5f5f5;
      color: #666;
    }

    .engine-dialog-body {
      padding: 24px;
      flex: 1;
      overflow-y: auto;
    }

    .engine-dialog-footer {
      padding: 16px 24px;
      border-top: 1px solid #e8e8e8;
      display: flex;
      justify-content: flex-end;
      gap: 12px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>🗑️ Delete Confirm Dialog Plugin</h1>

    <div class="demo-grid">
      <div class="demo-card">
        <h3>1️⃣ 简单删除</h3>
        <p>最基础的删除确认弹窗，用于一般的删除操作。</p>
        <button onclick="demo1_simpleDelete()">删除用户数据</button>
      </div>

      <div class="demo-card">
        <h3>2️⃣ 自定义消息</h3>
        <p>自定义确认消息内容，更具体地描述删除操作。</p>
        <button onclick="demo2_customMessage()">删除文件</button>
      </div>

      <div class="demo-card">
        <h3>3️⃣ 自定义按钮</h3>
        <p>自定义按钮文本和样式类型。</p>
        <button onclick="demo3_customButtons()">删除项目</button>
      </div>

      <div class="demo-card">
        <h3>4️⃣ 危险删除（输入确认）</h3>
        <p>对于重要数据的删除，需要用户输入确认文本。</p>
        <button onclick="demo4_dangerousDelete()">删除数据库</button>
      </div>

      <div class="demo-card">
        <h3>5️⃣ 快速删除</h3>
        <p>使用简化的 API 快速创建删除确认。</p>
        <button onclick="demo5_quickDelete()">快速删除</button>
      </div>

      <div class="demo-card">
        <h3>6️⃣ 批量删除</h3>
        <p>批量删除多个项目，显示数量统计。</p>
        <button onclick="demo6_batchDelete()">删除 5 个文件</button>
      </div>

      <div class="demo-card">
        <h3>7️⃣ 带回调的删除</h3>
        <p>在确认后自动执行回调函数。</p>
        <button onclick="demo7_withCallback()">删除并执行回调</button>
      </div>

      <div class="demo-card">
        <h3>8️⃣ 无警告图标</h3>
        <p>隐藏警告图标的简洁版本。</p>
        <button onclick="demo8_noIcon()">删除（无图标）</button>
      </div>
    </div>

    <div class="result">
      <h2>📋 操作结果</h2>
      <div class="result-content" id="result-content">
        <div style="color: #999; text-align: center; padding: 20px;">
          点击上方按钮开始测试...
        </div>
      </div>
    </div>
  </div>

  <script>
    // ============ 模拟 Dialog Manager ============
    class SimpleDialogManager {
      constructor() {
        this.dialogs = []
        this.zIndexCounter = 2000
      }

      async open(options) {
        const id = 'dialog-' + Date.now()
        const zIndex = this.zIndexCounter++

        return new Promise((resolve) => {
          // 创建遮罩层
          const mask = document.createElement('div')
          mask.className = 'engine-dialog-mask'
          mask.style.zIndex = zIndex

          // 创建对话框
          const dialog = document.createElement('div')
          dialog.className = 'engine-dialog'
          if (options.customClass) {
            dialog.className += ' ' + options.customClass
          }
          if (options.width) {
            dialog.style.width = typeof options.width === 'number' ? options.width + 'px' : options.width
          }

          // 头部
          const header = document.createElement('div')
          header.className = 'engine-dialog-header'
          header.innerHTML = `
            <h3 class="engine-dialog-title">${options.title || ''}</h3>
            ${options.closable !== false ? '<button class="engine-dialog-close">×</button>' : ''}
          `

          // 内容
          const body = document.createElement('div')
          body.className = 'engine-dialog-body'
          if (options.html) {
            body.innerHTML = options.content || ''
          } else {
            body.textContent = options.content || ''
          }

          // 底部按钮
          const footer = document.createElement('div')
          footer.className = 'engine-dialog-footer'
          if (options.buttons && options.buttons.length > 0) {
            options.buttons.forEach((btn) => {
              const button = document.createElement('button')
              button.textContent = btn.text
              button.disabled = btn.disabled || false
              button.onclick = () => {
                if (btn.onClick) {
                  btn.onClick(instance)
                }
              }
              footer.appendChild(button)
            })
          }

          dialog.appendChild(header)
          dialog.appendChild(body)
          if (options.buttons && options.buttons.length > 0) {
            dialog.appendChild(footer)
          }
          mask.appendChild(dialog)

          // 关闭按钮事件
          const closeBtn = header.querySelector('.engine-dialog-close')
          if (closeBtn) {
            closeBtn.onclick = () => instance.close(false)
          }

          // 添加到页面
          document.body.appendChild(mask)

          // 动画效果
          setTimeout(() => {
            mask.style.animation = 'fadeIn 0.2s'
            dialog.style.animation = 'zoomIn 0.2s'
          }, 10)

          const instance = {
            id,
            element: dialog,
            maskElement: mask,
            close: async (result) => {
              mask.style.animation = 'fadeOut 0.2s'
              dialog.style.animation = 'zoomOut 0.2s'
              setTimeout(() => {
                document.body.removeChild(mask)
              }, 200)
              if (options.onClose) {
                options.onClose(result)
              }
              return result
            }
          }

          if (options.onOpen) {
            options.onOpen()
          }

          resolve(instance)
        })
      }
    }

    // ============ Delete Confirm Plugin ============
    class DeleteConfirmPlugin {
      constructor() {
        this.dialogManager = new SimpleDialogManager()
        this.injectStyles()
      }

      injectStyles() {
        if (document.querySelector('#delete-confirm-styles')) return

        const style = document.createElement('style')
        style.id = 'delete-confirm-styles'
        style.textContent = `
          @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
          }
          @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
          }
          @keyframes zoomIn {
            from { transform: scale(0.9); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
          }
          @keyframes zoomOut {
            from { transform: scale(1); opacity: 1; }
            to { transform: scale(0.9); opacity: 0; }
          }
          @keyframes scaleIn {
            from { transform: scale(0.8); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
          }

          .delete-confirm-content {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            padding: 10px 0;
          }

          .delete-confirm-icon {
            animation: scaleIn 0.3s ease-out;
          }

          .delete-confirm-message {
            font-size: 16px;
            line-height: 1.6;
            color: #333;
            text-align: center;
          }

          .delete-confirm-input-group {
            width: 100%;
            display: flex;
            flex-direction: column;
            gap: 10px;
          }

          .delete-confirm-label {
            font-size: 14px;
            color: #666;
          }

          .delete-confirm-label strong {
            color: #f44336;
            font-weight: 600;
          }

          .delete-confirm-input {
            width: 100%;
            padding: 10px 12px;
            border: 2px solid #e0e0e0;
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.2s;
          }

          .delete-confirm-input:focus {
            outline: none;
            border-color: #2196F3;
          }
        `
        document.head.appendChild(style)
      }

      async showDeleteConfirm(options = {}) {
        const {
          itemName = '此项',
          message,
          showWarningIcon = true,
          confirmText = '确认删除',
          cancelText = '取消',
          requireConfirmInput = false,
          confirmInputText = 'DELETE',
          onConfirm,
          onCancel
        } = options

        const content = message || `确定要删除${itemName}吗？此操作不可撤销。`

        if (requireConfirmInput) {
          return this.showWithInput(content, confirmInputText, confirmText, cancelText, showWarningIcon, onConfirm, onCancel)
        }

        return this.showSimple(content, confirmText, cancelText, showWarningIcon, onConfirm, onCancel)
      }

      async showSimple(content, confirmText, cancelText, showWarningIcon, onConfirm, onCancel) {
        return new Promise((resolve) => {
          const contentHTML = `
            <div class="delete-confirm-content">
              ${showWarningIcon ? `
                <div class="delete-confirm-icon">
                  <svg width="48" height="48" viewBox="0 0 48 48" fill="none">
                    <circle cx="24" cy="24" r="20" fill="#FFF3E0"/>
                    <path d="M24 14V26M24 30V32" stroke="#FF9800" stroke-width="3" stroke-linecap="round"/>
                  </svg>
                </div>
              ` : ''}
              <div class="delete-confirm-message">${content}</div>
            </div>
          `

          this.dialogManager.open({
            title: '删除确认',
            content: contentHTML,
            html: true,
            width: 460,
            customClass: 'delete-confirm-dialog',
            buttons: [
              {
                text: cancelText,
                onClick: async (dialog) => {
                  if (onCancel) onCancel()
                  await dialog.close(false)
                  resolve(false)
                }
              },
              {
                text: confirmText,
                onClick: async (dialog) => {
                  if (onConfirm) {
                    try {
                      await onConfirm()
                    } catch (e) {
                      console.error(e)
                      return
                    }
                  }
                  await dialog.close(true)
                  resolve(true)
                }
              }
            ]
          })
        })
      }

      async showWithInput(content, confirmInputText, confirmText, cancelText, showWarningIcon, onConfirm, onCancel) {
        return new Promise((resolve) => {
          const contentHTML = `
            <div class="delete-confirm-content">
              ${showWarningIcon ? `
                <div class="delete-confirm-icon">
                  <svg width="48" height="48" viewBox="0 0 48 48" fill="none">
                    <circle cx="24" cy="24" r="20" fill="#FFEBEE"/>
                    <path d="M24 14V26M24 30V32" stroke="#F44336" stroke-width="3" stroke-linecap="round"/>
                  </svg>
                </div>
              ` : ''}
              <div class="delete-confirm-message">${content}</div>
              <div class="delete-confirm-input-group">
                <label class="delete-confirm-label">
                  请输入 <strong>${confirmInputText}</strong> 以确认删除：
                </label>
                <input type="text" class="delete-confirm-input" placeholder="输入 ${confirmInputText}" autocomplete="off" />
              </div>
            </div>
          `

          this.dialogManager.open({
            title: '删除确认',
            content: contentHTML,
            html: true,
            width: 500,
            customClass: 'delete-confirm-dialog',
            buttons: [
              {
                text: cancelText,
                onClick: async (dialog) => {
                  if (onCancel) onCancel()
                  await dialog.close(false)
                  resolve(false)
                }
              },
              {
                text: confirmText,
                disabled: true,
                onClick: async (dialog) => {
                  if (onConfirm) {
                    try {
                      await onConfirm()
                    } catch (e) {
                      console.error(e)
                      return
                    }
                  }
                  await dialog.close(true)
                  resolve(true)
                }
              }
            ],
            onOpen: () => {
              setTimeout(() => {
                const input = document.querySelector('.delete-confirm-input')
                const buttons = document.querySelectorAll('.engine-dialog-footer button')
                const confirmBtn = buttons[1]

                if (input && confirmBtn) {
                  input.focus()
                  input.addEventListener('input', (e) => {
                    confirmBtn.disabled = e.target.value.trim() !== confirmInputText
                  })
                  input.addEventListener('keypress', (e) => {
                    if (e.key === 'Enter' && e.target.value.trim() === confirmInputText) {
                      confirmBtn.click()
                    }
                  })
                }
              }, 100)
            }
          })
        })
      }
    }

    // 创建实例
    const deletePlugin = new DeleteConfirmPlugin()

    // 日志函数
    function logResult(message, type = 'info') {
      const resultContent = document.getElementById('result-content')
      const item = document.createElement('div')
      item.className = 'result-item'
      
      const time = new Date().toLocaleTimeString()
      const typeClass = type === 'success' ? 'result-success' : type === 'cancel' ? 'result-cancel' : type === 'error' ? 'result-error' : ''
      
      item.innerHTML = `
        <div class="result-time">${time}</div>
        <div class="result-message ${typeClass}">${message}</div>
      `
      
      if (resultContent.firstChild.textContent.includes('点击上方按钮')) {
        resultContent.innerHTML = ''
      }
      
      resultContent.insertBefore(item, resultContent.firstChild)
    }

    // ============ Demo 函数 ============
    async function demo1_simpleDelete() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '用户数据'
      })
      logResult(confirmed ? '✅ 用户确认删除用户数据' : '❌ 用户取消删除', confirmed ? 'success' : 'cancel')
    }

    async function demo2_customMessage() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '文件 "document.pdf"',
        message: '删除后将无法恢复，确定要继续吗？'
      })
      logResult(confirmed ? '✅ 文件已删除' : '❌ 取消删除文件', confirmed ? 'success' : 'cancel')
    }

    async function demo3_customButtons() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '项目文件夹',
        confirmText: '永久删除',
        cancelText: '暂不删除'
      })
      logResult(confirmed ? '✅ 项目已永久删除' : '❌ 暂不删除项目', confirmed ? 'success' : 'cancel')
    }

    async function demo4_dangerousDelete() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '整个数据库',
        message: '您即将删除整个数据库，这是一个非常危险的操作！',
        requireConfirmInput: true,
        confirmInputText: 'DELETE'
      })
      logResult(confirmed ? '✅ 数据库已删除（危险操作）' : '❌ 取消删除数据库', confirmed ? 'success' : 'cancel')
    }

    async function demo5_quickDelete() {
      const confirmed = await deletePlugin.showDeleteConfirm({ itemName: '这条记录' })
      logResult(confirmed ? '✅ 记录已删除' : '❌ 取消删除记录', confirmed ? 'success' : 'cancel')
    }

    async function demo6_batchDelete() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '5 个文件',
        message: '确定要删除这 5 个文件吗？'
      })
      logResult(confirmed ? '✅ 批量删除了 5 个文件' : '❌ 取消批量删除', confirmed ? 'success' : 'cancel')
    }

    async function demo7_withCallback() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '重要文档',
        onConfirm: () => {
          logResult('🔄 执行删除回调...', 'info')
        },
        onCancel: () => {
          logResult('🔄 执行取消回调...', 'info')
        }
      })
      logResult(confirmed ? '✅ 删除完成（带回调）' : '❌ 已取消（带回调）', confirmed ? 'success' : 'cancel')
    }

    async function demo8_noIcon() {
      const confirmed = await deletePlugin.showDeleteConfirm({
        itemName: '临时文件',
        showWarningIcon: false
      })
      logResult(confirmed ? '✅ 临时文件已删除' : '❌ 取消删除', confirmed ? 'success' : 'cancel')
    }

    // 初始化日志
    logResult('🚀 Delete Confirm Plugin 已就绪', 'info')
  </script>
</body>
</html>
