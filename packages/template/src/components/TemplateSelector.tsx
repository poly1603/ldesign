/**
 * Ê®°ÊùøÈÄâÊã©Âô®ÁªÑ‰ª∂
 *
 * Êèê‰æõ‰æøÊç∑ÁöÑÊ®°ÊùøÂàáÊç¢ÂäüËÉΩÔºåÂèØ‰ª•ÁÅµÊ¥ªÊîæÁΩÆÂú®‰ªªÊÑè‰ΩçÁΩÆ
 */

import type { TemplateInfo } from '../types'
import { computed, defineComponent, onMounted, type PropType, ref } from 'vue'
// ÂØºÂÖ• getCurrentInstance
import { getCurrentInstance } from 'vue'

import './TemplateSelector.less'

export interface TemplateSelectorProps {
  /** ÂΩìÂâçÊ®°Êùø ID */
  currentTemplate?: string
  /** ÊòæÁ§∫Ê®°Âºè */
  mode?: 'dropdown' | 'grid' | 'list'
  /** ÊòØÂê¶ÊòæÁ§∫È¢ÑËßà */
  showPreview?: boolean
  /** ÊòØÂê¶ÊòæÁ§∫Ê®°Êùø‰ø°ÊÅØ */
  showInfo?: boolean
  /** Ëá™ÂÆö‰πâÊ†∑ÂºèÁ±ªÂêç */
  className?: string
  /** Ê®°ÊùøÂàáÊç¢ÂõûË∞É */
  onTemplateChange?: (templateId: string) => void
}

export default defineComponent({
  name: 'TemplateSelector',
  props: {
    currentTemplate: {
      type: String,
      default: '',
    },
    mode: {
      type: String as () => 'dropdown' | 'grid' | 'list',
      default: 'dropdown',
    },
    showPreview: {
      type: Boolean,
      default: false,
    },
    showInfo: {
      type: Boolean,
      default: true,
    },
    className: {
      type: String,
      default: '',
    },
    onTemplateChange: {
      type: Function as PropType<(templateId: string) => void>,
      default: undefined,
    },
  },
  emits: ['template-change'],
  setup(props, { emit }) {
    const isOpen = ref(false)
    const availableTemplates = ref<TemplateInfo[]>([])
    const loading = ref(true)
    const selectedTemplate = ref(props.currentTemplate)

    // Ëé∑ÂèñÊ®°ÊùøÁÆ°ÁêÜÂô®ÂÆû‰æã
    const getTemplateManager = () => {
      // ‰ªéÂÖ®Â±ÄÂ±ûÊÄßÊàñÊ≥®ÂÖ•‰∏≠Ëé∑ÂèñÊ®°ÊùøÁÆ°ÁêÜÂô®
      const instance = getCurrentInstance()
      return instance?.appContext.config.globalProperties.$templateManager
    }

    // Âä†ËΩΩÂèØÁî®Ê®°Êùø
    const loadTemplates = async () => {
      try {
        loading.value = true
        const templateManager = getTemplateManager()

        if (templateManager) {
          availableTemplates.value = await templateManager.getAvailableTemplates()
          console.log('üìã Âä†ËΩΩÂèØÁî®Ê®°Êùø:', availableTemplates.value.length)
        } else {
          console.warn('‚ö†Ô∏è Ê®°ÊùøÁÆ°ÁêÜÂô®Êú™ÊâæÂà∞')
        }
      } catch (error) {
        console.error('‚ùå Âä†ËΩΩÊ®°ÊùøÂ§±Ë¥•:', error)
      } finally {
        loading.value = false
      }
    }

    // ÂΩìÂâçÊ®°Êùø‰ø°ÊÅØ
    const currentTemplateInfo = computed(() => {
      return availableTemplates.value.find((t: TemplateInfo) => t.id === selectedTemplate.value)
    })

    // ÂàáÊç¢Ê®°Êùø
    const switchTemplate = async (templateId: string) => {
      try {
        console.log(`üîÑ ÂàáÊç¢Ê®°Êùø: ${templateId}`)
        const templateManager = getTemplateManager()

        if (templateManager) {
          await templateManager.switchTemplate(templateId)
          selectedTemplate.value = templateId

          // Ëß¶Âèë‰∫ã‰ª∂
          emit('template-change', templateId)
          props.onTemplateChange?.(templateId)

          console.log(`‚úÖ Ê®°ÊùøÂàáÊç¢ÊàêÂäü: ${templateId}`)
        }
      } catch (error) {
        console.error(`‚ùå Ê®°ÊùøÂàáÊç¢Â§±Ë¥•: ${templateId}`, error)
      } finally {
        isOpen.value = false
      }
    }

    // Ëé∑ÂèñÊ®°ÊùøÈ¢ÑËßàÂõæ
    const getTemplatePreview = (template: TemplateInfo) => {
      return template.config.preview || '/placeholder-template.png'
    }

    // Ëé∑ÂèñËÆæÂ§áÂõæÊ†á
    const getDeviceIcon = (device: string) => {
      const icons = {
        mobile: 'üì±',
        tablet: 'üìü',
        desktop: 'üñ•Ô∏è',
      }
      return icons[device as keyof typeof icons] || 'üì±'
    }

    onMounted(() => {
      loadTemplates()
    })

    // Ê∏≤Êüì‰∏ãÊãâÊ®°Âºè
    const renderDropdown = () => (
      <div class={['template-selector', 'template-selector--dropdown', props.className]}>
        <div
          class={['template-selector__trigger', { 'is-open': isOpen.value }]}
          onClick={() => (isOpen.value = !isOpen.value)}
        >
          <div class="template-selector__current">
            {currentTemplateInfo.value ? (
              <>
                <span class="template-selector__icon">{getDeviceIcon(currentTemplateInfo.value.device)}</span>
                <span class="template-selector__name">{currentTemplateInfo.value.name}</span>
              </>
            ) : (
              <span class="template-selector__placeholder">ÈÄâÊã©Ê®°Êùø</span>
            )}
          </div>
          <span class={['template-selector__arrow', { 'is-open': isOpen.value }]}>‚ñº</span>
        </div>

        {isOpen.value && (
          <div class="template-selector__dropdown">
            {loading.value ? (
              <div class="template-selector__loading">Âä†ËΩΩ‰∏≠...</div>
            ) : (
              <div class="template-selector__list">
                {availableTemplates.value.map((template: TemplateInfo) => (
                  <div
                    key={template.id}
                    class={['template-selector__item', { 'is-active': template.id === selectedTemplate.value }]}
                    onClick={() => switchTemplate(template.id)}
                  >
                    <span class="template-selector__item-icon">{getDeviceIcon(template.device)}</span>
                    <div class="template-selector__item-content">
                      <div class="template-selector__item-name">{template.name}</div>
                      {props.showInfo && <div class="template-selector__item-desc">{template.config.description}</div>}
                    </div>
                    {template.id === selectedTemplate.value && <span class="template-selector__item-check">‚úì</span>}
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    )

    // Ê∏≤ÊüìÁΩëÊ†ºÊ®°Âºè
    const renderGrid = () => (
      <div class={['template-selector', 'template-selector--grid', props.className]}>
        <div class="template-selector__header">
          <h3>ÈÄâÊã©Ê®°Êùø</h3>
        </div>
        {loading.value ? (
          <div class="template-selector__loading">Âä†ËΩΩ‰∏≠...</div>
        ) : (
          <div class="template-selector__grid">
            {availableTemplates.value.map((template: TemplateInfo) => (
              <div
                key={template.id}
                class={['template-selector__card', { 'is-active': template.id === selectedTemplate.value }]}
                onClick={() => switchTemplate(template.id)}
              >
                {props.showPreview && (
                  <div class="template-selector__preview">
                    <img src={getTemplatePreview(template)} alt={template.name} />
                  </div>
                )}
                <div class="template-selector__card-content">
                  <div class="template-selector__card-header">
                    <span class="template-selector__card-icon">{getDeviceIcon(template.device)}</span>
                    <span class="template-selector__card-name">{template.name}</span>
                  </div>
                  {props.showInfo && <div class="template-selector__card-desc">{template.config.description}</div>}
                </div>
                {template.id === selectedTemplate.value && <div class="template-selector__card-check">‚úì</div>}
              </div>
            ))}
          </div>
        )}
      </div>
    )

    // Ê∏≤ÊüìÂàóË°®Ê®°Âºè
    const renderList = () => (
      <div class={['template-selector', 'template-selector--list', props.className]}>
        <div class="template-selector__header">
          <h3>ÂèØÁî®Ê®°Êùø</h3>
        </div>
        {loading.value ? (
          <div class="template-selector__loading">Âä†ËΩΩ‰∏≠...</div>
        ) : (
          <div class="template-selector__list">
            {availableTemplates.value.map((template: TemplateInfo) => (
              <div
                key={template.id}
                class={['template-selector__list-item', { 'is-active': template.id === selectedTemplate.value }]}
                onClick={() => switchTemplate(template.id)}
              >
                <div class="template-selector__list-icon">{getDeviceIcon(template.device)}</div>
                <div class="template-selector__list-content">
                  <div class="template-selector__list-name">{template.name}</div>
                  {props.showInfo && <div class="template-selector__list-desc">{template.config.description}</div>}
                  <div class="template-selector__list-meta">
                    ËÆæÂ§á: {template.device} | ÁâàÊú¨: {template.config.version || '1.0.0'}
                  </div>
                </div>
                <div class="template-selector__list-actions">
                  {template.id === selectedTemplate.value ? (
                    <span class="template-selector__list-current">ÂΩìÂâç</span>
                  ) : (
                    <button class="template-selector__list-btn">ÂàáÊç¢</button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    )

    return () => {
      switch (props.mode) {
        case 'grid':
          return renderGrid()
        case 'list':
          return renderList()
        default:
          return renderDropdown()
      }
    }
  },
})
