/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonClickEventDetail, ButtonFocusEventDetail, ButtonHtmlType, ButtonShape, ButtonType } from "./types/button";
import { Size, Status } from "./types";
import { CardBorder, CardClickEventDetail, CardHoverEventDetail, CardShadow } from "./types/card";
import { FormFieldChangeEvent, FormFieldValidateResult, FormItemInstance, FormModel, FormResetEvent, FormRules, FormSubmitEvent, FormValidateEvent, FormValidateResult } from "./components/form/form";
import { FormItemRule, FormItemValidateEvent, FormItemValidateResult } from "./components/form/form-item";
import { InputChangeEventDetail, InputClearEventDetail, InputFocusEventDetail, InputInputEventDetail, InputType, InputVariant } from "./types/input";
import { PaginationConfig, TableColumn, TableFilterEvent, TablePageChangeEvent, TableRow, TableRowClickEvent, TableRowSelectEvent, TableSortEvent } from "./components/table/table";
import { TooltipPlacement } from "./components/tooltip/tooltip";
export { ButtonClickEventDetail, ButtonFocusEventDetail, ButtonHtmlType, ButtonShape, ButtonType } from "./types/button";
export { Size, Status } from "./types";
export { CardBorder, CardClickEventDetail, CardHoverEventDetail, CardShadow } from "./types/card";
export { FormFieldChangeEvent, FormFieldValidateResult, FormItemInstance, FormModel, FormResetEvent, FormRules, FormSubmitEvent, FormValidateEvent, FormValidateResult } from "./components/form/form";
export { FormItemRule, FormItemValidateEvent, FormItemValidateResult } from "./components/form/form-item";
export { InputChangeEventDetail, InputClearEventDetail, InputFocusEventDetail, InputInputEventDetail, InputType, InputVariant } from "./types/input";
export { PaginationConfig, TableColumn, TableFilterEvent, TablePageChangeEvent, TableRow, TableRowClickEvent, TableRowSelectEvent, TableSortEvent } from "./components/table/table";
export { TooltipPlacement } from "./components/tooltip/tooltip";
export namespace Components {
    interface LdButton {
        /**
          * 自动聚焦
          * @default false
         */
        "autofocus": boolean;
        /**
          * 是否为块级按钮
          * @default false
         */
        "block": boolean;
        /**
          * 自定义 CSS 类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 是否为危险按钮
          * @default false
         */
        "danger": boolean;
        /**
          * 是否禁用按钮
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否为幽灵按钮
          * @default false
         */
        "ghost": boolean;
        /**
          * 按钮链接地址
         */
        "href"?: string;
        /**
          * HTML button 类型
          * @default 'button'
         */
        "htmlType": ButtonHtmlType;
        /**
          * 按钮图标（左侧）
         */
        "icon"?: string;
        /**
          * 按钮图标（右侧）
         */
        "iconRight"?: string;
        /**
          * 是否显示加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * 自定义加载图标
         */
        "loadingIcon"?: string;
        /**
          * 按钮形状
          * @default 'default'
         */
        "shape": ButtonShape;
        /**
          * 按钮尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 按钮状态
         */
        "status"?: Status;
        /**
          * Tab 索引
         */
        "tabindex"?: number;
        /**
          * 链接打开方式
          * @default '_self'
         */
        "target": '_blank' | '_self' | '_parent' | '_top';
        /**
          * 按钮文本内容
         */
        "text"?: string;
        /**
          * 按钮类型
          * @default 'default'
         */
        "type": ButtonType;
    }
    interface LdCard {
        /**
          * 内容区域内边距
         */
        "bodyPadding"?: string;
        /**
          * 边框样式
          * @default 'solid'
         */
        "border": CardBorder;
        /**
          * 卡片标题
         */
        "cardTitle"?: string;
        /**
          * 是否可点击
          * @default false
         */
        "clickable": boolean;
        /**
          * 封面图片 URL
         */
        "cover"?: string;
        /**
          * 封面图片替代文本
         */
        "coverAlt"?: string;
        /**
          * 封面图片高度
          * @default '200px'
         */
        "coverHeight": string;
        /**
          * 自定义 CSS 类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 卡片描述
         */
        "description"?: string;
        /**
          * 是否显示底部分割线
          * @default false
         */
        "footerDivider": boolean;
        /**
          * 底部内边距
         */
        "footerPadding"?: string;
        /**
          * 是否显示头部分割线
          * @default true
         */
        "headerDivider": boolean;
        /**
          * 头部额外内容
         */
        "headerExtra"?: string;
        /**
          * 头部图标
         */
        "headerIcon"?: string;
        /**
          * 头部内边距
         */
        "headerPadding"?: string;
        /**
          * 是否可悬停
          * @default false
         */
        "hoverable": boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 阴影显示时机
          * @default 'always'
         */
        "shadow": CardShadow;
        /**
          * 卡片尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 卡片副标题
         */
        "subtitle"?: string;
    }
    /**
     * Form 表单组件
     * 用于收集、验证和提交用户输入数据的表单组件
     * @example ```tsx
     * <ld-form model={formData} rules={formRules}>
     *   <ld-form-item label="用户名" prop="username">
     *     <ld-input v-model={formData.username}></ld-input>
     *   </ld-form-item>
     * </ld-form>
     * ```
     */
    interface LdForm {
        /**
          * 清除验证状态
         */
        "clearValidate": (props?: string[]) => Promise<void>;
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 是否禁用整个表单
          * @default false
         */
        "disabled": boolean;
        /**
          * 获取字段值
         */
        "getFieldValue": (prop: string) => Promise<any>;
        /**
          * 获取表单数据
         */
        "getFormData": () => Promise<FormModel>;
        /**
          * 标签对齐方式
          * @default 'right'
         */
        "labelAlign": 'left' | 'right' | 'top';
        /**
          * 标签宽度
         */
        "labelWidth"?: string | number;
        /**
          * 表单布局方式
          * @default 'horizontal'
         */
        "layout": 'horizontal' | 'vertical' | 'inline';
        /**
          * 表单数据模型
          * @default {}
         */
        "model": FormModel;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * 注册表单项
         */
        "registerFormItem": (prop: string, item: FormItemInstance) => Promise<void>;
        /**
          * 重置表单
         */
        "resetForm": () => Promise<void>;
        /**
          * 表单验证规则
          * @default {}
         */
        "rules": FormRules;
        /**
          * 是否在验证失败时滚动到第一个错误字段
          * @default true
         */
        "scrollToError": boolean;
        /**
          * 设置字段值
         */
        "setFieldValue": (prop: string, value: any) => Promise<void>;
        /**
          * 设置表单数据
         */
        "setFormData": (data: FormModel) => Promise<void>;
        /**
          * 是否显示必填标记
          * @default true
         */
        "showRequiredMark": boolean;
        /**
          * 是否显示验证图标
          * @default true
         */
        "showValidateIcon": boolean;
        /**
          * 表单尺寸
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * 提交表单
         */
        "submitForm": () => Promise<void>;
        /**
          * 注销表单项
         */
        "unregisterFormItem": (prop: string) => Promise<void>;
        /**
          * 验证整个表单
         */
        "validate": () => Promise<FormValidateResult>;
        /**
          * 验证指定字段
         */
        "validateField": (prop: string) => Promise<FormFieldValidateResult>;
        /**
          * 验证触发方式
          * @default 'change'
         */
        "validateTrigger": 'change' | 'blur' | 'submit';
    }
    /**
     * FormItem 表单项组件
     * 表单中的单个字段容器，提供标签、验证状态显示等功能
     * @example ```tsx
     * <ld-form-item label="用户名" prop="username" required>
     *   <ld-input></ld-input>
     * </ld-form-item>
     * ```
     */
    interface LdFormItem {
        /**
          * 清除验证状态
         */
        "clearValidate": () => Promise<void>;
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 帮助文本
         */
        "help"?: string;
        /**
          * 字段标签
         */
        "label"?: string;
        /**
          * 标签对齐方式
         */
        "labelAlign"?: 'left' | 'right' | 'top';
        /**
          * 标签宽度
         */
        "labelWidth"?: string | number;
        /**
          * 字段属性名
         */
        "prop"?: string;
        /**
          * 是否必填
          * @default false
         */
        "required": boolean;
        /**
          * 验证规则
         */
        "rules"?: FormItemRule | FormItemRule[];
        /**
          * 设置验证状态
         */
        "setValidateStatus": (status: "validating" | "success" | "error", message?: string) => Promise<void>;
        /**
          * 是否显示验证图标
          * @default true
         */
        "showValidateIcon": boolean;
        /**
          * 验证字段
         */
        "validate": () => Promise<FormItemValidateResult>;
        /**
          * 验证消息
         */
        "validateMessage"?: string;
        /**
          * 验证状态
         */
        "validateStatus"?: 'validating' | 'success' | 'error';
    }
    interface LdInput {
        /**
          * 输入框后置标签
         */
        "addonAfter"?: string;
        /**
          * 输入框前置标签
         */
        "addonBefore"?: string;
        /**
          * 自动完成
         */
        "autocomplete"?: string;
        /**
          * 自动聚焦
          * @default false
         */
        "autofocus": boolean;
        /**
          * 是否自动调整高度
          * @default false
         */
        "autosize": boolean;
        /**
          * 是否允许清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 自定义 CSS 类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 默认值
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 错误消息
         */
        "errorMessage"?: string;
        /**
          * 帮助文本
         */
        "helpText"?: string;
        /**
          * 输入模式
         */
        "inputmode"?: 'text' | 'email' | 'tel' | 'url' | 'search' | 'none' | 'decimal' | 'numeric';
        /**
          * 最大值
         */
        "max"?: number | string;
        /**
          * 文本域最大行数
         */
        "maxRows"?: number;
        /**
          * 最大长度
         */
        "maxlength"?: number;
        /**
          * 最小值
         */
        "min"?: number | string;
        /**
          * 文本域最小行数
         */
        "minRows"?: number;
        /**
          * 最小长度
         */
        "minlength"?: number;
        /**
          * 表单控件名称
         */
        "name"?: string;
        /**
          * 占位符文本
         */
        "placeholder"?: string;
        /**
          * 前缀文本
         */
        "prefixContent"?: string;
        /**
          * 前缀图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * 是否必填
          * @default false
         */
        "required": boolean;
        /**
          * 是否可调整大小
          * @default true
         */
        "resize": boolean;
        /**
          * 文本域行数
          * @default 3
         */
        "rows": number;
        /**
          * 是否显示字符计数
          * @default false
         */
        "showCount": boolean;
        /**
          * 是否显示密码切换按钮
          * @default false
         */
        "showPassword": boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 拼写检查
          * @default true
         */
        "spellcheck": boolean;
        /**
          * 输入框状态
         */
        "status"?: Status;
        /**
          * 步长
         */
        "step"?: number | string;
        /**
          * 后缀文本
         */
        "suffix"?: string;
        /**
          * 后缀图标
         */
        "suffixIcon"?: string;
        /**
          * Tab 索引
         */
        "tabindex"?: number;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type": InputType;
        /**
          * 输入框值
         */
        "value"?: string;
        /**
          * 输入框变体
          * @default 'outlined'
         */
        "variant": InputVariant;
    }
    /**
     * Modal 模态框组件
     * 用于显示重要信息、确认操作或收集用户输入的浮层组件
     * @example ```tsx
     * <ld-modal visible={true} title="标题">
     *   <p>模态框内容</p>
     * </ld-modal>
     * ```
     */
    interface LdModal {
        /**
          * 动画名称
          * @default 'fade'
         */
        "animation": 'fade' | 'zoom' | 'slide-up' | 'slide-down';
        /**
          * 取消按钮文本
          * @default '取消'
         */
        "cancelText": string;
        /**
          * 是否居中显示
          * @default false
         */
        "centered": boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭模态框
         */
        "close": () => Promise<void>;
        /**
          * 确认按钮是否加载中
          * @default false
         */
        "confirmLoading": boolean;
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 是否显示底部操作区域
          * @default true
         */
        "footer": boolean;
        /**
          * 是否全屏显示
          * @default false
         */
        "fullscreen": boolean;
        /**
          * 模态框高度
         */
        "height"?: string | number;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable": boolean;
        /**
          * 是否支持键盘 ESC 关闭
          * @default true
         */
        "keyboard": boolean;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask": boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 确认按钮文本
          * @default '确定'
         */
        "okText": string;
        /**
          * 确认按钮类型
          * @default 'primary'
         */
        "okType": 'default' | 'primary' | 'dashed' | 'text' | 'link';
        /**
          * 打开模态框
         */
        "open": () => Promise<void>;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable": boolean;
        /**
          * 是否可见
          * @default false
         */
        "visible": boolean;
        /**
          * 模态框宽度
          * @default 520
         */
        "width": string | number;
        /**
          * z-index 层级
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Table 表格组件
     * 用于展示行列数据的表格组件，支持排序、筛选、分页等功能
     * @example ```tsx
     * <ld-table columns={columns} data={data}></ld-table>
     * ```
     */
    interface LdTable {
        /**
          * 是否显示边框
          * @default false
         */
        "bordered": boolean;
        /**
          * 清空选择
         */
        "clearSelection": () => Promise<void>;
        /**
          * 表格列配置
          * @default []
         */
        "columns": TableColumn[];
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 表格数据
          * @default []
         */
        "data": TableRow[];
        /**
          * 空数据提示
          * @default '暂无数据'
         */
        "emptyText": string;
        /**
          * 是否可筛选
          * @default false
         */
        "filterable": boolean;
        /**
          * 是否固定表头
          * @default false
         */
        "fixedHeader": boolean;
        /**
          * 获取选中的行
         */
        "getSelectedRows": () => Promise<TableRow[]>;
        /**
          * 表格高度（固定表头时使用）
         */
        "height"?: string | number;
        /**
          * 加载状态
          * @default false
         */
        "loading": boolean;
        /**
          * 是否显示分页
          * @default false
         */
        "pagination": boolean;
        /**
          * 分页配置
         */
        "paginationConfig"?: PaginationConfig;
        /**
          * 是否可调整列宽
          * @default false
         */
        "resizable": boolean;
        /**
          * 是否可选择行
          * @default false
         */
        "selectable": boolean;
        /**
          * 选择类型
          * @default 'checkbox'
         */
        "selectionType": 'checkbox' | 'radio';
        /**
          * 设置选中的行
         */
        "setSelectedRows": (keys: (string | number)[]) => Promise<void>;
        /**
          * 是否显示表头
          * @default true
         */
        "showHeader": boolean;
        /**
          * 表格尺寸
          * @default 'medium'
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * 是否可排序
          * @default false
         */
        "sortable": boolean;
        /**
          * 是否显示斑马纹
          * @default false
         */
        "striped": boolean;
    }
    /**
     * Tooltip 提示框组件
     * 简单的文字提示气泡框，在鼠标悬停时显示
     * @example ```tsx
     * <ld-tooltip content="这是一个提示">
     *   <button>悬停显示提示</button>
     * </ld-tooltip>
     * ```
     */
    interface LdTooltip {
        /**
          * 箭头是否指向目标元素中心
          * @default false
         */
        "arrowPointAtCenter": boolean;
        /**
          * 提示内容
         */
        "content"?: string;
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 隐藏提示框
         */
        "hide": () => Promise<void>;
        /**
          * 隐藏延迟（毫秒）
          * @default 100
         */
        "hideDelay": number;
        /**
          * 显示位置
          * @default 'top'
         */
        "placement": TooltipPlacement;
        /**
          * 显示提示框
         */
        "show": () => Promise<void>;
        /**
          * 显示延迟（毫秒）
          * @default 100
         */
        "showDelay": number;
        /**
          * 切换显示状态
         */
        "toggle": () => Promise<void>;
        /**
          * 触发方式
          * @default 'hover'
         */
        "trigger": 'hover' | 'click' | 'focus' | 'manual';
        /**
          * 更新位置
         */
        "updatePosition": () => Promise<void>;
        /**
          * 是否可见
          * @default false
         */
        "visible": boolean;
        /**
          * z-index 层级
          * @default 1060
         */
        "zIndex": number;
    }
}
export interface LdButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdButtonElement;
}
export interface LdCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdCardElement;
}
export interface LdFormCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdFormElement;
}
export interface LdFormItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdFormItemElement;
}
export interface LdInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdInputElement;
}
export interface LdModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdModalElement;
}
export interface LdTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdTableElement;
}
export interface LdTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdTooltipElement;
}
declare global {
    interface HTMLLdButtonElementEventMap {
        "ldClick": ButtonClickEventDetail;
        "ldFocus": ButtonFocusEventDetail;
        "ldBlur": ButtonFocusEventDetail;
        "ldMouseEnter": MouseEvent;
        "ldMouseLeave": MouseEvent;
    }
    interface HTMLLdButtonElement extends Components.LdButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdButtonElementEventMap>(type: K, listener: (this: HTMLLdButtonElement, ev: LdButtonCustomEvent<HTMLLdButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdButtonElementEventMap>(type: K, listener: (this: HTMLLdButtonElement, ev: LdButtonCustomEvent<HTMLLdButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdButtonElement: {
        prototype: HTMLLdButtonElement;
        new (): HTMLLdButtonElement;
    };
    interface HTMLLdCardElementEventMap {
        "ldClick": CardClickEventDetail;
        "ldMouseEnter": CardHoverEventDetail;
        "ldMouseLeave": CardHoverEventDetail;
        "ldHeaderClick": CardClickEventDetail;
        "ldCoverClick": CardClickEventDetail;
    }
    interface HTMLLdCardElement extends Components.LdCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdCardElementEventMap>(type: K, listener: (this: HTMLLdCardElement, ev: LdCardCustomEvent<HTMLLdCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdCardElementEventMap>(type: K, listener: (this: HTMLLdCardElement, ev: LdCardCustomEvent<HTMLLdCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdCardElement: {
        prototype: HTMLLdCardElement;
        new (): HTMLLdCardElement;
    };
    interface HTMLLdFormElementEventMap {
        "ldSubmit": FormSubmitEvent;
        "ldReset": FormResetEvent;
        "ldValidate": FormValidateEvent;
        "ldFieldChange": FormFieldChangeEvent;
    }
    /**
     * Form 表单组件
     * 用于收集、验证和提交用户输入数据的表单组件
     * @example ```tsx
     * <ld-form model={formData} rules={formRules}>
     *   <ld-form-item label="用户名" prop="username">
     *     <ld-input v-model={formData.username}></ld-input>
     *   </ld-form-item>
     * </ld-form>
     * ```
     */
    interface HTMLLdFormElement extends Components.LdForm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdFormElementEventMap>(type: K, listener: (this: HTMLLdFormElement, ev: LdFormCustomEvent<HTMLLdFormElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdFormElementEventMap>(type: K, listener: (this: HTMLLdFormElement, ev: LdFormCustomEvent<HTMLLdFormElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdFormElement: {
        prototype: HTMLLdFormElement;
        new (): HTMLLdFormElement;
    };
    interface HTMLLdFormItemElementEventMap {
        "ldValidateStatusChange": FormItemValidateEvent;
    }
    /**
     * FormItem 表单项组件
     * 表单中的单个字段容器，提供标签、验证状态显示等功能
     * @example ```tsx
     * <ld-form-item label="用户名" prop="username" required>
     *   <ld-input></ld-input>
     * </ld-form-item>
     * ```
     */
    interface HTMLLdFormItemElement extends Components.LdFormItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdFormItemElementEventMap>(type: K, listener: (this: HTMLLdFormItemElement, ev: LdFormItemCustomEvent<HTMLLdFormItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdFormItemElementEventMap>(type: K, listener: (this: HTMLLdFormItemElement, ev: LdFormItemCustomEvent<HTMLLdFormItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdFormItemElement: {
        prototype: HTMLLdFormItemElement;
        new (): HTMLLdFormItemElement;
    };
    interface HTMLLdInputElementEventMap {
        "ldInput": InputInputEventDetail;
        "ldChange": InputChangeEventDetail;
        "ldFocus": InputFocusEventDetail;
        "ldBlur": InputFocusEventDetail;
        "ldEnter": KeyboardEvent;
        "ldClear": InputClearEventDetail;
        "ldPasswordVisibilityToggle": boolean;
    }
    interface HTMLLdInputElement extends Components.LdInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdInputElementEventMap>(type: K, listener: (this: HTMLLdInputElement, ev: LdInputCustomEvent<HTMLLdInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdInputElementEventMap>(type: K, listener: (this: HTMLLdInputElement, ev: LdInputCustomEvent<HTMLLdInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdInputElement: {
        prototype: HTMLLdInputElement;
        new (): HTMLLdInputElement;
    };
    interface HTMLLdModalElementEventMap {
        "ldOpen": void;
        "ldClose": void;
        "ldOk": void;
        "ldCancel": void;
    }
    /**
     * Modal 模态框组件
     * 用于显示重要信息、确认操作或收集用户输入的浮层组件
     * @example ```tsx
     * <ld-modal visible={true} title="标题">
     *   <p>模态框内容</p>
     * </ld-modal>
     * ```
     */
    interface HTMLLdModalElement extends Components.LdModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdModalElementEventMap>(type: K, listener: (this: HTMLLdModalElement, ev: LdModalCustomEvent<HTMLLdModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdModalElementEventMap>(type: K, listener: (this: HTMLLdModalElement, ev: LdModalCustomEvent<HTMLLdModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdModalElement: {
        prototype: HTMLLdModalElement;
        new (): HTMLLdModalElement;
    };
    interface HTMLLdTableElementEventMap {
        "ldRowSelect": TableRowSelectEvent;
        "ldRowClick": TableRowClickEvent;
        "ldSort": TableSortEvent;
        "ldFilter": TableFilterEvent;
        "ldPageChange": TablePageChangeEvent;
    }
    /**
     * Table 表格组件
     * 用于展示行列数据的表格组件，支持排序、筛选、分页等功能
     * @example ```tsx
     * <ld-table columns={columns} data={data}></ld-table>
     * ```
     */
    interface HTMLLdTableElement extends Components.LdTable, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdTableElementEventMap>(type: K, listener: (this: HTMLLdTableElement, ev: LdTableCustomEvent<HTMLLdTableElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdTableElementEventMap>(type: K, listener: (this: HTMLLdTableElement, ev: LdTableCustomEvent<HTMLLdTableElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdTableElement: {
        prototype: HTMLLdTableElement;
        new (): HTMLLdTableElement;
    };
    interface HTMLLdTooltipElementEventMap {
        "ldShow": void;
        "ldHide": void;
    }
    /**
     * Tooltip 提示框组件
     * 简单的文字提示气泡框，在鼠标悬停时显示
     * @example ```tsx
     * <ld-tooltip content="这是一个提示">
     *   <button>悬停显示提示</button>
     * </ld-tooltip>
     * ```
     */
    interface HTMLLdTooltipElement extends Components.LdTooltip, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdTooltipElementEventMap>(type: K, listener: (this: HTMLLdTooltipElement, ev: LdTooltipCustomEvent<HTMLLdTooltipElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdTooltipElementEventMap>(type: K, listener: (this: HTMLLdTooltipElement, ev: LdTooltipCustomEvent<HTMLLdTooltipElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdTooltipElement: {
        prototype: HTMLLdTooltipElement;
        new (): HTMLLdTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "ld-button": HTMLLdButtonElement;
        "ld-card": HTMLLdCardElement;
        "ld-form": HTMLLdFormElement;
        "ld-form-item": HTMLLdFormItemElement;
        "ld-input": HTMLLdInputElement;
        "ld-modal": HTMLLdModalElement;
        "ld-table": HTMLLdTableElement;
        "ld-tooltip": HTMLLdTooltipElement;
    }
}
declare namespace LocalJSX {
    interface LdButton {
        /**
          * 自动聚焦
          * @default false
         */
        "autofocus"?: boolean;
        /**
          * 是否为块级按钮
          * @default false
         */
        "block"?: boolean;
        /**
          * 自定义 CSS 类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 是否为危险按钮
          * @default false
         */
        "danger"?: boolean;
        /**
          * 是否禁用按钮
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否为幽灵按钮
          * @default false
         */
        "ghost"?: boolean;
        /**
          * 按钮链接地址
         */
        "href"?: string;
        /**
          * HTML button 类型
          * @default 'button'
         */
        "htmlType"?: ButtonHtmlType;
        /**
          * 按钮图标（左侧）
         */
        "icon"?: string;
        /**
          * 按钮图标（右侧）
         */
        "iconRight"?: string;
        /**
          * 是否显示加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 自定义加载图标
         */
        "loadingIcon"?: string;
        /**
          * 失焦事件
         */
        "onLdBlur"?: (event: LdButtonCustomEvent<ButtonFocusEventDetail>) => void;
        /**
          * 点击事件
         */
        "onLdClick"?: (event: LdButtonCustomEvent<ButtonClickEventDetail>) => void;
        /**
          * 聚焦事件
         */
        "onLdFocus"?: (event: LdButtonCustomEvent<ButtonFocusEventDetail>) => void;
        /**
          * 鼠标进入事件
         */
        "onLdMouseEnter"?: (event: LdButtonCustomEvent<MouseEvent>) => void;
        /**
          * 鼠标离开事件
         */
        "onLdMouseLeave"?: (event: LdButtonCustomEvent<MouseEvent>) => void;
        /**
          * 按钮形状
          * @default 'default'
         */
        "shape"?: ButtonShape;
        /**
          * 按钮尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 按钮状态
         */
        "status"?: Status;
        /**
          * Tab 索引
         */
        "tabindex"?: number;
        /**
          * 链接打开方式
          * @default '_self'
         */
        "target"?: '_blank' | '_self' | '_parent' | '_top';
        /**
          * 按钮文本内容
         */
        "text"?: string;
        /**
          * 按钮类型
          * @default 'default'
         */
        "type"?: ButtonType;
    }
    interface LdCard {
        /**
          * 内容区域内边距
         */
        "bodyPadding"?: string;
        /**
          * 边框样式
          * @default 'solid'
         */
        "border"?: CardBorder;
        /**
          * 卡片标题
         */
        "cardTitle"?: string;
        /**
          * 是否可点击
          * @default false
         */
        "clickable"?: boolean;
        /**
          * 封面图片 URL
         */
        "cover"?: string;
        /**
          * 封面图片替代文本
         */
        "coverAlt"?: string;
        /**
          * 封面图片高度
          * @default '200px'
         */
        "coverHeight"?: string;
        /**
          * 自定义 CSS 类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 卡片描述
         */
        "description"?: string;
        /**
          * 是否显示底部分割线
          * @default false
         */
        "footerDivider"?: boolean;
        /**
          * 底部内边距
         */
        "footerPadding"?: string;
        /**
          * 是否显示头部分割线
          * @default true
         */
        "headerDivider"?: boolean;
        /**
          * 头部额外内容
         */
        "headerExtra"?: string;
        /**
          * 头部图标
         */
        "headerIcon"?: string;
        /**
          * 头部内边距
         */
        "headerPadding"?: string;
        /**
          * 是否可悬停
          * @default false
         */
        "hoverable"?: boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 点击事件
         */
        "onLdClick"?: (event: LdCardCustomEvent<CardClickEventDetail>) => void;
        /**
          * 封面点击事件
         */
        "onLdCoverClick"?: (event: LdCardCustomEvent<CardClickEventDetail>) => void;
        /**
          * 头部点击事件
         */
        "onLdHeaderClick"?: (event: LdCardCustomEvent<CardClickEventDetail>) => void;
        /**
          * 鼠标进入事件
         */
        "onLdMouseEnter"?: (event: LdCardCustomEvent<CardHoverEventDetail>) => void;
        /**
          * 鼠标离开事件
         */
        "onLdMouseLeave"?: (event: LdCardCustomEvent<CardHoverEventDetail>) => void;
        /**
          * 阴影显示时机
          * @default 'always'
         */
        "shadow"?: CardShadow;
        /**
          * 卡片尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 卡片副标题
         */
        "subtitle"?: string;
    }
    /**
     * Form 表单组件
     * 用于收集、验证和提交用户输入数据的表单组件
     * @example ```tsx
     * <ld-form model={formData} rules={formRules}>
     *   <ld-form-item label="用户名" prop="username">
     *     <ld-input v-model={formData.username}></ld-input>
     *   </ld-form-item>
     * </ld-form>
     * ```
     */
    interface LdForm {
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 是否禁用整个表单
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 标签对齐方式
          * @default 'right'
         */
        "labelAlign"?: 'left' | 'right' | 'top';
        /**
          * 标签宽度
         */
        "labelWidth"?: string | number;
        /**
          * 表单布局方式
          * @default 'horizontal'
         */
        "layout"?: 'horizontal' | 'vertical' | 'inline';
        /**
          * 表单数据模型
          * @default {}
         */
        "model"?: FormModel;
        /**
          * 字段值变化事件
         */
        "onLdFieldChange"?: (event: LdFormCustomEvent<FormFieldChangeEvent>) => void;
        /**
          * 表单重置事件
         */
        "onLdReset"?: (event: LdFormCustomEvent<FormResetEvent>) => void;
        /**
          * 表单提交事件
         */
        "onLdSubmit"?: (event: LdFormCustomEvent<FormSubmitEvent>) => void;
        /**
          * 表单验证事件
         */
        "onLdValidate"?: (event: LdFormCustomEvent<FormValidateEvent>) => void;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 表单验证规则
          * @default {}
         */
        "rules"?: FormRules;
        /**
          * 是否在验证失败时滚动到第一个错误字段
          * @default true
         */
        "scrollToError"?: boolean;
        /**
          * 是否显示必填标记
          * @default true
         */
        "showRequiredMark"?: boolean;
        /**
          * 是否显示验证图标
          * @default true
         */
        "showValidateIcon"?: boolean;
        /**
          * 表单尺寸
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * 验证触发方式
          * @default 'change'
         */
        "validateTrigger"?: 'change' | 'blur' | 'submit';
    }
    /**
     * FormItem 表单项组件
     * 表单中的单个字段容器，提供标签、验证状态显示等功能
     * @example ```tsx
     * <ld-form-item label="用户名" prop="username" required>
     *   <ld-input></ld-input>
     * </ld-form-item>
     * ```
     */
    interface LdFormItem {
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 帮助文本
         */
        "help"?: string;
        /**
          * 字段标签
         */
        "label"?: string;
        /**
          * 标签对齐方式
         */
        "labelAlign"?: 'left' | 'right' | 'top';
        /**
          * 标签宽度
         */
        "labelWidth"?: string | number;
        /**
          * 验证状态变化事件
         */
        "onLdValidateStatusChange"?: (event: LdFormItemCustomEvent<FormItemValidateEvent>) => void;
        /**
          * 字段属性名
         */
        "prop"?: string;
        /**
          * 是否必填
          * @default false
         */
        "required"?: boolean;
        /**
          * 验证规则
         */
        "rules"?: FormItemRule | FormItemRule[];
        /**
          * 是否显示验证图标
          * @default true
         */
        "showValidateIcon"?: boolean;
        /**
          * 验证消息
         */
        "validateMessage"?: string;
        /**
          * 验证状态
         */
        "validateStatus"?: 'validating' | 'success' | 'error';
    }
    interface LdInput {
        /**
          * 输入框后置标签
         */
        "addonAfter"?: string;
        /**
          * 输入框前置标签
         */
        "addonBefore"?: string;
        /**
          * 自动完成
         */
        "autocomplete"?: string;
        /**
          * 自动聚焦
          * @default false
         */
        "autofocus"?: boolean;
        /**
          * 是否自动调整高度
          * @default false
         */
        "autosize"?: boolean;
        /**
          * 是否允许清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 自定义 CSS 类名
         */
        "customClass"?: string;
        /**
          * 自定义内联样式
         */
        "customStyle"?: { [key: string]: string };
        /**
          * 默认值
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 错误消息
         */
        "errorMessage"?: string;
        /**
          * 帮助文本
         */
        "helpText"?: string;
        /**
          * 输入模式
         */
        "inputmode"?: 'text' | 'email' | 'tel' | 'url' | 'search' | 'none' | 'decimal' | 'numeric';
        /**
          * 最大值
         */
        "max"?: number | string;
        /**
          * 文本域最大行数
         */
        "maxRows"?: number;
        /**
          * 最大长度
         */
        "maxlength"?: number;
        /**
          * 最小值
         */
        "min"?: number | string;
        /**
          * 文本域最小行数
         */
        "minRows"?: number;
        /**
          * 最小长度
         */
        "minlength"?: number;
        /**
          * 表单控件名称
         */
        "name"?: string;
        /**
          * 失焦事件
         */
        "onLdBlur"?: (event: LdInputCustomEvent<InputFocusEventDetail>) => void;
        /**
          * 变化事件
         */
        "onLdChange"?: (event: LdInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * 清空事件
         */
        "onLdClear"?: (event: LdInputCustomEvent<InputClearEventDetail>) => void;
        /**
          * 回车事件
         */
        "onLdEnter"?: (event: LdInputCustomEvent<KeyboardEvent>) => void;
        /**
          * 聚焦事件
         */
        "onLdFocus"?: (event: LdInputCustomEvent<InputFocusEventDetail>) => void;
        /**
          * 输入事件
         */
        "onLdInput"?: (event: LdInputCustomEvent<InputInputEventDetail>) => void;
        /**
          * 密码可见性切换事件
         */
        "onLdPasswordVisibilityToggle"?: (event: LdInputCustomEvent<boolean>) => void;
        /**
          * 占位符文本
         */
        "placeholder"?: string;
        /**
          * 前缀文本
         */
        "prefixContent"?: string;
        /**
          * 前缀图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 是否必填
          * @default false
         */
        "required"?: boolean;
        /**
          * 是否可调整大小
          * @default true
         */
        "resize"?: boolean;
        /**
          * 文本域行数
          * @default 3
         */
        "rows"?: number;
        /**
          * 是否显示字符计数
          * @default false
         */
        "showCount"?: boolean;
        /**
          * 是否显示密码切换按钮
          * @default false
         */
        "showPassword"?: boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 拼写检查
          * @default true
         */
        "spellcheck"?: boolean;
        /**
          * 输入框状态
         */
        "status"?: Status;
        /**
          * 步长
         */
        "step"?: number | string;
        /**
          * 后缀文本
         */
        "suffix"?: string;
        /**
          * 后缀图标
         */
        "suffixIcon"?: string;
        /**
          * Tab 索引
         */
        "tabindex"?: number;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type"?: InputType;
        /**
          * 输入框值
         */
        "value"?: string;
        /**
          * 输入框变体
          * @default 'outlined'
         */
        "variant"?: InputVariant;
    }
    /**
     * Modal 模态框组件
     * 用于显示重要信息、确认操作或收集用户输入的浮层组件
     * @example ```tsx
     * <ld-modal visible={true} title="标题">
     *   <p>模态框内容</p>
     * </ld-modal>
     * ```
     */
    interface LdModal {
        /**
          * 动画名称
          * @default 'fade'
         */
        "animation"?: 'fade' | 'zoom' | 'slide-up' | 'slide-down';
        /**
          * 取消按钮文本
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * 是否居中显示
          * @default false
         */
        "centered"?: boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 确认按钮是否加载中
          * @default false
         */
        "confirmLoading"?: boolean;
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 是否显示底部操作区域
          * @default true
         */
        "footer"?: boolean;
        /**
          * 是否全屏显示
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * 模态框高度
         */
        "height"?: string | number;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable"?: boolean;
        /**
          * 是否支持键盘 ESC 关闭
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask"?: boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 确认按钮文本
          * @default '确定'
         */
        "okText"?: string;
        /**
          * 确认按钮类型
          * @default 'primary'
         */
        "okType"?: 'default' | 'primary' | 'dashed' | 'text' | 'link';
        /**
          * 取消事件
         */
        "onLdCancel"?: (event: LdModalCustomEvent<void>) => void;
        /**
          * 关闭事件
         */
        "onLdClose"?: (event: LdModalCustomEvent<void>) => void;
        /**
          * 确认事件
         */
        "onLdOk"?: (event: LdModalCustomEvent<void>) => void;
        /**
          * 打开事件
         */
        "onLdOpen"?: (event: LdModalCustomEvent<void>) => void;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable"?: boolean;
        /**
          * 是否可见
          * @default false
         */
        "visible"?: boolean;
        /**
          * 模态框宽度
          * @default 520
         */
        "width"?: string | number;
        /**
          * z-index 层级
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Table 表格组件
     * 用于展示行列数据的表格组件，支持排序、筛选、分页等功能
     * @example ```tsx
     * <ld-table columns={columns} data={data}></ld-table>
     * ```
     */
    interface LdTable {
        /**
          * 是否显示边框
          * @default false
         */
        "bordered"?: boolean;
        /**
          * 表格列配置
          * @default []
         */
        "columns"?: TableColumn[];
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 表格数据
          * @default []
         */
        "data"?: TableRow[];
        /**
          * 空数据提示
          * @default '暂无数据'
         */
        "emptyText"?: string;
        /**
          * 是否可筛选
          * @default false
         */
        "filterable"?: boolean;
        /**
          * 是否固定表头
          * @default false
         */
        "fixedHeader"?: boolean;
        /**
          * 表格高度（固定表头时使用）
         */
        "height"?: string | number;
        /**
          * 加载状态
          * @default false
         */
        "loading"?: boolean;
        /**
          * 筛选事件
         */
        "onLdFilter"?: (event: LdTableCustomEvent<TableFilterEvent>) => void;
        /**
          * 分页事件
         */
        "onLdPageChange"?: (event: LdTableCustomEvent<TablePageChangeEvent>) => void;
        /**
          * 行点击事件
         */
        "onLdRowClick"?: (event: LdTableCustomEvent<TableRowClickEvent>) => void;
        /**
          * 行选择事件
         */
        "onLdRowSelect"?: (event: LdTableCustomEvent<TableRowSelectEvent>) => void;
        /**
          * 排序事件
         */
        "onLdSort"?: (event: LdTableCustomEvent<TableSortEvent>) => void;
        /**
          * 是否显示分页
          * @default false
         */
        "pagination"?: boolean;
        /**
          * 分页配置
         */
        "paginationConfig"?: PaginationConfig;
        /**
          * 是否可调整列宽
          * @default false
         */
        "resizable"?: boolean;
        /**
          * 是否可选择行
          * @default false
         */
        "selectable"?: boolean;
        /**
          * 选择类型
          * @default 'checkbox'
         */
        "selectionType"?: 'checkbox' | 'radio';
        /**
          * 是否显示表头
          * @default true
         */
        "showHeader"?: boolean;
        /**
          * 表格尺寸
          * @default 'medium'
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * 是否可排序
          * @default false
         */
        "sortable"?: boolean;
        /**
          * 是否显示斑马纹
          * @default false
         */
        "striped"?: boolean;
    }
    /**
     * Tooltip 提示框组件
     * 简单的文字提示气泡框，在鼠标悬停时显示
     * @example ```tsx
     * <ld-tooltip content="这是一个提示">
     *   <button>悬停显示提示</button>
     * </ld-tooltip>
     * ```
     */
    interface LdTooltip {
        /**
          * 箭头是否指向目标元素中心
          * @default false
         */
        "arrowPointAtCenter"?: boolean;
        /**
          * 提示内容
         */
        "content"?: string;
        /**
          * 自定义样式类名
         */
        "customClass"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 隐藏延迟（毫秒）
          * @default 100
         */
        "hideDelay"?: number;
        /**
          * 隐藏事件
         */
        "onLdHide"?: (event: LdTooltipCustomEvent<void>) => void;
        /**
          * 显示事件
         */
        "onLdShow"?: (event: LdTooltipCustomEvent<void>) => void;
        /**
          * 显示位置
          * @default 'top'
         */
        "placement"?: TooltipPlacement;
        /**
          * 显示延迟（毫秒）
          * @default 100
         */
        "showDelay"?: number;
        /**
          * 触发方式
          * @default 'hover'
         */
        "trigger"?: 'hover' | 'click' | 'focus' | 'manual';
        /**
          * 是否可见
          * @default false
         */
        "visible"?: boolean;
        /**
          * z-index 层级
          * @default 1060
         */
        "zIndex"?: number;
    }
    interface IntrinsicElements {
        "ld-button": LdButton;
        "ld-card": LdCard;
        "ld-form": LdForm;
        "ld-form-item": LdFormItem;
        "ld-input": LdInput;
        "ld-modal": LdModal;
        "ld-table": LdTable;
        "ld-tooltip": LdTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ld-button": LocalJSX.LdButton & JSXBase.HTMLAttributes<HTMLLdButtonElement>;
            "ld-card": LocalJSX.LdCard & JSXBase.HTMLAttributes<HTMLLdCardElement>;
            /**
             * Form 表单组件
             * 用于收集、验证和提交用户输入数据的表单组件
             * @example ```tsx
             * <ld-form model={formData} rules={formRules}>
             *   <ld-form-item label="用户名" prop="username">
             *     <ld-input v-model={formData.username}></ld-input>
             *   </ld-form-item>
             * </ld-form>
             * ```
             */
            "ld-form": LocalJSX.LdForm & JSXBase.HTMLAttributes<HTMLLdFormElement>;
            /**
             * FormItem 表单项组件
             * 表单中的单个字段容器，提供标签、验证状态显示等功能
             * @example ```tsx
             * <ld-form-item label="用户名" prop="username" required>
             *   <ld-input></ld-input>
             * </ld-form-item>
             * ```
             */
            "ld-form-item": LocalJSX.LdFormItem & JSXBase.HTMLAttributes<HTMLLdFormItemElement>;
            "ld-input": LocalJSX.LdInput & JSXBase.HTMLAttributes<HTMLLdInputElement>;
            /**
             * Modal 模态框组件
             * 用于显示重要信息、确认操作或收集用户输入的浮层组件
             * @example ```tsx
             * <ld-modal visible={true} title="标题">
             *   <p>模态框内容</p>
             * </ld-modal>
             * ```
             */
            "ld-modal": LocalJSX.LdModal & JSXBase.HTMLAttributes<HTMLLdModalElement>;
            /**
             * Table 表格组件
             * 用于展示行列数据的表格组件，支持排序、筛选、分页等功能
             * @example ```tsx
             * <ld-table columns={columns} data={data}></ld-table>
             * ```
             */
            "ld-table": LocalJSX.LdTable & JSXBase.HTMLAttributes<HTMLLdTableElement>;
            /**
             * Tooltip 提示框组件
             * 简单的文字提示气泡框，在鼠标悬停时显示
             * @example ```tsx
             * <ld-tooltip content="这是一个提示">
             *   <button>悬停显示提示</button>
             * </ld-tooltip>
             * ```
             */
            "ld-tooltip": LocalJSX.LdTooltip & JSXBase.HTMLAttributes<HTMLLdTooltipElement>;
        }
    }
}
