import { series } from 'gulp';
import fs from 'fs-extra';
import path from 'path';
import { clearDir } from '../../../gulp/clean-dir';

// 简化的 Flutter 图标生成
const generateSimpleFlutterIcons = async () => {
  const svgDir = path.join(__dirname, '../../../svg');

  if (!fs.existsSync(svgDir)) {
    throw new Error('SVG directory not found');
  }

  const svgFiles = fs.readdirSync(svgDir).filter(file => file.endsWith('.svg'));
  const timestamp = new Date().toISOString();
  const version = require('../../../package.json').version;

  const dartHeader = [
    '// Generated automatically by LDesign Icons build system',
    `// Generation time: ${timestamp}`,
    `// Version: ${version}`,
    `// Total icons: ${svgFiles.length}`,
    '// ',
    '// DO NOT EDIT THIS FILE MANUALLY',
    '// This file is auto-generated from SVG sources',
    '',
    "import 'package:flutter/widgets.dart';",
    '',
    '/// LDesign Icons - A comprehensive icon library for Flutter',
    '/// ',
    `/// This class provides access to ${svgFiles.length} icons from the LDesign icon set.`,
    '/// All icons are vector-based and scalable.',
    '/// ',
    '/// Usage:',
    '/// ```dart',
    '/// Icon(LDesignIcons.add, size: 24.0)',
    '/// ```',
    'class LDesignIcons {',
    '  LDesignIcons._();',
    '',
    '  /// The font family name for LDesign Icons',
    "  static const String _fontFamily = 'LDesignIcons';",
    '  ',
    '  /// The font package name (null for local fonts)',
    '  static const String? _fontPackage = null;',
    ''
  ].join('\n');

  const iconConstants: string[] = [];
  const iconMappings: string[] = [];

  // 为每个 SVG 文件生成一个图标常量
  svgFiles.forEach((file, index) => {
    const iconName = path.basename(file, '.svg').replace(/-/g, '_');
    const originalName = path.basename(file, '.svg');
    const codepoint = `0x${(0xe000 + index).toString(16)}`;

    iconConstants.push(`  /// ${originalName} icon`);
    iconConstants.push(`  /// Generated from: ${file}`);
    iconConstants.push(`  static const IconData ${iconName} = IconData(${codepoint}, fontFamily: _fontFamily, fontPackage: _fontPackage);`);
    iconConstants.push('');

    const comma = index < svgFiles.length - 1 ? ',' : '';
    iconMappings.push(`    '${originalName}': ${iconName}${comma}`);
  });

  const dartFooter = [
    '  /// Map of all available icons',
    '  /// Key: icon name, Value: IconData',
    '  static const Map<String, IconData> all = {',
    ...iconMappings,
    '  };',
    '',
    '  /// Get icon by name',
    '  /// Returns null if icon not found',
    '  static IconData? getByName(String name) {',
    '    return all[name];',
    '  }',
    '',
    '  /// Get all icon names',
    '  static List<String> get allNames => all.keys.toList();',
    '',
    '  /// Total number of icons',
    `  static int get count => ${svgFiles.length};`,
    '}'
  ].join('\n');

  const fullDartCode = [dartHeader, ...iconConstants, dartFooter].join('\n');

  // 写入文件
  fs.ensureDirSync(path.join(__dirname, '../lib'));
  fs.writeFileSync(path.join(__dirname, '../lib/ldesign_icons.dart'), fullDartCode);

  console.log(`Generated Flutter icons with ${svgFiles.length} icons`);
};

// 生成 Flutter 包的 pubspec.yaml
const generatePubspec = () => {
  const pubspecLines = [
    'name: ldesign_icons_flutter',
    'description: LDesign Icons for Flutter - A comprehensive icon library',
    'version: 1.0.0',
    'homepage: https://github.com/ldesign/ldesign-icons',
    '',
    'environment:',
    '  sdk: ">=2.17.0 <4.0.0"',
    '  flutter: ">=3.0.0"',
    '',
    'dependencies:',
    '  flutter:',
    '    sdk: flutter',
    '',
    'dev_dependencies:',
    '  flutter_test:',
    '    sdk: flutter',
    '  flutter_lints: ^2.0.0',
    '',
    'flutter:',
    '  fonts:',
    '    - family: LDesignIcons',
    '      fonts:',
    '        - asset: fonts/ldesign-icons.ttf'
  ];

  fs.writeFileSync(path.join(__dirname, '../pubspec.yaml'), pubspecLines.join('\n'));
  console.log('Generated pubspec.yaml for Flutter package');
};

// 生成 README
const generateReadme = () => {
  const version = require('../../../package.json').version;
  const timestamp = new Date().toISOString();

  const readmeLines = [
    '# LDesign Icons Flutter',
    '',
    'A comprehensive Flutter package providing access to the LDesign icon library.',
    '',
    '## Installation',
    '',
    'Add this to your package\'s `pubspec.yaml` file:',
    '',
    '```yaml',
    'dependencies:',
    '  ldesign_icons_flutter: ^1.0.0',
    '```',
    '',
    '## Usage',
    '',
    '```dart',
    'import \'package:ldesign_icons_flutter/ldesign_icons.dart\';',
    '',
    '// Use in widgets',
    'Icon(LDesignIcons.add)',
    'Icon(LDesignIcons.user, size: 32.0, color: Colors.blue)',
    '',
    '// Get icon by name',
    'IconData? icon = LDesignIcons.getByName(\'add\');',
    '',
    '// Get all available icons',
    'List<String> allIcons = LDesignIcons.allNames;',
    '```',
    '',
    '## Features',
    '',
    `- ${version} icons available`,
    '- Vector-based, fully scalable',
    '- Consistent with LDesign design system',
    '- Type-safe icon access',
    '- Support for all Flutter platforms',
    '',
    '## Generated',
    '',
    'This package is automatically generated from SVG sources.',
    `Generation time: ${timestamp}`
  ];

  fs.writeFileSync(path.join(__dirname, '../README.md'), readmeLines.join('\n'));
};

export function flutterTask() {
  return series(
    clearDir(['packages/flutter/lib', 'packages/flutter/fonts', 'packages/flutter/output']),

    // 生成现代化的 Flutter 代码（不依赖 icon font）
    async (cb) => {
      try {
        await generateSimpleFlutterIcons();
        generatePubspec();
        generateReadme();
        cb();
      } catch (error) {
        console.error('Flutter generation failed:', error);
        cb(error);
      }
    }
  );
}

// 生成 README
const generateReadme = () => {
  const version = require('../../../package.json').version;
  const timestamp = new Date().toISOString();

  const readmeLines = [
    '# LDesign Icons Flutter',
    '',
    'A comprehensive Flutter package providing access to the LDesign icon library.',
    '',
    '## Installation',
    '',
    'Add this to your package\'s `pubspec.yaml` file:',
    '',
    '```yaml',
    'dependencies:',
    '  ldesign_icons_flutter: ^1.0.0',
    '```',
    '',
    '## Usage',
    '',
    '```dart',
    'import \'package:ldesign_icons_flutter/ldesign_icons.dart\';',
    '',
    '// Use in widgets',
    'Icon(LDesignIcons.add)',
    'Icon(LDesignIcons.user, size: 32.0, color: Colors.blue)',
    '',
    '// Get icon by name',
    'IconData? icon = LDesignIcons.getByName(\'add\');',
    '',
    '// Get all available icons',
    'List<String> allIcons = LDesignIcons.allNames;',
    '```',
    '',
    '## Features',
    '',
    `- ${version} icons available`,
    '- Vector-based, fully scalable',
    '- Consistent with LDesign design system',
    '- Type-safe icon access',
    '- Support for all Flutter platforms',
    '',
    '## Generated',
    '',
    'This package is automatically generated from SVG sources.',
    `Generation time: ${timestamp}`
  ];

  fs.writeFileSync(path.join(__dirname, '../README.md'), readmeLines.join('\n'));
};



// 简化的 Flutter 图标生成
const generateSimpleFlutterIcons = async () => {
  const svgDir = path.join(__dirname, '../../../svg');

  if (!fs.existsSync(svgDir)) {
    throw new Error('SVG directory not found');
  }

  const svgFiles = fs.readdirSync(svgDir).filter(file => file.endsWith('.svg'));
  const timestamp = new Date().toISOString();
  const version = require('../../../package.json').version;

  const dartHeader = [
    '// Generated automatically by LDesign Icons build system',
    `// Generation time: ${timestamp}`,
    `// Version: ${version}`,
    `// Total icons: ${svgFiles.length}`,
    '// ',
    '// DO NOT EDIT THIS FILE MANUALLY',
    '// This file is auto-generated from SVG sources',
    '',
    "import 'package:flutter/widgets.dart';",
    '',
    '/// LDesign Icons - A comprehensive icon library for Flutter',
    '/// ',
    `/// This class provides access to ${svgFiles.length} icons from the LDesign icon set.`,
    '/// All icons are vector-based and scalable.',
    '/// ',
    '/// Usage:',
    '/// ```dart',
    '/// Icon(LDesignIcons.add, size: 24.0)',
    '/// ```',
    'class LDesignIcons {',
    '  LDesignIcons._();',
    '',
    '  /// The font family name for LDesign Icons',
    "  static const String _fontFamily = 'LDesignIcons';",
    '  ',
    '  /// The font package name (null for local fonts)',
    '  static const String? _fontPackage = null;',
    ''
  ].join('\n');

  const iconConstants: string[] = [];
  const iconMappings: string[] = [];

  // 为每个 SVG 文件生成一个图标常量
  svgFiles.forEach((file, index) => {
    const iconName = path.basename(file, '.svg').replace(/-/g, '_');
    const originalName = path.basename(file, '.svg');
    const codepoint = `0x${(0xe000 + index).toString(16)}`;

    iconConstants.push(`  /// ${originalName} icon`);
    iconConstants.push(`  /// Generated from: ${file}`);
    iconConstants.push(`  static const IconData ${iconName} = IconData(${codepoint}, fontFamily: _fontFamily, fontPackage: _fontPackage);`);
    iconConstants.push('');

    const comma = index < svgFiles.length - 1 ? ',' : '';
    iconMappings.push(`    '${originalName}': ${iconName}${comma}`);
  });

  const dartFooter = [
    '  /// Map of all available icons',
    '  /// Key: icon name, Value: IconData',
    '  static const Map<String, IconData> all = {',
    ...iconMappings,
    '  };',
    '',
    '  /// Get icon by name',
    '  /// Returns null if icon not found',
    '  static IconData? getByName(String name) {',
    '    return all[name];',
    '  }',
    '',
    '  /// Get all icon names',
    '  static List<String> get allNames => all.keys.toList();',
    '',
    '  /// Total number of icons',
    `  static int get count => ${svgFiles.length};`,
    '}'
  ].join('\n');

  const fullDartCode = [dartHeader, ...iconConstants, dartFooter].join('\n');

  // 写入文件
  fs.ensureDirSync(path.join(__dirname, '../lib'));
  fs.writeFileSync(path.join(__dirname, '../lib/ldesign_icons.dart'), fullDartCode);

  console.log(`Generated Flutter icons with ${svgFiles.length} icons`);
};

export function flutterTask() {
  return series(
    clearDir(['packages/flutter/lib', 'packages/flutter/fonts', 'packages/flutter/output']),

    // 生成现代化的 Flutter 代码（不依赖 icon font）
    async (cb) => {
      try {
        await generateSimpleFlutterIcons();
        generatePubspec();
        generateReadme();
        cb();
      } catch (error) {
        console.error('Flutter generation failed:', error);
        cb(error);
      }
    }
  );
}
