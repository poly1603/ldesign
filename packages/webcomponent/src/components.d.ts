/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonColor, ButtonIconPosition, ButtonShape, ButtonType, NativeButtonType, Size, Theme } from "./types";
import { DrawerPlacement } from "./components/drawer/drawer";
import { DropdownItem, DropdownPlacement, DropdownTrigger } from "./components/dropdown/dropdown";
import { ImageViewerItem } from "./components/image-viewer/image-viewer";
import { MenuItem, SubmenuTrigger, VerticalExpand } from "./components/menu/menu";
import { MessageType } from "./components/message/message";
import { ModalAnimation, ModalSize, ModalVariant } from "./components/modal/modal";
import { NotificationPlacement, NotificationType } from "./components/notification/notification";
import { PopconfirmPlacement, PopconfirmTrigger } from "./components/popconfirm/popconfirm";
import { PopupPlacement, PopupTrigger } from "./components/popup/popup";
import { SelectOption, SelectPlacement, SelectTrigger } from "./components/select/select";
import { TabsPlacement, TabsType } from "./components/tabs/tabs";
import { TimeFormat, TimePickerPlacement, TimePickerPresets, TimePickerSize, TimePickerStatus, TimePickerTrigger } from "./components/time-picker/time-picker";
import { TimeFormat as TimeFormat1 } from "./components/time-picker-panel/time-picker-panel";
import { TimeFormat as TimeFormat2, TimePickerSize as TimePickerSize1, TimePickerStatus as TimePickerStatus1, TimeRange } from "./components/time-range-picker/time-range-picker";
import { Placement } from "@floating-ui/dom";
import { TooltipPlacement } from "./components/tooltip/tooltip";
import { TreeNode } from "./components/tree/tree";
export { ButtonColor, ButtonIconPosition, ButtonShape, ButtonType, NativeButtonType, Size, Theme } from "./types";
export { DrawerPlacement } from "./components/drawer/drawer";
export { DropdownItem, DropdownPlacement, DropdownTrigger } from "./components/dropdown/dropdown";
export { ImageViewerItem } from "./components/image-viewer/image-viewer";
export { MenuItem, SubmenuTrigger, VerticalExpand } from "./components/menu/menu";
export { MessageType } from "./components/message/message";
export { ModalAnimation, ModalSize, ModalVariant } from "./components/modal/modal";
export { NotificationPlacement, NotificationType } from "./components/notification/notification";
export { PopconfirmPlacement, PopconfirmTrigger } from "./components/popconfirm/popconfirm";
export { PopupPlacement, PopupTrigger } from "./components/popup/popup";
export { SelectOption, SelectPlacement, SelectTrigger } from "./components/select/select";
export { TabsPlacement, TabsType } from "./components/tabs/tabs";
export { TimeFormat, TimePickerPlacement, TimePickerPresets, TimePickerSize, TimePickerStatus, TimePickerTrigger } from "./components/time-picker/time-picker";
export { TimeFormat as TimeFormat1 } from "./components/time-picker-panel/time-picker-panel";
export { TimeFormat as TimeFormat2, TimePickerSize as TimePickerSize1, TimePickerStatus as TimePickerStatus1, TimeRange } from "./components/time-range-picker/time-range-picker";
export { Placement } from "@floating-ui/dom";
export { TooltipPlacement } from "./components/tooltip/tooltip";
export { TreeNode } from "./components/tree/tree";
export namespace Components {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface BaseComponent {
        /**
          * 组件类名
         */
        "class"?: string;
        /**
          * 组件ID
         */
        "componentId"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 主题
          * @default 'light'
         */
        "theme": Theme;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface LdesignAffix {
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 距离顶部的偏移量（触发吸顶的阈值）
          * @default 0
         */
        "offset": number;
        /**
          * 指定滚动容器（CSS 选择器）。默认为 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 是否在指定滚动容器内部吸附（使用 position: sticky 策略） 仅当设置了 target 且 target 不是 window 时生效
          * @default false
         */
        "withinTarget": boolean;
        /**
          * 自定义层级
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface LdesignBacktop {
        /**
          * 滚动动画速度（像素/秒）。值越大，速度越快。  最终动画时长 = 当前滚动距离 / speed  当 speed <= 0 时，将立即跳到顶部
          * @default 1200
         */
        "speed": number;
        /**
          * 指定滚动容器（CSS 选择器）。不传则使用 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 出现的滚动阈值（px）。当滚动距离超过该值时显示返回顶部按钮
          * @default 200
         */
        "visibilityHeight": number;
    }
    /**
     * Button 按钮组件
     * 用于触发操作或导航
     */
    interface LdesignButton {
        /**
          * 是否为块级按钮
          * @default false
         */
        "block": boolean;
        /**
          * 语义颜色（用于 outline/dashed/text/link/ghost）
          * @default 'primary'
         */
        "color": ButtonColor;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 幽灵按钮（一般用于深色背景）
          * @default false
         */
        "ghost": boolean;
        /**
          * 图标名称
         */
        "icon"?: string;
        /**
          * 图标位置：left | right
          * @default 'left'
         */
        "iconPosition": ButtonIconPosition;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 原生按钮类型：button | submit | reset
          * @default 'button'
         */
        "nativeType": NativeButtonType;
        /**
          * 按钮形状
          * @default 'rectangle'
         */
        "shape": ButtonShape;
        /**
          * 按钮尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 按钮类型
          * @default 'primary'
         */
        "type": ButtonType;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface LdesignCheckbox {
        /**
          * 是否显示边框（兼容旧 API）
          * @default false
         */
        "border": boolean;
        /**
          * 是否为按钮样式（兼容旧 API）
          * @default false
         */
        "button": boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 设置半选状态，只负责样式控制
          * @default false
         */
        "indeterminate": boolean;
        /**
          * 标签位置
          * @default 'right'
         */
        "labelPlacement": 'left' | 'right';
        /**
          * 原生表单 name，用于表单提交/分组
         */
        "name"?: string;
        /**
          * 形状
          * @default 'square'
         */
        "shape": 'square' | 'round';
        /**
          * 多选框的尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 外观主题颜色
          * @default 'brand'
         */
        "status": 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 选中状态的值
         */
        "value"?: string | number;
        /**
          * 外观变体
          * @default 'default'
         */
        "variant": 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface LdesignCheckboxGroup {
        /**
          * 组方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 统一标签位置（可被子项覆盖）
          * @default 'right'
         */
        "labelPlacement": 'left' | 'right';
        /**
          * 最大可选数量
         */
        "max"?: number;
        /**
          * 最小可选数量
         */
        "min"?: number;
        /**
          * 统一形状（可被子项覆盖）
          * @default 'square'
         */
        "shape": 'square' | 'round';
        /**
          * 复选框组尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 统一外观主题（可被子项覆盖）
          * @default 'brand'
         */
        "status": 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 绑定值
          * @default []
         */
        "value": Array<string | number>;
        /**
          * 统一变体（可被子项覆盖）
          * @default 'default'
         */
        "variant": 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * Collapse 折叠面板
     * - 支持受控/非受控、手风琴模式、动画、禁用
     */
    interface LdesignCollapse {
        /**
          * 手风琴模式：同层级仅允许展开一个
          * @default false
         */
        "accordion": boolean;
        /**
          * 边框样式
          * @default true
         */
        "bordered": boolean;
        /**
          * 默认展开的面板标识列表（非受控）
          * @default []
         */
        "defaultValue": string[];
        /**
          * 整体禁用（子面板不可交互）
          * @default false
         */
        "disabled": boolean;
        /**
          * 展开图标位置
          * @default 'left'
         */
        "expandIconPlacement": 'left' | 'right';
        /**
          * 幽灵（无背景，仅分隔线）
          * @default false
         */
        "ghost": boolean;
        /**
          * 展开的面板标识列表（受控）
         */
        "value"?: string[];
    }
    /**
     * CollapsePanel 折叠面板项
     */
    interface LdesignCollapsePanel {
        /**
          * 激活状态（由父级控制）
          * @default false
         */
        "active": boolean;
        /**
          * 收起后是否销毁内容（优先级高于 lazy）
          * @default false
         */
        "destroyOnClose": boolean;
        /**
          * 禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 展开图标名称（默认 chevron-right）
          * @default 'chevron-right'
         */
        "expandIcon": string;
        /**
          * 图标位置（由父级传入，也可单独覆盖）
          * @default 'left'
         */
        "expandIconPlacement": 'left' | 'right';
        /**
          * 右侧附加区（可用 slot="extra" 覆盖）
         */
        "extra"?: string;
        /**
          * 头部文本（可用 slot="header" 覆盖）
         */
        "header"?: string;
        /**
          * 首次激活才渲染内容（懒渲染）
          * @default false
         */
        "lazy": boolean;
        /**
          * 面板唯一标识（由父级匹配）
         */
        "name"?: string;
    }
    /**
     * ColorInput 颜色输入（内置 Popup + ColorPicker）
     * - 点击触发显示颜色选择面板
     * - 支持透明度/预设/最近使用
     */
    interface LdesignColorInput {
        /**
          * 是否可清空
          * @default true
         */
        "clearable": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 显示/输出格式
          * @default 'hex'
         */
        "format": 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect": boolean;
        /**
          * 输入占位符
          * @default ''
         */
        "placeholder": string;
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement": 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 预设颜色
          * @default []
         */
        "presets": string[];
        /**
          * 最近颜色最大条数
          * @default 12
         */
        "recentMax": number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha": boolean;
        /**
          * 是否显示最近使用
          * @default true
         */
        "showHistory": boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 当前颜色字符串（与 ColorPicker 格式一致）
          * @default '#1677ff'
         */
        "value": string;
    }
    /**
     * ColorPicker 颜色选择器
     * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
     * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
     */
    interface LdesignColorPicker {
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * 自定义按钮文案
          * @default '确定'
         */
        "confirmText": string;
        /**
          * 使用具名插槽自定义触发器（slot="trigger"）；为 true 时不渲染默认触发器
          * @default false
         */
        "customTrigger": boolean;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 'hex'
         */
        "format": 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：'linear' | 'radial' | 'both'（传递给面板）
          * @default 'both'
         */
        "gradientTypes": 'linear' | 'radial' | 'both';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect": boolean;
        /**
          * 面板模式：'solid' | 'gradient' | 'both'
          * @default 'both'
         */
        "modes": 'solid' | 'gradient' | 'both';
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement": 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 设置弹层宽度（数字或 CSS 长度），panel 将铺满此宽度
         */
        "popupWidth"?: number | string;
        /**
          * @default []
         */
        "presets": string[];
        /**
          * @default 12
         */
        "recentMax": number;
        /**
          * 是否显示“确定/取消”操作区（默认 false）
          * @default false
         */
        "showActions": boolean;
        /**
          * @default true
         */
        "showAlpha": boolean;
        /**
          * @default true
         */
        "showHistory": boolean;
        /**
          * @default true
         */
        "showPreset": boolean;
        /**
          * @default 'medium'
         */
        "size": Size;
        /**
          * 透传面板 UI 模式
          * @default 'pro'
         */
        "ui": 'simple' | 'pro';
        /**
          * @default '#1677ff'
         */
        "value": string;
    }
    /**
     * ColorPicker Panel 纯面板
     * - 不包含 Popup/触发器，仅渲染颜色选择面板
     * - 适合内嵌在任意容器，宽度默认铺满容器
     */
    interface LdesignColorPickerPanel {
        /**
          * 是否禁用（禁用交互）
          * @default false
         */
        "disabled": boolean;
        /**
          * 默认显示格式
          * @default 'hex'
         */
        "format": 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：线性/径向/两者（仅在 activeMode=gradient 时生效）
          * @default 'both'
         */
        "gradientTypes": 'linear' | 'radial' | 'both';
        /**
          * 渐变色标之间的最小间距（百分比，避免重叠），默认 2
          * @default 2
         */
        "minStopGap": number;
        /**
          * 面板模式：单色 | 渐变 | 两者
          * @default 'both'
         */
        "modes": 'solid' | 'gradient' | 'both';
        /**
          * 预设颜色
          * @default [     '#ff4d4f', '#ff7a45', '#ffa940', '#ffc53d', '#ffec3d', '#bae637', '#73d13d', '#36cfc9', '#40a9ff', '#597ef7', '#9254de', '#f759ab',     '#d4380d', '#d46b08', '#d48806', '#ad8b00', '#5b8c00', '#08979c', '#096dd9', '#1d39c4', '#531dab', '#c41d7f', '#8c8c8c', '#595959',   ]
         */
        "presets": string[];
        /**
          * 最近使用最多条数
          * @default 12
         */
        "recentMax": number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha": boolean;
        /**
          * 是否显示最近使用（无数据时自动隐藏）
          * @default true
         */
        "showHistory": boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset": boolean;
        /**
          * 尺寸（影响整体间距）
          * @default 'medium'
         */
        "size": Size;
        /**
          * UI 模式：simple 为精简界面，仅保留必要控件；pro 为完整界面
          * @default 'pro'
         */
        "ui": 'simple' | 'pro';
        /**
          * 当前颜色（默认 hex），支持 #RRGGBB/#RRGGBBAA、rgb/rgba、hsl/hsla、hsv
          * @default '#3498db'
         */
        "value": string;
    }
    /**
     * Drawer 抽屉组件
     * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
     */
    interface LdesignDrawer {
        /**
          * 是否显示右上角关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭（等价于 hide），同时触发 close 事件
         */
        "close": () => Promise<void>;
        /**
          * 是否允许按下 ESC 关闭
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * 标题文本（可通过 slot=header 自定义头部）
         */
        "drawerTitle"?: string;
        /**
          * 隐藏抽屉（带动画）
         */
        "hide": () => Promise<void>;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask": boolean;
        /**
          * 点击遮罩是否关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 抽屉出现的位置
          * @default 'right'
         */
        "placement": DrawerPlacement;
        /**
          * 显示抽屉
         */
        "show": (emit?: boolean) => Promise<void>;
        /**
          * 面板尺寸（left/right 为宽度，top/bottom 为高度）。可为数字（px）或任意 CSS 长度
          * @default 360
         */
        "size": number | string;
        /**
          * 是否显示抽屉
          * @default false
         */
        "visible": boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Dropdown 下拉菜单
     * 基于 <ldesign-popup> 实现
     */
    interface LdesignDropdown {
        /**
          * 浮层挂载位置：默认 body，避免在文档容器中被裁剪
          * @default 'body'
         */
        "appendTo": 'self' | 'body' | 'closest-popup';
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow": boolean;
        /**
          * 点击选项后是否自动关闭
          * @default true
         */
        "closeOnSelect": boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 菜单宽度是否跟随触发器宽度（默认否）
          * @default false
         */
        "fitTriggerWidth": boolean;
        /**
          * 下拉项列表（可传数组或 JSON 字符串）
          * @default []
         */
        "items": string | DropdownItem[];
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight": number;
        /**
          * 触发器文本（默认触发器显示的固定文案，不随选择变化）
          * @default '请选择'
         */
        "placeholder": string;
        /**
          * 出现位置（默认 bottom-start）
          * @default 'bottom-start'
         */
        "placement": DropdownPlacement;
        /**
          * 是否将选中项同步到默认触发器文本（默认不同步）
          * @default false
         */
        "reflectSelectionOnTrigger": boolean;
        /**
          * 是否在菜单项上展示选中样式（默认不展示）
          * @default false
         */
        "showSelected": boolean;
        /**
          * 子菜单的触发方式（hover/click），默认 hover
          * @default 'hover'
         */
        "submenuTrigger": 'hover' | 'click';
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（默认 click）
          * @default 'click'
         */
        "trigger": DropdownTrigger;
        /**
          * 选中值（受控）
         */
        "value"?: string;
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible": boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface LdesignIcon {
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 图标尺寸
          * @default 'medium'
         */
        "size": Size | number;
        /**
          * 是否旋转
          * @default false
         */
        "spin": boolean;
        /**
          * 描边宽度
          * @default 2
         */
        "strokeWidth": number;
    }
    /**
     * Image 图片组件
     * - 支持懒加载（IntersectionObserver + 原生 loading）
     * - 支持占位/骨架、错误占位、回退图
     * - 支持响应式图片（srcset/sizes）
     * - 支持 object-fit / object-position
     * - 支持预览（遮罩、缩放、拖拽）
     */
    interface LdesignImage {
        /**
          * 替代文本
         */
        "alt"?: string;
        /**
          * crossorigin
         */
        "crossorigin"?: 'anonymous' | 'use-credentials';
        /**
          * HTMLImageElement.decoding
          * @default 'auto'
         */
        "decoding": 'async' | 'sync' | 'auto';
        /**
          * 是否禁用（影响交互，如预览）
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否允许拖拽原图（仅影响 img 的原生 draggable 属性，预览层可拖拽不受此限制）
          * @default false
         */
        "draggable": boolean;
        /**
          * 失败时的回退图片 URL
         */
        "fallback"?: string;
        /**
          * object-fit
          * @default 'cover'
         */
        "fit": 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
        /**
          * GIF 默认静止，点击播放。建议同时提供 gifPreviewSrc（第一帧快照）与 ratio 避免CLS
          * @default false
         */
        "gifPlayOnClick": boolean;
        /**
          * GIF 静止时展示的静态预览图（例如第一帧 webp/jpg）
         */
        "gifPreviewSrc"?: string;
        /**
          * 高度（number 自动补 px，string 原样输出，如 '50%'、'200px'）
         */
        "height"?: number | string;
        /**
          * 提示文本（用于 img 的 title 属性，为避免与 HTMLElement.title 冲突，这里命名为 imgTitle）
         */
        "imgTitle"?: string;
        /**
          * IntersectionObserver rootMargin（预加载阈值）
          * @default '200px'
         */
        "intersectionRootMargin": string;
        /**
          * 是否懒加载（首屏建议关闭）
          * @default true
         */
        "lazy": boolean;
        /**
          * 自定义占位图 URL（优先级高于骨架）
         */
        "placeholder"?: string;
        /**
          * 占位背景颜色（无自定义占位图时显示）
          * @default '#f5f5f5'
         */
        "placeholderColor": string;
        /**
          * object-position
          * @default 'center center'
         */
        "position": string;
        /**
          * 点击开启预览
          * @default false
         */
        "preview": boolean;
        /**
          * 预览遮罩主题
          * @default 'dark'
         */
        "previewBackdrop": 'dark' | 'light';
        /**
          * 预览使用的高清图（不填则使用 src）
         */
        "previewSrc"?: string;
        /**
          * 圆角（number 自动补 px，string 原样输出）
         */
        "radius"?: number | string;
        /**
          * 期望的宽高比（用于在未设置高度、尚未加载时提供正确的占位比例，避免布局抖动） - 可传 16/9、4/3 等字符串，或数值（如 1.777） - 若不传，则在图片加载完成后自动以 naturalWidth/naturalHeight 填充比例
         */
        "ratio"?: string | number;
        /**
          * referrerPolicy
         */
        "referrerPolicy"?: string;
        /**
          * 形状：square（默认）| rounded | circle
          * @default 'square'
         */
        "shape": 'square' | 'rounded' | 'circle';
        /**
          * 是否展示错误占位层
          * @default true
         */
        "showError": boolean;
        /**
          * 是否展示加载中骨架（当无自定义占位图时）
          * @default true
         */
        "showLoading": boolean;
        /**
          * 响应式图片 sizes
         */
        "sizes"?: string;
        /**
          * 多源图片，支持 AVIF/WebP 等，JSON 字符串或对象数组：[{ type, srcset, media? }]
         */
        "sources"?: string | Array<{ type: string; srcset: string; media?: string }>;
        /**
          * 图片地址
         */
        "src": string;
        /**
          * 响应式图片 srcset
         */
        "srcset"?: string;
        /**
          * 宽度（number 自动补 px，string 原样输出，如 '50%'、'320px'）
         */
        "width"?: number | string;
        /**
          * 预览是否可缩放
          * @default true
         */
        "zoomable": boolean;
    }
    /**
     * ImageGroup 图集容器
     * - 使用 CSS Grid 布局
     * - 支持列数与间距
     * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
     */
    interface LdesignImageGroup {
        /**
          * 列数
          * @default 3
         */
        "columns": number;
        /**
          * 间距（px）
          * @default 8
         */
        "gap": number;
        /**
          * 统一子项形状（子项已设置 shape 时不覆盖）
         */
        "shape"?: 'square' | 'rounded' | 'circle';
    }
    /**
     * ImageViewer 图片预览器
     * - 支持多图预览、左右切换、循环
     * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
     * - 支持顶部缩略图快速切换
     * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
     */
    interface LdesignImageViewer {
        /**
          * 主题：暗色/亮色遮罩
          * @default 'dark'
         */
        "backdrop": 'dark' | 'light';
        /**
          * 图片列表（数组或 JSON 字符串）
         */
        "images": string | Array<ImageViewerItem | string>;
        /**
          * 是否启用键盘快捷键
          * @default true
         */
        "keyboard": boolean;
        /**
          * 是否循环播放
          * @default true
         */
        "loop": boolean;
        /**
          * 点击遮罩是否可关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * @default 4
         */
        "maxScale": number;
        /**
          * 最小/最大缩放
          * @default 0.25
         */
        "minScale": number;
        /**
          * 小窗拖拽方式：title 标题栏拖拽；anywhere 全面板可拖拽
          * @default 'title'
         */
        "panelDraggable": 'title' | 'anywhere';
        "panelHeight"?: number | string;
        /**
          * 小窗宽高（viewerMode=modal 时生效）
         */
        "panelWidth"?: number | string;
        /**
          * 是否显示标题与描述
          * @default true
         */
        "showCaption": boolean;
        /**
          * 是否展示顶部缩略图
          * @default true
         */
        "showThumbnails": boolean;
        /**
          * 初始索引
          * @default 0
         */
        "startIndex": number;
        /**
          * 过渡类型
          * @default 'fade-zoom'
         */
        "transition": 'fade' | 'fade-zoom';
        /**
          * 过渡时长（ms）
          * @default 240
         */
        "transitionDuration": number;
        /**
          * 过渡缓动函数
          * @default 'cubic-bezier(0.22, 0.61, 0.36, 1)'
         */
        "transitionEasing": string;
        /**
          * 查看窗口模式：overlay 全屏；modal 小窗
          * @default 'overlay'
         */
        "viewerMode": 'overlay' | 'modal' | 'embedded';
        /**
          * 小窗标题
         */
        "viewerTitle"?: string;
        /**
          * 是否显示
          * @default false
         */
        "visible": boolean;
        /**
          * 是否启用滚轮缩放
          * @default true
         */
        "wheelZoom": boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
        /**
          * 缩放步进
          * @default 0.1
         */
        "zoomStep": number;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface LdesignInput {
        /**
          * 输入限制，只允许输入指定字符
         */
        "allowInput"?: RegExp | ((value: string) => boolean);
        /**
          * 自适应内容高度（仅对 textarea 有效）
          * @default false
         */
        "autosize": boolean | { minRows?: number; maxRows?: number };
        /**
          * 是否可清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 是否受控组件
          * @default false
         */
        "controlled": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 最大输入长度
         */
        "maxlength"?: number;
        /**
          * 最小输入长度
         */
        "minlength"?: number;
        /**
          * 输入框占位文本
         */
        "placeholder"?: string;
        /**
          * 输入框头部图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * 输入框行数（仅对 textarea 有效）
          * @default 2
         */
        "rows": number;
        /**
          * 是否显示输入数量统计
          * @default false
         */
        "showCount": boolean;
        /**
          * 是否显示切换密码图标
          * @default false
         */
        "showPassword": boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 输入框的状态
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 输入框尾部图标
         */
        "suffixIcon"?: string;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type": 'text' | 'password' | 'textarea' | 'number' | 'email' | 'url' | 'tel';
        /**
          * 输入框的值
          * @default ''
         */
        "value": string;
    }
    /**
     * Loading 加载组件
     * 轻量的加载指示器，支持两种形态：spinner | dots
     */
    interface LdesignLoading {
        /**
          * 全屏模式（覆盖整个视口）
          * @default false
         */
        "fullscreen": boolean;
        /**
          * 全屏时是否锁定页面滚动
          * @default true
         */
        "lockScroll": boolean;
        /**
          * 全屏时是否显示遮罩背景
          * @default true
         */
        "mask": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 是否处于加载中
          * @default true
         */
        "spinning": boolean;
        /**
          * 说明文字
         */
        "tip"?: string;
        /**
          * 加载指示类型
          * @default 'spinner'
         */
        "type": 'spinner' | 'dots';
        /**
          * 垂直布局（图标在上、文字在下）
          * @default false
         */
        "vertical": boolean;
        /**
          * 全屏时的层级（可选）
         */
        "zIndex"?: number;
    }
    interface LdesignMenu {
        /**
          * 手风琴模式：同层级只允许展开一个
          * @default false
         */
        "accordion": boolean;
        /**
          * 折叠模式：仅显示一级图标，悬停右侧弹出；无子级时显示 tooltip（仅纵向）
          * @default false
         */
        "collapse": boolean;
        /**
          * 默认打开的子菜单 key 列表（非受控）
          * @default []
         */
        "defaultOpenKeys": string[];
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string;
        /**
          * 子级缩进（px）
          * @default 16
         */
        "indent": number;
        /**
          * 菜单数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items": string | MenuItem[];
        /**
          * 展示模式：vertical（纵向）| horizontal（横向）
          * @default 'vertical'
         */
        "mode": 'vertical' | 'horizontal';
        /**
          * 横向模式下 “更多” 文案
          * @default '更多'
         */
        "moreLabel": string;
        /**
          * 当前打开的子菜单 key 列表（受控）
         */
        "openKeys"?: string[];
        /**
          * 顶层（一级）是否强制显示图标占位（保证对齐）。若条目没有 icon，将渲染一个占位。
          * @default true
         */
        "requireTopIcon": boolean;
        /**
          * 弹出子菜单的触发方式（仅在 flyout/mixed 生效；横向模式同样适用）
          * @default 'hover'
         */
        "submenuTrigger": SubmenuTrigger;
        /**
          * 纵向模式：顶层互斥展开（无论 inline 或 flyout），默认开启
          * @default true
         */
        "topLevelExclusive": boolean;
        /**
          * 当前选中项（受控）
         */
        "value"?: string;
        /**
          * 垂直模式展开方式：inline（内嵌）、flyout（右侧弹出）、mixed（一级内嵌，其余弹出）
          * @default 'inline'
         */
        "verticalExpand": VerticalExpand;
    }
    /**
     * Message 全局提示
     * 轻量级的全局反馈，常用于操作后的轻量提示
     */
    interface LdesignMessage {
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画，带动后续消息平滑上移）
         */
        "close": () => Promise<void>;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 3000
         */
        "duration": number;
        /**
          * 简单文本内容（也可使用 slot 自定义内容）
         */
        "message"?: string;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover": boolean;
        /**
          * 出现位置（当前仅支持 top，预留 bottom 扩展）
          * @default 'top'
         */
        "placement": 'top' | 'bottom';
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 提示类型
          * @default 'info'
         */
        "type": MessageType;
    }
    /**
     * Modal 模态框组件
     */
    interface LdesignModal {
        "animEase"?: string;
        /**
          * 动画效果类型
          * @default 'zoom'
         */
        "animation": ModalAnimation;
        /**
          * 软键盘（移动端）避让
          * @default true
         */
        "avoidKeyboard": boolean;
        /**
          * 关闭/确认前拦截钩子（函数属性，需 JS 赋值）
         */
        "beforeClose"?: (reason: 'ok' | 'close' | 'mask' | 'esc' | 'api') => boolean | Promise<boolean>;
        /**
          * 向导步进前置钩子：返回 false 阻止切换
         */
        "beforeStepChange"?: (from: number, to: number) => boolean | Promise<boolean>;
        "breakpoints"?: { xs: number; sm: number; md: number; lg: number };
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * @default 'secondary'
         */
        "cancelType": ButtonType;
        /**
          * 是否居中显示
          * @default false
         */
        "centered": boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭模态框
         */
        "close": () => Promise<void>;
        /**
          * 图标可配置
          * @default 'x'
         */
        "closeIcon": string;
        /**
          * 当前步骤（0-based，可受控）
          * @default 0
         */
        "currentStep": number;
        /**
          * 是否销毁子元素
          * @default false
         */
        "destroyOnClose": boolean;
        /**
          * Drawer 滑动关闭阈值（距离）：默认 '30%'（以抽屉宽度为基准）
         */
        "drawerCloseThreshold"?: number | string;
        /**
          * Drawer 边缘滑动关闭
          * @default true
         */
        "drawerSwipeToClose": boolean;
        /**
          * 动画参数（也可通过 CSS 变量覆盖）：duration(ms)、ease、animEase
         */
        "duration"?: number;
        "ease"?: string;
        /**
          * 边缘感应宽度（px）
          * @default 24
         */
        "edgeSwipeWidth": number;
        /**
          * 容器（选择器或元素）：若提供，则在加载时把组件节点移动到该容器下
         */
        "getContainer"?: string | HTMLElement;
        /**
          * 自定义高度
         */
        "height"?: number | string;
        /**
          * 隐藏模态框
         */
        "hide": () => Promise<void>;
        "initialFocus"?: string;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable": boolean;
        /**
          * 按ESC键是否关闭
          * @default true
         */
        "keyboard": boolean;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask": boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable": boolean;
        "maxHeight"?: number;
        "maxWidth"?: number;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable": boolean;
        /**
          * 最大化模态框
         */
        "maximize": () => Promise<void>;
        /**
          * @default 'maximize-2'
         */
        "maximizeIcon": string;
        "minHeight"?: number;
        /**
          * 调整大小边界
         */
        "minWidth"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * @default false
         */
        "okDisabled": boolean;
        /**
          * OK 按钮状态
          * @default false
         */
        "okLoading": boolean;
        /**
          * 底部按钮文案和类型控制（仅在未自定义 footer 时生效）
          * @default '确定'
         */
        "okText": string;
        /**
          * @default 'primary'
         */
        "okType": ButtonType;
        /**
          * 屏幕边缘滑动打开抽屉（需 destroyOnClose=false 以便组件常驻）
          * @default false
         */
        "openOnEdgeSwipe": boolean;
        "preOk"?: () => boolean | Promise<boolean>;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable": boolean;
        /**
          * 恢复模态框
         */
        "restore": () => Promise<void>;
        /**
          * @default 'minimize-2'
         */
        "restoreIcon": string;
        /**
          * 关闭阈值：低于该高度则关闭，默认 '30%'
         */
        "sheetCloseThreshold"?: number | string;
        /**
          * Bottom Sheet 拖拽开关（仅在 variant='bottom-sheet' 时生效）
          * @default true
         */
        "sheetDraggable": boolean;
        /**
          * 初始高度：同上；若不传且有 snapPoints，则使用最大 snap 值（通常是 100%）
         */
        "sheetInitial"?: number | string;
        /**
          * Snap 点：数组，值支持像素（数字或'120px'），百分比（'50%'），或小数（0.5 表示 50%）
         */
        "sheetSnapPoints"?: (number | string)[];
        /**
          * 显示模态框
         */
        "show": () => Promise<void>;
        /**
          * 模态框尺寸
          * @default 'medium'
         */
        "size": ModalSize;
        /**
          * 步骤标题（JS 赋值）
         */
        "steps"?: string[];
        /**
          * 切换最大化状态
         */
        "toggleMaximize": () => Promise<void>;
        /**
          * 距离顶部的距离
         */
        "top"?: number | string;
        /**
          * 焦点与可访问性
          * @default true
         */
        "trapFocus": boolean;
        /**
          * 变体：抽屉/底部弹层等
          * @default 'modal'
         */
        "variant": ModalVariant;
        /**
          * 响应式变体：根据断点自动切换
         */
        "variantAt"?: Partial<Record<'xs'|'sm'|'md'|'lg', ModalVariant>>;
        /**
          * 是否显示模态框
          * @default false
         */
        "visible": boolean;
        /**
          * 自定义宽度
         */
        "width"?: number | string;
        /**
          * 向导模式
          * @default false
         */
        "wizard": boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface LdesignNotification {
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画，带动后续通知平滑归位）
         */
        "close": () => Promise<void>;
        /**
          * 描述文案（也可使用默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 4500
         */
        "duration": number;
        /**
          * 标题
         */
        "notificationTitle"?: string;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover": boolean;
        /**
          * 出现位置
          * @default 'top-right'
         */
        "placement": NotificationPlacement;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 通知类型
          * @default 'info'
         */
        "type": NotificationType;
    }
    /**
     * Pagination 分页组件
     * 用于数据分页，提供页码切换、页大小切换与快速跳转
     */
    interface LdesignPagination {
        /**
          * 页码省略边界数（两端保留）
          * @default 1
         */
        "boundaryCount": number;
        /**
          * 当前页（受控）
         */
        "current"?: number;
        /**
          * 默认当前页（非受控）
          * @default 1
         */
        "defaultCurrent": number;
        /**
          * 默认每页条数（非受控）
          * @default 10
         */
        "defaultPageSize": number;
        /**
          * 组件禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 仅一页时是否隐藏
          * @default false
         */
        "hideOnSinglePage": boolean;
        /**
          * 每页条数（受控）
         */
        "pageSize"?: number;
        /**
          * 页大小选项（可传数组或逗号分隔字符串）
          * @default [10, 20, 50, 100]
         */
        "pageSizeOptions": number[] | string;
        /**
          * 下拉展示文案模板，仅在 dropdown 模式下生效，支持 {size}
          * @default '{size} 条/页'
         */
        "pageSizeText": string;
        /**
          * 页信息文案模板，支持 {current}、{pageCount}
          * @default '{current}/{pageCount} 页'
         */
        "pageText": string;
        /**
          * 是否显示首页/末页
          * @default false
         */
        "showFirstLast": boolean;
        /**
          * 是否显示快速跳转输入框
          * @default false
         */
        "showQuickJumper": boolean;
        /**
          * 是否显示每页条数切换器
          * @default false
         */
        "showSizeChanger": boolean;
        /**
          * 是否显示总数文案
          * @default false
         */
        "showTotal": boolean;
        /**
          * 当前页两侧展示的邻接页数
          * @default 1
         */
        "siblingCount": number;
        /**
          * 简洁模式（仅上一页/下一页 + 页码输入）
          * @default false
         */
        "simple": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 切换器类型：native 原生下拉；dropdown 使用组件弹层
          * @default 'dropdown'
         */
        "sizeChangerType": 'native' | 'dropdown';
        /**
          * 总条目数
          * @default 0
         */
        "total": number;
        /**
          * 总数文案模板，支持 {total}、{rangeStart}、{rangeEnd}
          * @default '共 {total} 条'
         */
        "totalText": string;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于 Popup 进行封装，提供确认/取消操作
     */
    interface LdesignPopconfirm {
        /**
          * 箭头（默认显示），透传给 Popup
          * @default true
         */
        "arrow": boolean;
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * 取消按钮类型（默认使用次要/描边样式）
          * @default 'outline'
         */
        "cancelType": 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 点击外部是否关闭（仅点击触发较常用）
          * @default true
         */
        "closeOnOutside": boolean;
        /**
          * 辅助说明（可选，支持默认 slot 覆盖）
         */
        "description"?: string;
        /**
          * @default 0
         */
        "hideDelay": number;
        /**
          * 图标名称（可用 slot=icon 覆盖）
          * @default 'help-circle'
         */
        "icon": string;
        /**
          * 确认/取消按钮文本
          * @default '确定'
         */
        "okText": string;
        /**
          * 确认按钮类型（影响颜色）
          * @default 'primary'
         */
        "okType": 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 出现位置（透传给 Popup）
          * @default 'top'
         */
        "placement": PopconfirmPlacement;
        /**
          * 确认标题（支持 slot=title 覆盖）
          * @default '确定要执行该操作吗？'
         */
        "popconfirmTitle": string;
        /**
          * 延迟显示/隐藏（毫秒），透传给 Popup
          * @default 0
         */
        "showDelay": number;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（默认点击）
          * @default 'click'
         */
        "trigger": PopconfirmTrigger;
        /**
          * 外部受控可见性（仅在 trigger='manual' 时生效）
          * @default false
         */
        "visible": boolean;
    }
    /**
     * ldesign-popup（重写版）
     * 目标：
     * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
     * - 在所有方向上保持一致的 offset 语义：
     *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
     *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
     * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
     * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
     */
    interface LdesignPopup {
        /**
          * @default 'self'
         */
        "appendTo": 'self' | 'body' | 'closest-popup';
        /**
          * @default true
         */
        "arrow": boolean;
        /**
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * @default true
         */
        "closeOnOutside": boolean;
        "content"?: string;
        /**
          * @default false
         */
        "debug": boolean;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 0
         */
        "hideDelay": number;
        /**
          * @default true
         */
        "interactive": boolean;
        /**
          * @default false
         */
        "lockOnScroll": boolean;
        "maxWidth"?: number | string;
        /**
          * 动画位移距离（px），用于“朝触发器靠近”的起始位移
          * @default 10
         */
        "motionDistance": number;
        /**
          * 动画时长（ms）
          * @default 200
         */
        "motionDuration": number;
        /**
          * 是否开启动画（基于 data-placement 的定向靠近/离开）
          * @default true
         */
        "motionEnabled": boolean;
        /**
          * 与触发元素的距离：参见组件注释中的语义说明
          * @default 8
         */
        "offsetDistance": number | string;
        /**
          * @default 'bottom'
         */
        "placement": PopupPlacement;
        /**
          * @default 'dialog'
         */
        "popupRole": string;
        "popupTitle"?: string;
        /**
          * @default 0
         */
        "showDelay": number;
        /**
          * @default 'auto'
         */
        "strategy": 'auto' | 'fixed' | 'absolute';
        /**
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * @default 'hover'
         */
        "trigger": PopupTrigger;
        /**
          * @default false
         */
        "visible": boolean;
        "width"?: number | string;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface LdesignRadio {
        /**
          * 是否显示边框
          * @default false
         */
        "border": boolean;
        /**
          * 是否为按钮样式
          * @default false
         */
        "button": boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 单选框的名称，用于分组
         */
        "name"?: string;
        /**
          * 单选框的尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 选中状态的值
         */
        "value"?: string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface LdesignRadioGroup {
        /**
          * 排列方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 组名称，用于原生表单
         */
        "name"?: string;
        /**
          * 单选框组尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 绑定值
         */
        "value"?: string | number;
    }
    /**
     * Rate 评分组件
     * - 支持半星、清空、只读、禁用、键盘可访问
     * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
     */
    interface LdesignRate {
        /**
          * 再次点击清空（值相同则清零）
          * @default true
         */
        "allowClear": boolean;
        /**
          * 允许半星
          * @default false
         */
        "allowHalf": boolean;
        /**
          * 选中颜色（支持 CSS 变量覆盖）
         */
        "color"?: string;
        /**
          * 受控模式：为 true 时组件不主动修改 value，仅触发事件
          * @default false
         */
        "controlled": boolean;
        /**
          * 总星数
          * @default 5
         */
        "count": number;
        /**
          * 禁用交互
          * @default false
         */
        "disabled": boolean;
        /**
          * 图标名称（默认 star）
          * @default 'star'
         */
        "icon": string;
        /**
          * 只读（展示，不可交互）
          * @default false
         */
        "readonly": boolean;
        /**
          * 尺寸（影响图标大小与间距）
          * @default 'medium'
         */
        "size": Size;
        /**
          * 提示文案（数组），hover 时显示。可传属性为 JSON 字符串或以属性方式传递数组
         */
        "tooltips"?: string[] | string;
        /**
          * 当前分值（支持受控）
          * @default 0
         */
        "value": number;
        /**
          * 未选中颜色（支持 CSS 变量覆盖）
         */
        "voidColor"?: string;
    }
    /**
     * Select 选择器
     * 基于 <ldesign-popup> 实现，支持单选/多选。
     */
    interface LdesignSelect {
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow": boolean;
        /**
          * 可清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 选中项后是否自动关闭（默认：单选 true，多选 false）
         */
        "closeOnSelect"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight": number;
        /**
          * 多选时最多展示的标签数量，超过后折叠为 +N
         */
        "maxTagCount"?: number;
        /**
          * 是否多选
          * @default false
         */
        "multiple": boolean;
        /**
          * 选项列表（可传数组或 JSON 字符串）
          * @default []
         */
        "options": string | SelectOption[];
        /**
          * 占位文案（无选中项时）
          * @default '请选择'
         */
        "placeholder": string;
        /**
          * 出现位置（默认 bottom-start）
          * @default 'bottom-start'
         */
        "placement": SelectPlacement;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（Select 多数使用 click 或 manual）
          * @default 'click'
         */
        "trigger": SelectTrigger;
        /**
          * 值（受控）。单选时为 string，多选时为 string[]
         */
        "value"?: string | string[];
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible": boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * Slider 滑块组件
     * 通过拖动滑块在一定数值区间内进行选择
     */
    interface LdesignSlider {
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 最大值
          * @default 100
         */
        "max": number;
        /**
          * 最小值
          * @default 0
         */
        "min": number;
        /**
          * 是否显示当前值提示
          * @default false
         */
        "showTooltip": boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 步长（> 0）
          * @default 1
         */
        "step": number;
        /**
          * 当前值
          * @default 0
         */
        "value": number;
        /**
          * 是否垂直方向
          * @default false
         */
        "vertical": boolean;
    }
    /**
     * Space 间距组件
     * 用于在一组元素之间提供一致的间距与对齐控制
     */
    interface LdesignSpace {
        /**
          * 交叉轴对齐方式
          * @default 'center'
         */
        "align": 'start' | 'center' | 'end' | 'baseline';
        /**
          * 是否占满容器宽度
          * @default false
         */
        "block": boolean;
        /**
          * 是否自动换行（仅在横向时有效）
          * @default false
         */
        "breakLine": boolean;
        /**
          * 间距方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 间距尺寸。可选预设：small | medium | large；也可传数字，单位为 px
          * @default 'medium'
         */
        "size": Size | number | string;
        /**
          * 分隔符样式：none 不显示分隔符；line 使用 1px 分隔线
          * @default 'none'
         */
        "split": 'none' | 'line';
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface LdesignSwitch {
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 选中时的图标
         */
        "checkedIcon"?: string;
        /**
          * 选中时的文本
         */
        "checkedText"?: string;
        /**
          * 选中时的值
          * @default true
         */
        "checkedValue"?: string | number | boolean;
        /**
          * 颜色风格 可选：brand | success | warning | error | neutral
          * @default 'brand'
         */
        "color": 'brand' | 'success' | 'warning' | 'error' | 'neutral';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 形状 可选：pill（胶囊）| rounded（圆角）| square（直角）
          * @default 'pill'
         */
        "shape": 'pill' | 'rounded' | 'square';
        /**
          * 开关尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 未选中时的图标
         */
        "uncheckedIcon"?: string;
        /**
          * 未选中时的文本
         */
        "uncheckedText"?: string;
        /**
          * 未选中时的值
          * @default false
         */
        "uncheckedValue"?: string | number | boolean;
        /**
          * 外观样式 可选：solid | soft | outline | ghost
          * @default 'solid'
         */
        "variant": 'solid' | 'soft' | 'outline' | 'ghost';
    }
    /**
     * TabPanel 选项卡面板
     * - 由 <ldesign-tabs> 管理激活状态
     */
    interface LdesignTabPanel {
        /**
          * 由父组件控制的激活状态（反射到属性便于样式控制）
          * @default false
         */
        "active": boolean;
        /**
          * 是否可关闭（在标签上显示关闭按钮）
          * @default false
         */
        "closable": boolean;
        /**
          * 禁用状态（不可被激活）
          * @default false
         */
        "disabled": boolean;
        /**
          * 标签显示文本
         */
        "label": string;
        /**
          * 懒渲染：首次激活时才渲染插槽内容，之后保持渲染
          * @default false
         */
        "lazy": boolean;
        /**
          * 面板唯一标识（用于匹配激活项）
         */
        "name": string;
    }
    /**
     * Tabs 选项卡组件
     * - 通过水平或垂直的标签页切换展示内容
     */
    interface LdesignTabs {
        /**
          * 是否显示新增按钮
          * @default false
         */
        "addable": boolean;
        /**
          * 默认激活的标签（非受控）
         */
        "defaultValue"?: string;
        /**
          * 选项卡位置
          * @default 'top'
         */
        "placement": TabsPlacement;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 选项卡外观类型
          * @default 'line'
         */
        "type": TabsType;
        /**
          * 当前激活的标签（受控）
         */
        "value"?: string;
    }
    /**
     * TimePicker 时间选择器
     * - 使用 <ldesign-popup> 作为弹层
     * - 默认格式 HH:mm:ss，可通过 showSeconds 控制秒列
     */
    interface LdesignTimePicker {
        /**
          * 是否允许键盘输入
          * @default true
         */
        "allowInput": boolean;
        /**
          * 是否显示箭头（透传给 Popup）
          * @default false
         */
        "arrow": boolean;
        /**
          * 无边框模式
          * @default false
         */
        "borderless": boolean;
        /**
          * 是否可清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 是否需要点击“确定”确认（默认需要）。关闭后再触发 change
          * @default true
         */
        "confirm": boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 禁用小时集合（可传 JSON 字符串或数组），如 [0,1,2]
         */
        "disabledHours"?: string | number[];
        /**
          * 禁用分钟集合（同上）
         */
        "disabledMinutes"?: string | number[];
        /**
          * 禁用秒集合（同上）
         */
        "disabledSeconds"?: string | number[];
        /**
          * 时间格式
          * @default 'HH:mm:ss'
         */
        "format": TimeFormat;
        /**
          * 是否隐藏禁用的时间
          * @default true
         */
        "hideDisabledTime": boolean;
        /**
          * 步进
          * @default 1
         */
        "hourStep": number;
        /**
          * 最大时间（含），如 18:00 或 18:00:00
         */
        "maxTime"?: string;
        /**
          * 毫秒步进
          * @default 1
         */
        "millisecondStep": number;
        /**
          * 最小时间（含），如 08:30 或 08:30:00
         */
        "minTime"?: string;
        /**
          * @default 1
         */
        "minuteStep": number;
        /**
          * 输出格式：'24' -> 24 小时制；'12' -> 12 小时制（hh:mm[:ss] AM/PM）
          * @default '24'
         */
        "outputFormat": '24' | '12';
        /**
          * 列表最大高度
          * @default 180
         */
        "panelHeight": number;
        /**
          * 占位文案
          * @default '选择时间'
         */
        "placeholder": string;
        /**
          * 弹出层位置
          * @default 'bottom-start'
         */
        "placement": TimePickerPlacement;
        /**
          * 预设快捷选项（JSON字符串或对象）
         */
        "presets"?: string | TimePickerPresets;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * @default 1
         */
        "secondStep": number;
        /**
          * 是否在值为空时显示清除图标
          * @default false
         */
        "showClearIconOnEmpty": boolean;
        /**
          * 是否显示秒
          * @default true
         */
        "showSeconds": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": TimePickerSize;
        /**
          * 状态
          * @default 'default'
         */
        "status": TimePickerStatus;
        /**
          * 步进 [小时, 分钟, 秒]
          * @default [1, 1, 1]
         */
        "steps": number[];
        /**
          * 主题（透传给 Popup）
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 弹出层触发方式
          * @default 'click'
         */
        "trigger": TimePickerTrigger;
        /**
          * 是否显示 12 小时制 AM/PM 列（显示方式），内部仍以 24h 保存
          * @default false
         */
        "use12Hours": boolean;
        /**
          * 当前值（受控），格式如 23:59:59 或 23:59（当 showSeconds=false 时）
         */
        "value"?: string;
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible": boolean;
    }
    /**
     * ldesign-time-picker-panel
     * 仅渲染选择面板，不包含触发器/弹层
     */
    interface LdesignTimePickerPanel {
        /**
          * 默认值
         */
        "defaultValue"?: string;
        /**
          * 时间格式
          * @default 'HH:mm:ss'
         */
        "format": TimeFormat1;
        /**
          * 面板列最大高度
          * @default 180
         */
        "panelHeight": number;
        /**
          * 是否显示秒
          * @default true
         */
        "showSeconds": boolean;
        /**
          * 步进数组 [h, m, s, ms]
          * @default [1, 1, 1, 1]
         */
        "steps": number[];
        /**
          * 是否启用 12 小时制显示（输出仍用 format 决定）
          * @default false
         */
        "use12Hours": boolean;
        /**
          * 当前值（受控）
         */
        "value"?: string;
    }
    interface LdesignTimeRangePicker {
        /**
          * @default true
         */
        "allowInput": boolean;
        /**
          * @default false
         */
        "arrow": boolean;
        /**
          * @default false
         */
        "borderless": boolean;
        /**
          * @default true
         */
        "clearable": boolean;
        /**
          * @default true
         */
        "confirm": boolean;
        "defaultValue"?: TimeRange;
        /**
          * @default false
         */
        "disabled": boolean;
        /**
          * @default 'HH:mm:ss'
         */
        "format": TimeFormat2;
        /**
          * @default true
         */
        "hideDisabledTime": boolean;
        /**
          * @default 180
         */
        "panelHeight": number;
        /**
          * @default '结束时间'
         */
        "placeholderEnd": string;
        /**
          * @default '开始时间'
         */
        "placeholderStart": string;
        /**
          * @default 'bottom-start'
         */
        "placement": Placement;
        "presets"?: string | Record<string, TimeRange>;
        /**
          * @default false
         */
        "readonly": boolean;
        /**
          * @default false
         */
        "showClearIconOnEmpty": boolean;
        /**
          * @default 'medium'
         */
        "size": TimePickerSize1;
        /**
          * @default 'default'
         */
        "status": TimePickerStatus1;
        /**
          * @default [1, 1, 1, 1]
         */
        "steps": number[];
        /**
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * @default 'click'
         */
        "trigger": 'click' | 'focus' | 'manual';
        "value"?: TimeRange;
        /**
          * @default false
         */
        "visible": boolean;
    }
    /**
     * Tooltip 工具提示组件
     * 基于 Popup 的轻量封装
     */
    interface LdesignTooltip {
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow": boolean;
        /**
          * 提示内容
         */
        "content": string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 100
         */
        "hideDelay": number;
        /**
          * 最大宽度
          * @default 250
         */
        "maxWidth": number;
        /**
          * 与触发元素的间距（默认 tooltip 更大一些）
          * @default 16
         */
        "offsetDistance": number | string;
        /**
          * 提示位置
          * @default 'top'
         */
        "placement": TooltipPlacement;
        /**
          * 延迟显示时间（毫秒）
          * @default 100
         */
        "showDelay": number;
        /**
          * 主题：深色/浅色（默认深色）
          * @default 'dark'
         */
        "theme": 'dark' | 'light';
    }
    interface LdesignTree {
        /**
          * @default true
         */
        "allowAfter": boolean;
        /**
          * 全局允许放置位置
          * @default true
         */
        "allowBefore": boolean;
        /**
          * 自定义：是否允许拖拽该节点（JS 赋值）
         */
        "allowDrag"?: (node: TreeNode) => boolean;
        /**
          * 自定义：是否允许在目标位置放置（JS 赋值）
         */
        "allowDrop"?: (dragNode: TreeNode, dropNode: TreeNode, position: 'before' | 'after' | 'inside') => boolean;
        /**
          * @default true
         */
        "allowInside": boolean;
        /**
          * 是否显示复选框
          * @default false
         */
        "checkable": boolean;
        /**
          * 当前勾选项（受控）
         */
        "checkedKeys"?: string[] | string;
        "collapse": (key: string) => Promise<void>;
        "collapseAll": () => Promise<void>;
        /**
          * 远程数据 URL（根或子节点懒加载）
         */
        "dataUrl"?: string;
        /**
          * 默认勾选项（非受控）
          * @default []
         */
        "defaultCheckedKeys": string[] | string;
        /**
          * 默认展开项（非受控）
          * @default []
         */
        "defaultExpandedKeys": string[] | string;
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 拖拽悬停自动展开的延迟（毫秒）
          * @default 400
         */
        "dragExpandDelay": number;
        /**
          * 是否开启节点拖拽重排
          * @default false
         */
        "draggable": boolean;
        "expand": (key: string) => Promise<void>;
        "expandAll": () => Promise<void>;
        /**
          * 当前展开项（受控）
         */
        "expandedKeys"?: string[] | string;
        /**
          * 字段映射：当后端字段名非 key/label/children/isLeaf 等时可用；支持 JSON 字符串或对象（JS 赋值）
         */
        "fieldMap"?: string | { key: string; label: string; children?: string; isLeaf?: string; disabled?: string; icon?: string };
        "focusKey": (key: string) => Promise<void>;
        "getItems": () => Promise<TreeNode[]>;
        /**
          * 层级缩进（px）
          * @default 16
         */
        "indent": number;
        /**
          * 树数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items": string | TreeNode[];
        /**
          * 选择器：读取 <script type="application/json"> 的数据
         */
        "itemsSelector"?: string;
        /**
          * 启用懒加载：展开时若无 children 则触发加载
          * @default false
         */
        "lazy": boolean;
        /**
          * 可通过 JS 赋值：自定义加载函数
         */
        "loadData"?: (node?: TreeNode | undefined) => Promise<TreeNode[]>;
        /**
          * 限制最大层级深度（根为 depth=1）；未设置则不限制
         */
        "maxDepth"?: number;
        "move": (dragKey: string, dropKey: string, position: "before" | "after" | "inside") => Promise<boolean>;
        /**
          * 是否多选
          * @default false
         */
        "multiple": boolean;
        /**
          * 懒加载参数名（dataUrl 模式下）：父键参数
          * @default 'parent'
         */
        "parentParam": string;
        /**
          * 是否启用键盘重排（Alt+方向键）
          * @default true
         */
        "reorderable": boolean;
        /**
          * 是否可选择（高亮）
          * @default true
         */
        "selectable": boolean;
        "setItems": (items: string | TreeNode[]) => Promise<void>;
        /**
          * 是否显示连接线（简易）
          * @default false
         */
        "showLine": boolean;
        /**
          * 可通过 JS 赋值：转换函数，将接口原始数据转换为 TreeNode[]
         */
        "transform"?: (raw: any) => TreeNode[];
        /**
          * 当前选中项（受控，单选为 string，多选为 string[]）
         */
        "value"?: string | string[];
    }
}
export interface LdesignAffixCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignAffixElement;
}
export interface LdesignButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignButtonElement;
}
export interface LdesignCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCheckboxElement;
}
export interface LdesignCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCheckboxGroupElement;
}
export interface LdesignCollapseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCollapseElement;
}
export interface LdesignCollapsePanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCollapsePanelElement;
}
export interface LdesignColorInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignColorInputElement;
}
export interface LdesignColorPickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignColorPickerElement;
}
export interface LdesignColorPickerPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignColorPickerPanelElement;
}
export interface LdesignDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDrawerElement;
}
export interface LdesignDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDropdownElement;
}
export interface LdesignImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignImageElement;
}
export interface LdesignImageViewerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignImageViewerElement;
}
export interface LdesignInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignInputElement;
}
export interface LdesignMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMenuElement;
}
export interface LdesignMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMessageElement;
}
export interface LdesignModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignModalElement;
}
export interface LdesignNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignNotificationElement;
}
export interface LdesignPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPaginationElement;
}
export interface LdesignPopconfirmCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPopconfirmElement;
}
export interface LdesignPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPopupElement;
}
export interface LdesignRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRadioElement;
}
export interface LdesignRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRadioGroupElement;
}
export interface LdesignRateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRateElement;
}
export interface LdesignSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSelectElement;
}
export interface LdesignSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSliderElement;
}
export interface LdesignSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSwitchElement;
}
export interface LdesignTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTabsElement;
}
export interface LdesignTimePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTimePickerElement;
}
export interface LdesignTimePickerPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTimePickerPanelElement;
}
export interface LdesignTimeRangePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTimeRangePickerElement;
}
export interface LdesignTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignTreeElement;
}
declare global {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface HTMLBaseComponentElement extends Components.BaseComponent, HTMLStencilElement {
    }
    var HTMLBaseComponentElement: {
        prototype: HTMLBaseComponentElement;
        new (): HTMLBaseComponentElement;
    };
    interface HTMLLdesignAffixElementEventMap {
        "ldesignAffixChange": boolean;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface HTMLLdesignAffixElement extends Components.LdesignAffix, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignAffixElementEventMap>(type: K, listener: (this: HTMLLdesignAffixElement, ev: LdesignAffixCustomEvent<HTMLLdesignAffixElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignAffixElementEventMap>(type: K, listener: (this: HTMLLdesignAffixElement, ev: LdesignAffixCustomEvent<HTMLLdesignAffixElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignAffixElement: {
        prototype: HTMLLdesignAffixElement;
        new (): HTMLLdesignAffixElement;
    };
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface HTMLLdesignBacktopElement extends Components.LdesignBacktop, HTMLStencilElement {
    }
    var HTMLLdesignBacktopElement: {
        prototype: HTMLLdesignBacktopElement;
        new (): HTMLLdesignBacktopElement;
    };
    interface HTMLLdesignButtonElementEventMap {
        "ldesignClick": MouseEvent;
    }
    /**
     * Button 按钮组件
     * 用于触发操作或导航
     */
    interface HTMLLdesignButtonElement extends Components.LdesignButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignButtonElementEventMap>(type: K, listener: (this: HTMLLdesignButtonElement, ev: LdesignButtonCustomEvent<HTMLLdesignButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignButtonElementEventMap>(type: K, listener: (this: HTMLLdesignButtonElement, ev: LdesignButtonCustomEvent<HTMLLdesignButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignButtonElement: {
        prototype: HTMLLdesignButtonElement;
        new (): HTMLLdesignButtonElement;
    };
    interface HTMLLdesignCheckboxElementEventMap {
        "ldesignChange": boolean;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface HTMLLdesignCheckboxElement extends Components.LdesignCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCheckboxElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxElement, ev: LdesignCheckboxCustomEvent<HTMLLdesignCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCheckboxElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxElement, ev: LdesignCheckboxCustomEvent<HTMLLdesignCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCheckboxElement: {
        prototype: HTMLLdesignCheckboxElement;
        new (): HTMLLdesignCheckboxElement;
    };
    interface HTMLLdesignCheckboxGroupElementEventMap {
        "ldesignChange": Array<string | number>;
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface HTMLLdesignCheckboxGroupElement extends Components.LdesignCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxGroupElement, ev: LdesignCheckboxGroupCustomEvent<HTMLLdesignCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxGroupElement, ev: LdesignCheckboxGroupCustomEvent<HTMLLdesignCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCheckboxGroupElement: {
        prototype: HTMLLdesignCheckboxGroupElement;
        new (): HTMLLdesignCheckboxGroupElement;
    };
    interface HTMLLdesignCollapseElementEventMap {
        "ldesignChange": string[];
        "ldesignToggle": { name: string; open: boolean; openKeys: string[] };
    }
    /**
     * Collapse 折叠面板
     * - 支持受控/非受控、手风琴模式、动画、禁用
     */
    interface HTMLLdesignCollapseElement extends Components.LdesignCollapse, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCollapseElementEventMap>(type: K, listener: (this: HTMLLdesignCollapseElement, ev: LdesignCollapseCustomEvent<HTMLLdesignCollapseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCollapseElementEventMap>(type: K, listener: (this: HTMLLdesignCollapseElement, ev: LdesignCollapseCustomEvent<HTMLLdesignCollapseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCollapseElement: {
        prototype: HTMLLdesignCollapseElement;
        new (): HTMLLdesignCollapseElement;
    };
    interface HTMLLdesignCollapsePanelElementEventMap {
        "ldesignCollapseItemToggle": { name: string };
    }
    /**
     * CollapsePanel 折叠面板项
     */
    interface HTMLLdesignCollapsePanelElement extends Components.LdesignCollapsePanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCollapsePanelElementEventMap>(type: K, listener: (this: HTMLLdesignCollapsePanelElement, ev: LdesignCollapsePanelCustomEvent<HTMLLdesignCollapsePanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCollapsePanelElementEventMap>(type: K, listener: (this: HTMLLdesignCollapsePanelElement, ev: LdesignCollapsePanelCustomEvent<HTMLLdesignCollapsePanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCollapsePanelElement: {
        prototype: HTMLLdesignCollapsePanelElement;
        new (): HTMLLdesignCollapsePanelElement;
    };
    interface HTMLLdesignColorInputElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
    }
    /**
     * ColorInput 颜色输入（内置 Popup + ColorPicker）
     * - 点击触发显示颜色选择面板
     * - 支持透明度/预设/最近使用
     */
    interface HTMLLdesignColorInputElement extends Components.LdesignColorInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignColorInputElementEventMap>(type: K, listener: (this: HTMLLdesignColorInputElement, ev: LdesignColorInputCustomEvent<HTMLLdesignColorInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignColorInputElementEventMap>(type: K, listener: (this: HTMLLdesignColorInputElement, ev: LdesignColorInputCustomEvent<HTMLLdesignColorInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignColorInputElement: {
        prototype: HTMLLdesignColorInputElement;
        new (): HTMLLdesignColorInputElement;
    };
    interface HTMLLdesignColorPickerElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
    }
    /**
     * ColorPicker 颜色选择器
     * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
     * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
     */
    interface HTMLLdesignColorPickerElement extends Components.LdesignColorPicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignColorPickerElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerElement, ev: LdesignColorPickerCustomEvent<HTMLLdesignColorPickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignColorPickerElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerElement, ev: LdesignColorPickerCustomEvent<HTMLLdesignColorPickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignColorPickerElement: {
        prototype: HTMLLdesignColorPickerElement;
        new (): HTMLLdesignColorPickerElement;
    };
    interface HTMLLdesignColorPickerPanelElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
    }
    /**
     * ColorPicker Panel 纯面板
     * - 不包含 Popup/触发器，仅渲染颜色选择面板
     * - 适合内嵌在任意容器，宽度默认铺满容器
     */
    interface HTMLLdesignColorPickerPanelElement extends Components.LdesignColorPickerPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignColorPickerPanelElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerPanelElement, ev: LdesignColorPickerPanelCustomEvent<HTMLLdesignColorPickerPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignColorPickerPanelElementEventMap>(type: K, listener: (this: HTMLLdesignColorPickerPanelElement, ev: LdesignColorPickerPanelCustomEvent<HTMLLdesignColorPickerPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignColorPickerPanelElement: {
        prototype: HTMLLdesignColorPickerPanelElement;
        new (): HTMLLdesignColorPickerPanelElement;
    };
    interface HTMLLdesignDrawerElementEventMap {
        "ldesignVisibleChange": boolean;
        "ldesignClose": void;
    }
    /**
     * Drawer 抽屉组件
     * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
     */
    interface HTMLLdesignDrawerElement extends Components.LdesignDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDrawerElementEventMap>(type: K, listener: (this: HTMLLdesignDrawerElement, ev: LdesignDrawerCustomEvent<HTMLLdesignDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDrawerElementEventMap>(type: K, listener: (this: HTMLLdesignDrawerElement, ev: LdesignDrawerCustomEvent<HTMLLdesignDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDrawerElement: {
        prototype: HTMLLdesignDrawerElement;
        new (): HTMLLdesignDrawerElement;
    };
    interface HTMLLdesignDropdownElementEventMap {
        "ldesignChange": { key: string; item: DropdownItem };
        "ldesignVisibleChange": boolean;
    }
    /**
     * Dropdown 下拉菜单
     * 基于 <ldesign-popup> 实现
     */
    interface HTMLLdesignDropdownElement extends Components.LdesignDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDropdownElementEventMap>(type: K, listener: (this: HTMLLdesignDropdownElement, ev: LdesignDropdownCustomEvent<HTMLLdesignDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDropdownElementEventMap>(type: K, listener: (this: HTMLLdesignDropdownElement, ev: LdesignDropdownCustomEvent<HTMLLdesignDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDropdownElement: {
        prototype: HTMLLdesignDropdownElement;
        new (): HTMLLdesignDropdownElement;
    };
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface HTMLLdesignIconElement extends Components.LdesignIcon, HTMLStencilElement {
    }
    var HTMLLdesignIconElement: {
        prototype: HTMLLdesignIconElement;
        new (): HTMLLdesignIconElement;
    };
    interface HTMLLdesignImageElementEventMap {
        "ldesignLoad": { width: number; height: number; src: string };
        "ldesignError": { src: string; error: string };
        "ldesignPreviewOpen": void;
        "ldesignPreviewClose": void;
    }
    /**
     * Image 图片组件
     * - 支持懒加载（IntersectionObserver + 原生 loading）
     * - 支持占位/骨架、错误占位、回退图
     * - 支持响应式图片（srcset/sizes）
     * - 支持 object-fit / object-position
     * - 支持预览（遮罩、缩放、拖拽）
     */
    interface HTMLLdesignImageElement extends Components.LdesignImage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignImageElementEventMap>(type: K, listener: (this: HTMLLdesignImageElement, ev: LdesignImageCustomEvent<HTMLLdesignImageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignImageElementEventMap>(type: K, listener: (this: HTMLLdesignImageElement, ev: LdesignImageCustomEvent<HTMLLdesignImageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignImageElement: {
        prototype: HTMLLdesignImageElement;
        new (): HTMLLdesignImageElement;
    };
    /**
     * ImageGroup 图集容器
     * - 使用 CSS Grid 布局
     * - 支持列数与间距
     * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
     */
    interface HTMLLdesignImageGroupElement extends Components.LdesignImageGroup, HTMLStencilElement {
    }
    var HTMLLdesignImageGroupElement: {
        prototype: HTMLLdesignImageGroupElement;
        new (): HTMLLdesignImageGroupElement;
    };
    interface HTMLLdesignImageViewerElementEventMap {
        "ldesignVisibleChange": boolean;
        "ldesignOpen": void;
        "ldesignClose": void;
        "ldesignChange": { index: number };
    }
    /**
     * ImageViewer 图片预览器
     * - 支持多图预览、左右切换、循环
     * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
     * - 支持顶部缩略图快速切换
     * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
     */
    interface HTMLLdesignImageViewerElement extends Components.LdesignImageViewer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignImageViewerElementEventMap>(type: K, listener: (this: HTMLLdesignImageViewerElement, ev: LdesignImageViewerCustomEvent<HTMLLdesignImageViewerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignImageViewerElementEventMap>(type: K, listener: (this: HTMLLdesignImageViewerElement, ev: LdesignImageViewerCustomEvent<HTMLLdesignImageViewerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignImageViewerElement: {
        prototype: HTMLLdesignImageViewerElement;
        new (): HTMLLdesignImageViewerElement;
    };
    interface HTMLLdesignInputElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
        "ldesignClear": void;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface HTMLLdesignInputElement extends Components.LdesignInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignInputElementEventMap>(type: K, listener: (this: HTMLLdesignInputElement, ev: LdesignInputCustomEvent<HTMLLdesignInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignInputElementEventMap>(type: K, listener: (this: HTMLLdesignInputElement, ev: LdesignInputCustomEvent<HTMLLdesignInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignInputElement: {
        prototype: HTMLLdesignInputElement;
        new (): HTMLLdesignInputElement;
    };
    /**
     * Loading 加载组件
     * 轻量的加载指示器，支持两种形态：spinner | dots
     */
    interface HTMLLdesignLoadingElement extends Components.LdesignLoading, HTMLStencilElement {
    }
    var HTMLLdesignLoadingElement: {
        prototype: HTMLLdesignLoadingElement;
        new (): HTMLLdesignLoadingElement;
    };
    interface HTMLLdesignMenuElementEventMap {
        "ldesignSelect": { key: string; item: MenuItem; pathKeys: string[] };
        "ldesignOpenChange": { key: string; open: boolean; openKeys: string[] };
        "ldesignOverflowChange": { overflowCount: number };
    }
    interface HTMLLdesignMenuElement extends Components.LdesignMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMenuElementEventMap>(type: K, listener: (this: HTMLLdesignMenuElement, ev: LdesignMenuCustomEvent<HTMLLdesignMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMenuElementEventMap>(type: K, listener: (this: HTMLLdesignMenuElement, ev: LdesignMenuCustomEvent<HTMLLdesignMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMenuElement: {
        prototype: HTMLLdesignMenuElement;
        new (): HTMLLdesignMenuElement;
    };
    interface HTMLLdesignMessageElementEventMap {
        "ldesignClose": void;
    }
    /**
     * Message 全局提示
     * 轻量级的全局反馈，常用于操作后的轻量提示
     */
    interface HTMLLdesignMessageElement extends Components.LdesignMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMessageElementEventMap>(type: K, listener: (this: HTMLLdesignMessageElement, ev: LdesignMessageCustomEvent<HTMLLdesignMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMessageElementEventMap>(type: K, listener: (this: HTMLLdesignMessageElement, ev: LdesignMessageCustomEvent<HTMLLdesignMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMessageElement: {
        prototype: HTMLLdesignMessageElement;
        new (): HTMLLdesignMessageElement;
    };
    interface HTMLLdesignModalElementEventMap {
        "ldesignStepChange": number;
        "ldesignVisibleChange": boolean;
        "ldesignClose": void;
        "ldesignOk": void;
    }
    /**
     * Modal 模态框组件
     */
    interface HTMLLdesignModalElement extends Components.LdesignModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignModalElementEventMap>(type: K, listener: (this: HTMLLdesignModalElement, ev: LdesignModalCustomEvent<HTMLLdesignModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignModalElementEventMap>(type: K, listener: (this: HTMLLdesignModalElement, ev: LdesignModalCustomEvent<HTMLLdesignModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignModalElement: {
        prototype: HTMLLdesignModalElement;
        new (): HTMLLdesignModalElement;
    };
    interface HTMLLdesignNotificationElementEventMap {
        "ldesignClose": void;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface HTMLLdesignNotificationElement extends Components.LdesignNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignNotificationElementEventMap>(type: K, listener: (this: HTMLLdesignNotificationElement, ev: LdesignNotificationCustomEvent<HTMLLdesignNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignNotificationElementEventMap>(type: K, listener: (this: HTMLLdesignNotificationElement, ev: LdesignNotificationCustomEvent<HTMLLdesignNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignNotificationElement: {
        prototype: HTMLLdesignNotificationElement;
        new (): HTMLLdesignNotificationElement;
    };
    interface HTMLLdesignPaginationElementEventMap {
        "ldesignChange": { page: number; pageSize: number };
        "ldesignPageSizeChange": { pageSize: number; page: number };
    }
    /**
     * Pagination 分页组件
     * 用于数据分页，提供页码切换、页大小切换与快速跳转
     */
    interface HTMLLdesignPaginationElement extends Components.LdesignPagination, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPaginationElementEventMap>(type: K, listener: (this: HTMLLdesignPaginationElement, ev: LdesignPaginationCustomEvent<HTMLLdesignPaginationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPaginationElementEventMap>(type: K, listener: (this: HTMLLdesignPaginationElement, ev: LdesignPaginationCustomEvent<HTMLLdesignPaginationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPaginationElement: {
        prototype: HTMLLdesignPaginationElement;
        new (): HTMLLdesignPaginationElement;
    };
    interface HTMLLdesignPopconfirmElementEventMap {
        "ldesignConfirm": void;
        "ldesignCancel": void;
        "ldesignVisibleChange": boolean;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于 Popup 进行封装，提供确认/取消操作
     */
    interface HTMLLdesignPopconfirmElement extends Components.LdesignPopconfirm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPopconfirmElementEventMap>(type: K, listener: (this: HTMLLdesignPopconfirmElement, ev: LdesignPopconfirmCustomEvent<HTMLLdesignPopconfirmElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPopconfirmElementEventMap>(type: K, listener: (this: HTMLLdesignPopconfirmElement, ev: LdesignPopconfirmCustomEvent<HTMLLdesignPopconfirmElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPopconfirmElement: {
        prototype: HTMLLdesignPopconfirmElement;
        new (): HTMLLdesignPopconfirmElement;
    };
    interface HTMLLdesignPopupElementEventMap {
        "ldesignVisibleChange": boolean;
    }
    /**
     * ldesign-popup（重写版）
     * 目标：
     * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
     * - 在所有方向上保持一致的 offset 语义：
     *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
     *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
     * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
     * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
     */
    interface HTMLLdesignPopupElement extends Components.LdesignPopup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPopupElementEventMap>(type: K, listener: (this: HTMLLdesignPopupElement, ev: LdesignPopupCustomEvent<HTMLLdesignPopupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPopupElementEventMap>(type: K, listener: (this: HTMLLdesignPopupElement, ev: LdesignPopupCustomEvent<HTMLLdesignPopupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPopupElement: {
        prototype: HTMLLdesignPopupElement;
        new (): HTMLLdesignPopupElement;
    };
    interface HTMLLdesignRadioElementEventMap {
        "ldesignChange": string | number;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface HTMLLdesignRadioElement extends Components.LdesignRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRadioElementEventMap>(type: K, listener: (this: HTMLLdesignRadioElement, ev: LdesignRadioCustomEvent<HTMLLdesignRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRadioElementEventMap>(type: K, listener: (this: HTMLLdesignRadioElement, ev: LdesignRadioCustomEvent<HTMLLdesignRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRadioElement: {
        prototype: HTMLLdesignRadioElement;
        new (): HTMLLdesignRadioElement;
    };
    interface HTMLLdesignRadioGroupElementEventMap {
        "ldesignChange": string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface HTMLLdesignRadioGroupElement extends Components.LdesignRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRadioGroupElementEventMap>(type: K, listener: (this: HTMLLdesignRadioGroupElement, ev: LdesignRadioGroupCustomEvent<HTMLLdesignRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRadioGroupElementEventMap>(type: K, listener: (this: HTMLLdesignRadioGroupElement, ev: LdesignRadioGroupCustomEvent<HTMLLdesignRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRadioGroupElement: {
        prototype: HTMLLdesignRadioGroupElement;
        new (): HTMLLdesignRadioGroupElement;
    };
    interface HTMLLdesignRateElementEventMap {
        "ldesignHoverChange": number;
        "ldesignChange": number;
    }
    /**
     * Rate 评分组件
     * - 支持半星、清空、只读、禁用、键盘可访问
     * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
     */
    interface HTMLLdesignRateElement extends Components.LdesignRate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRateElementEventMap>(type: K, listener: (this: HTMLLdesignRateElement, ev: LdesignRateCustomEvent<HTMLLdesignRateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRateElementEventMap>(type: K, listener: (this: HTMLLdesignRateElement, ev: LdesignRateCustomEvent<HTMLLdesignRateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRateElement: {
        prototype: HTMLLdesignRateElement;
        new (): HTMLLdesignRateElement;
    };
    interface HTMLLdesignSelectElementEventMap {
        "ldesignChange": { value: string | string[] | undefined; options: SelectOption[] };
        "ldesignVisibleChange": boolean;
    }
    /**
     * Select 选择器
     * 基于 <ldesign-popup> 实现，支持单选/多选。
     */
    interface HTMLLdesignSelectElement extends Components.LdesignSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSelectElementEventMap>(type: K, listener: (this: HTMLLdesignSelectElement, ev: LdesignSelectCustomEvent<HTMLLdesignSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSelectElementEventMap>(type: K, listener: (this: HTMLLdesignSelectElement, ev: LdesignSelectCustomEvent<HTMLLdesignSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSelectElement: {
        prototype: HTMLLdesignSelectElement;
        new (): HTMLLdesignSelectElement;
    };
    interface HTMLLdesignSliderElementEventMap {
        "ldesignInput": number;
        "ldesignChange": number;
    }
    /**
     * Slider 滑块组件
     * 通过拖动滑块在一定数值区间内进行选择
     */
    interface HTMLLdesignSliderElement extends Components.LdesignSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSliderElementEventMap>(type: K, listener: (this: HTMLLdesignSliderElement, ev: LdesignSliderCustomEvent<HTMLLdesignSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSliderElementEventMap>(type: K, listener: (this: HTMLLdesignSliderElement, ev: LdesignSliderCustomEvent<HTMLLdesignSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSliderElement: {
        prototype: HTMLLdesignSliderElement;
        new (): HTMLLdesignSliderElement;
    };
    /**
     * Space 间距组件
     * 用于在一组元素之间提供一致的间距与对齐控制
     */
    interface HTMLLdesignSpaceElement extends Components.LdesignSpace, HTMLStencilElement {
    }
    var HTMLLdesignSpaceElement: {
        prototype: HTMLLdesignSpaceElement;
        new (): HTMLLdesignSpaceElement;
    };
    interface HTMLLdesignSwitchElementEventMap {
        "ldesignChange": string | number | boolean;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface HTMLLdesignSwitchElement extends Components.LdesignSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSwitchElementEventMap>(type: K, listener: (this: HTMLLdesignSwitchElement, ev: LdesignSwitchCustomEvent<HTMLLdesignSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSwitchElementEventMap>(type: K, listener: (this: HTMLLdesignSwitchElement, ev: LdesignSwitchCustomEvent<HTMLLdesignSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSwitchElement: {
        prototype: HTMLLdesignSwitchElement;
        new (): HTMLLdesignSwitchElement;
    };
    /**
     * TabPanel 选项卡面板
     * - 由 <ldesign-tabs> 管理激活状态
     */
    interface HTMLLdesignTabPanelElement extends Components.LdesignTabPanel, HTMLStencilElement {
    }
    var HTMLLdesignTabPanelElement: {
        prototype: HTMLLdesignTabPanelElement;
        new (): HTMLLdesignTabPanelElement;
    };
    interface HTMLLdesignTabsElementEventMap {
        "ldesignChange": string;
        "ldesignAdd": void;
        "ldesignRemove": { name: string };
    }
    /**
     * Tabs 选项卡组件
     * - 通过水平或垂直的标签页切换展示内容
     */
    interface HTMLLdesignTabsElement extends Components.LdesignTabs, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTabsElementEventMap>(type: K, listener: (this: HTMLLdesignTabsElement, ev: LdesignTabsCustomEvent<HTMLLdesignTabsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTabsElementEventMap>(type: K, listener: (this: HTMLLdesignTabsElement, ev: LdesignTabsCustomEvent<HTMLLdesignTabsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTabsElement: {
        prototype: HTMLLdesignTabsElement;
        new (): HTMLLdesignTabsElement;
    };
    interface HTMLLdesignTimePickerElementEventMap {
        "ldesignChange": string | undefined;
        "ldesignVisibleChange": boolean;
        "ldesignOpen": void;
        "ldesignClose": void;
        "ldesignPick": { value: string; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' } };
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
    }
    /**
     * TimePicker 时间选择器
     * - 使用 <ldesign-popup> 作为弹层
     * - 默认格式 HH:mm:ss，可通过 showSeconds 控制秒列
     */
    interface HTMLLdesignTimePickerElement extends Components.LdesignTimePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTimePickerElementEventMap>(type: K, listener: (this: HTMLLdesignTimePickerElement, ev: LdesignTimePickerCustomEvent<HTMLLdesignTimePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTimePickerElementEventMap>(type: K, listener: (this: HTMLLdesignTimePickerElement, ev: LdesignTimePickerCustomEvent<HTMLLdesignTimePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTimePickerElement: {
        prototype: HTMLLdesignTimePickerElement;
        new (): HTMLLdesignTimePickerElement;
    };
    interface HTMLLdesignTimePickerPanelElementEventMap {
        "ldesignChange": string;
        "ldesignPick": { value: string; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' } };
    }
    /**
     * ldesign-time-picker-panel
     * 仅渲染选择面板，不包含触发器/弹层
     */
    interface HTMLLdesignTimePickerPanelElement extends Components.LdesignTimePickerPanel, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTimePickerPanelElementEventMap>(type: K, listener: (this: HTMLLdesignTimePickerPanelElement, ev: LdesignTimePickerPanelCustomEvent<HTMLLdesignTimePickerPanelElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTimePickerPanelElementEventMap>(type: K, listener: (this: HTMLLdesignTimePickerPanelElement, ev: LdesignTimePickerPanelCustomEvent<HTMLLdesignTimePickerPanelElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTimePickerPanelElement: {
        prototype: HTMLLdesignTimePickerPanelElement;
        new (): HTMLLdesignTimePickerPanelElement;
    };
    interface HTMLLdesignTimeRangePickerElementEventMap {
        "ldesignChange": TimeRange | undefined;
        "ldesignVisibleChange": boolean;
        "ldesignOpen": void;
        "ldesignClose": void;
        "ldesignPick": { value: TimeRange; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' } };
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
    }
    interface HTMLLdesignTimeRangePickerElement extends Components.LdesignTimeRangePicker, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTimeRangePickerElementEventMap>(type: K, listener: (this: HTMLLdesignTimeRangePickerElement, ev: LdesignTimeRangePickerCustomEvent<HTMLLdesignTimeRangePickerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTimeRangePickerElementEventMap>(type: K, listener: (this: HTMLLdesignTimeRangePickerElement, ev: LdesignTimeRangePickerCustomEvent<HTMLLdesignTimeRangePickerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTimeRangePickerElement: {
        prototype: HTMLLdesignTimeRangePickerElement;
        new (): HTMLLdesignTimeRangePickerElement;
    };
    /**
     * Tooltip 工具提示组件
     * 基于 Popup 的轻量封装
     */
    interface HTMLLdesignTooltipElement extends Components.LdesignTooltip, HTMLStencilElement {
    }
    var HTMLLdesignTooltipElement: {
        prototype: HTMLLdesignTooltipElement;
        new (): HTMLLdesignTooltipElement;
    };
    interface HTMLLdesignTreeElementEventMap {
        "ldesignSelect": { key: string; keys: string[]; node?: TreeNode };
        "ldesignExpand": { key: string; expanded: boolean; expandedKeys: string[] };
        "ldesignCheck": { key: string; checked: boolean; checkedKeys: string[]; halfCheckedKeys: string[] };
        "ldesignDrop": { dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] };
        "ldesignMove": { dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] };
    }
    interface HTMLLdesignTreeElement extends Components.LdesignTree, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignTreeElementEventMap>(type: K, listener: (this: HTMLLdesignTreeElement, ev: LdesignTreeCustomEvent<HTMLLdesignTreeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignTreeElementEventMap>(type: K, listener: (this: HTMLLdesignTreeElement, ev: LdesignTreeCustomEvent<HTMLLdesignTreeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignTreeElement: {
        prototype: HTMLLdesignTreeElement;
        new (): HTMLLdesignTreeElement;
    };
    interface HTMLElementTagNameMap {
        "base-component": HTMLBaseComponentElement;
        "ldesign-affix": HTMLLdesignAffixElement;
        "ldesign-backtop": HTMLLdesignBacktopElement;
        "ldesign-button": HTMLLdesignButtonElement;
        "ldesign-checkbox": HTMLLdesignCheckboxElement;
        "ldesign-checkbox-group": HTMLLdesignCheckboxGroupElement;
        "ldesign-collapse": HTMLLdesignCollapseElement;
        "ldesign-collapse-panel": HTMLLdesignCollapsePanelElement;
        "ldesign-color-input": HTMLLdesignColorInputElement;
        "ldesign-color-picker": HTMLLdesignColorPickerElement;
        "ldesign-color-picker-panel": HTMLLdesignColorPickerPanelElement;
        "ldesign-drawer": HTMLLdesignDrawerElement;
        "ldesign-dropdown": HTMLLdesignDropdownElement;
        "ldesign-icon": HTMLLdesignIconElement;
        "ldesign-image": HTMLLdesignImageElement;
        "ldesign-image-group": HTMLLdesignImageGroupElement;
        "ldesign-image-viewer": HTMLLdesignImageViewerElement;
        "ldesign-input": HTMLLdesignInputElement;
        "ldesign-loading": HTMLLdesignLoadingElement;
        "ldesign-menu": HTMLLdesignMenuElement;
        "ldesign-message": HTMLLdesignMessageElement;
        "ldesign-modal": HTMLLdesignModalElement;
        "ldesign-notification": HTMLLdesignNotificationElement;
        "ldesign-pagination": HTMLLdesignPaginationElement;
        "ldesign-popconfirm": HTMLLdesignPopconfirmElement;
        "ldesign-popup": HTMLLdesignPopupElement;
        "ldesign-radio": HTMLLdesignRadioElement;
        "ldesign-radio-group": HTMLLdesignRadioGroupElement;
        "ldesign-rate": HTMLLdesignRateElement;
        "ldesign-select": HTMLLdesignSelectElement;
        "ldesign-slider": HTMLLdesignSliderElement;
        "ldesign-space": HTMLLdesignSpaceElement;
        "ldesign-switch": HTMLLdesignSwitchElement;
        "ldesign-tab-panel": HTMLLdesignTabPanelElement;
        "ldesign-tabs": HTMLLdesignTabsElement;
        "ldesign-time-picker": HTMLLdesignTimePickerElement;
        "ldesign-time-picker-panel": HTMLLdesignTimePickerPanelElement;
        "ldesign-time-range-picker": HTMLLdesignTimeRangePickerElement;
        "ldesign-tooltip": HTMLLdesignTooltipElement;
        "ldesign-tree": HTMLLdesignTreeElement;
    }
}
declare namespace LocalJSX {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface BaseComponent {
        /**
          * 组件类名
         */
        "class"?: string;
        /**
          * 组件ID
         */
        "componentId"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 主题
          * @default 'light'
         */
        "theme"?: Theme;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface LdesignAffix {
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 距离顶部的偏移量（触发吸顶的阈值）
          * @default 0
         */
        "offset"?: number;
        /**
          * 吸附状态变化事件
         */
        "onLdesignAffixChange"?: (event: LdesignAffixCustomEvent<boolean>) => void;
        /**
          * 指定滚动容器（CSS 选择器）。默认为 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 是否在指定滚动容器内部吸附（使用 position: sticky 策略） 仅当设置了 target 且 target 不是 window 时生效
          * @default false
         */
        "withinTarget"?: boolean;
        /**
          * 自定义层级
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface LdesignBacktop {
        /**
          * 滚动动画速度（像素/秒）。值越大，速度越快。  最终动画时长 = 当前滚动距离 / speed  当 speed <= 0 时，将立即跳到顶部
          * @default 1200
         */
        "speed"?: number;
        /**
          * 指定滚动容器（CSS 选择器）。不传则使用 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 出现的滚动阈值（px）。当滚动距离超过该值时显示返回顶部按钮
          * @default 200
         */
        "visibilityHeight"?: number;
    }
    /**
     * Button 按钮组件
     * 用于触发操作或导航
     */
    interface LdesignButton {
        /**
          * 是否为块级按钮
          * @default false
         */
        "block"?: boolean;
        /**
          * 语义颜色（用于 outline/dashed/text/link/ghost）
          * @default 'primary'
         */
        "color"?: ButtonColor;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 幽灵按钮（一般用于深色背景）
          * @default false
         */
        "ghost"?: boolean;
        /**
          * 图标名称
         */
        "icon"?: string;
        /**
          * 图标位置：left | right
          * @default 'left'
         */
        "iconPosition"?: ButtonIconPosition;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 原生按钮类型：button | submit | reset
          * @default 'button'
         */
        "nativeType"?: NativeButtonType;
        /**
          * 点击事件
         */
        "onLdesignClick"?: (event: LdesignButtonCustomEvent<MouseEvent>) => void;
        /**
          * 按钮形状
          * @default 'rectangle'
         */
        "shape"?: ButtonShape;
        /**
          * 按钮尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 按钮类型
          * @default 'primary'
         */
        "type"?: ButtonType;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface LdesignCheckbox {
        /**
          * 是否显示边框（兼容旧 API）
          * @default false
         */
        "border"?: boolean;
        /**
          * 是否为按钮样式（兼容旧 API）
          * @default false
         */
        "button"?: boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 设置半选状态，只负责样式控制
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * 标签位置
          * @default 'right'
         */
        "labelPlacement"?: 'left' | 'right';
        /**
          * 原生表单 name，用于表单提交/分组
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignCheckboxCustomEvent<boolean>) => void;
        /**
          * 形状
          * @default 'square'
         */
        "shape"?: 'square' | 'round';
        /**
          * 多选框的尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 外观主题颜色
          * @default 'brand'
         */
        "status"?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 选中状态的值
         */
        "value"?: string | number;
        /**
          * 外观变体
          * @default 'default'
         */
        "variant"?: 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface LdesignCheckboxGroup {
        /**
          * 组方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 统一标签位置（可被子项覆盖）
          * @default 'right'
         */
        "labelPlacement"?: 'left' | 'right';
        /**
          * 最大可选数量
         */
        "max"?: number;
        /**
          * 最小可选数量
         */
        "min"?: number;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignCheckboxGroupCustomEvent<Array<string | number>>) => void;
        /**
          * 统一形状（可被子项覆盖）
          * @default 'square'
         */
        "shape"?: 'square' | 'round';
        /**
          * 复选框组尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 统一外观主题（可被子项覆盖）
          * @default 'brand'
         */
        "status"?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 绑定值
          * @default []
         */
        "value"?: Array<string | number>;
        /**
          * 统一变体（可被子项覆盖）
          * @default 'default'
         */
        "variant"?: 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * Collapse 折叠面板
     * - 支持受控/非受控、手风琴模式、动画、禁用
     */
    interface LdesignCollapse {
        /**
          * 手风琴模式：同层级仅允许展开一个
          * @default false
         */
        "accordion"?: boolean;
        /**
          * 边框样式
          * @default true
         */
        "bordered"?: boolean;
        /**
          * 默认展开的面板标识列表（非受控）
          * @default []
         */
        "defaultValue"?: string[];
        /**
          * 整体禁用（子面板不可交互）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 展开图标位置
          * @default 'left'
         */
        "expandIconPlacement"?: 'left' | 'right';
        /**
          * 幽灵（无背景，仅分隔线）
          * @default false
         */
        "ghost"?: boolean;
        /**
          * 展开项变化
         */
        "onLdesignChange"?: (event: LdesignCollapseCustomEvent<string[]>) => void;
        /**
          * 单项切换事件
         */
        "onLdesignToggle"?: (event: LdesignCollapseCustomEvent<{ name: string; open: boolean; openKeys: string[] }>) => void;
        /**
          * 展开的面板标识列表（受控）
         */
        "value"?: string[];
    }
    /**
     * CollapsePanel 折叠面板项
     */
    interface LdesignCollapsePanel {
        /**
          * 激活状态（由父级控制）
          * @default false
         */
        "active"?: boolean;
        /**
          * 收起后是否销毁内容（优先级高于 lazy）
          * @default false
         */
        "destroyOnClose"?: boolean;
        /**
          * 禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 展开图标名称（默认 chevron-right）
          * @default 'chevron-right'
         */
        "expandIcon"?: string;
        /**
          * 图标位置（由父级传入，也可单独覆盖）
          * @default 'left'
         */
        "expandIconPlacement"?: 'left' | 'right';
        /**
          * 右侧附加区（可用 slot="extra" 覆盖）
         */
        "extra"?: string;
        /**
          * 头部文本（可用 slot="header" 覆盖）
         */
        "header"?: string;
        /**
          * 首次激活才渲染内容（懒渲染）
          * @default false
         */
        "lazy"?: boolean;
        /**
          * 面板唯一标识（由父级匹配）
         */
        "name"?: string;
        /**
          * 冒泡给父级，用于切换
         */
        "onLdesignCollapseItemToggle"?: (event: LdesignCollapsePanelCustomEvent<{ name: string }>) => void;
    }
    /**
     * ColorInput 颜色输入（内置 Popup + ColorPicker）
     * - 点击触发显示颜色选择面板
     * - 支持透明度/预设/最近使用
     */
    interface LdesignColorInput {
        /**
          * 是否可清空
          * @default true
         */
        "clearable"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 显示/输出格式
          * @default 'hex'
         */
        "format"?: 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect"?: boolean;
        /**
          * 确认变更
         */
        "onLdesignChange"?: (event: LdesignColorInputCustomEvent<string>) => void;
        /**
          * 实时更新
         */
        "onLdesignInput"?: (event: LdesignColorInputCustomEvent<string>) => void;
        /**
          * 输入占位符
          * @default ''
         */
        "placeholder"?: string;
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement"?: 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 预设颜色
          * @default []
         */
        "presets"?: string[];
        /**
          * 最近颜色最大条数
          * @default 12
         */
        "recentMax"?: number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha"?: boolean;
        /**
          * 是否显示最近使用
          * @default true
         */
        "showHistory"?: boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 当前颜色字符串（与 ColorPicker 格式一致）
          * @default '#1677ff'
         */
        "value"?: string;
    }
    /**
     * ColorPicker 颜色选择器
     * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
     * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
     */
    interface LdesignColorPicker {
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * 自定义按钮文案
          * @default '确定'
         */
        "confirmText"?: string;
        /**
          * 使用具名插槽自定义触发器（slot="trigger"）；为 true 时不渲染默认触发器
          * @default false
         */
        "customTrigger"?: boolean;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 'hex'
         */
        "format"?: 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：'linear' | 'radial' | 'both'（传递给面板）
          * @default 'both'
         */
        "gradientTypes"?: 'linear' | 'radial' | 'both';
        /**
          * 选择后是否自动关闭弹层
          * @default true
         */
        "hideOnSelect"?: boolean;
        /**
          * 面板模式：'solid' | 'gradient' | 'both'
          * @default 'both'
         */
        "modes"?: 'solid' | 'gradient' | 'both';
        "onLdesignChange"?: (event: LdesignColorPickerCustomEvent<string>) => void;
        "onLdesignInput"?: (event: LdesignColorPickerCustomEvent<string>) => void;
        /**
          * 弹出位置
          * @default 'bottom-start'
         */
        "placement"?: 'top'|'top-start'|'top-end'|'bottom'|'bottom-start'|'bottom-end'|'left'|'left-start'|'left-end'|'right'|'right-start'|'right-end';
        /**
          * 设置弹层宽度（数字或 CSS 长度），panel 将铺满此宽度
         */
        "popupWidth"?: number | string;
        /**
          * @default []
         */
        "presets"?: string[];
        /**
          * @default 12
         */
        "recentMax"?: number;
        /**
          * 是否显示“确定/取消”操作区（默认 false）
          * @default false
         */
        "showActions"?: boolean;
        /**
          * @default true
         */
        "showAlpha"?: boolean;
        /**
          * @default true
         */
        "showHistory"?: boolean;
        /**
          * @default true
         */
        "showPreset"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 透传面板 UI 模式
          * @default 'pro'
         */
        "ui"?: 'simple' | 'pro';
        /**
          * @default '#1677ff'
         */
        "value"?: string;
    }
    /**
     * ColorPicker Panel 纯面板
     * - 不包含 Popup/触发器，仅渲染颜色选择面板
     * - 适合内嵌在任意容器，宽度默认铺满容器
     */
    interface LdesignColorPickerPanel {
        /**
          * 是否禁用（禁用交互）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 默认显示格式
          * @default 'hex'
         */
        "format"?: 'hex' | 'rgb' | 'hsl' | 'hsv';
        /**
          * 渐变类型：线性/径向/两者（仅在 activeMode=gradient 时生效）
          * @default 'both'
         */
        "gradientTypes"?: 'linear' | 'radial' | 'both';
        /**
          * 渐变色标之间的最小间距（百分比，避免重叠），默认 2
          * @default 2
         */
        "minStopGap"?: number;
        /**
          * 面板模式：单色 | 渐变 | 两者
          * @default 'both'
         */
        "modes"?: 'solid' | 'gradient' | 'both';
        "onLdesignChange"?: (event: LdesignColorPickerPanelCustomEvent<string>) => void;
        "onLdesignInput"?: (event: LdesignColorPickerPanelCustomEvent<string>) => void;
        /**
          * 预设颜色
          * @default [     '#ff4d4f', '#ff7a45', '#ffa940', '#ffc53d', '#ffec3d', '#bae637', '#73d13d', '#36cfc9', '#40a9ff', '#597ef7', '#9254de', '#f759ab',     '#d4380d', '#d46b08', '#d48806', '#ad8b00', '#5b8c00', '#08979c', '#096dd9', '#1d39c4', '#531dab', '#c41d7f', '#8c8c8c', '#595959',   ]
         */
        "presets"?: string[];
        /**
          * 最近使用最多条数
          * @default 12
         */
        "recentMax"?: number;
        /**
          * 是否显示透明度
          * @default true
         */
        "showAlpha"?: boolean;
        /**
          * 是否显示最近使用（无数据时自动隐藏）
          * @default true
         */
        "showHistory"?: boolean;
        /**
          * 是否显示系统预设
          * @default true
         */
        "showPreset"?: boolean;
        /**
          * 尺寸（影响整体间距）
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * UI 模式：simple 为精简界面，仅保留必要控件；pro 为完整界面
          * @default 'pro'
         */
        "ui"?: 'simple' | 'pro';
        /**
          * 当前颜色（默认 hex），支持 #RRGGBB/#RRGGBBAA、rgb/rgba、hsl/hsla、hsv
          * @default '#3498db'
         */
        "value"?: string;
    }
    /**
     * Drawer 抽屉组件
     * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
     */
    interface LdesignDrawer {
        /**
          * 是否显示右上角关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 是否允许按下 ESC 关闭
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * 标题文本（可通过 slot=header 自定义头部）
         */
        "drawerTitle"?: string;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask"?: boolean;
        /**
          * 点击遮罩是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 事件：关闭
         */
        "onLdesignClose"?: (event: LdesignDrawerCustomEvent<void>) => void;
        /**
          * 事件：可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignDrawerCustomEvent<boolean>) => void;
        /**
          * 抽屉出现的位置
          * @default 'right'
         */
        "placement"?: DrawerPlacement;
        /**
          * 面板尺寸（left/right 为宽度，top/bottom 为高度）。可为数字（px）或任意 CSS 长度
          * @default 360
         */
        "size"?: number | string;
        /**
          * 是否显示抽屉
          * @default false
         */
        "visible"?: boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Dropdown 下拉菜单
     * 基于 <ldesign-popup> 实现
     */
    interface LdesignDropdown {
        /**
          * 浮层挂载位置：默认 body，避免在文档容器中被裁剪
          * @default 'body'
         */
        "appendTo"?: 'self' | 'body' | 'closest-popup';
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow"?: boolean;
        /**
          * 点击选项后是否自动关闭
          * @default true
         */
        "closeOnSelect"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 菜单宽度是否跟随触发器宽度（默认否）
          * @default false
         */
        "fitTriggerWidth"?: boolean;
        /**
          * 下拉项列表（可传数组或 JSON 字符串）
          * @default []
         */
        "items"?: string | DropdownItem[];
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight"?: number;
        /**
          * 选中变化事件
         */
        "onLdesignChange"?: (event: LdesignDropdownCustomEvent<{ key: string; item: DropdownItem }>) => void;
        /**
          * 对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignDropdownCustomEvent<boolean>) => void;
        /**
          * 触发器文本（默认触发器显示的固定文案，不随选择变化）
          * @default '请选择'
         */
        "placeholder"?: string;
        /**
          * 出现位置（默认 bottom-start）
          * @default 'bottom-start'
         */
        "placement"?: DropdownPlacement;
        /**
          * 是否将选中项同步到默认触发器文本（默认不同步）
          * @default false
         */
        "reflectSelectionOnTrigger"?: boolean;
        /**
          * 是否在菜单项上展示选中样式（默认不展示）
          * @default false
         */
        "showSelected"?: boolean;
        /**
          * 子菜单的触发方式（hover/click），默认 hover
          * @default 'hover'
         */
        "submenuTrigger"?: 'hover' | 'click';
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（默认 click）
          * @default 'click'
         */
        "trigger"?: DropdownTrigger;
        /**
          * 选中值（受控）
         */
        "value"?: string;
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible"?: boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface LdesignIcon {
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 图标尺寸
          * @default 'medium'
         */
        "size"?: Size | number;
        /**
          * 是否旋转
          * @default false
         */
        "spin"?: boolean;
        /**
          * 描边宽度
          * @default 2
         */
        "strokeWidth"?: number;
    }
    /**
     * Image 图片组件
     * - 支持懒加载（IntersectionObserver + 原生 loading）
     * - 支持占位/骨架、错误占位、回退图
     * - 支持响应式图片（srcset/sizes）
     * - 支持 object-fit / object-position
     * - 支持预览（遮罩、缩放、拖拽）
     */
    interface LdesignImage {
        /**
          * 替代文本
         */
        "alt"?: string;
        /**
          * crossorigin
         */
        "crossorigin"?: 'anonymous' | 'use-credentials';
        /**
          * HTMLImageElement.decoding
          * @default 'auto'
         */
        "decoding"?: 'async' | 'sync' | 'auto';
        /**
          * 是否禁用（影响交互，如预览）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否允许拖拽原图（仅影响 img 的原生 draggable 属性，预览层可拖拽不受此限制）
          * @default false
         */
        "draggable"?: boolean;
        /**
          * 失败时的回退图片 URL
         */
        "fallback"?: string;
        /**
          * object-fit
          * @default 'cover'
         */
        "fit"?: 'fill' | 'contain' | 'cover' | 'none' | 'scale-down';
        /**
          * GIF 默认静止，点击播放。建议同时提供 gifPreviewSrc（第一帧快照）与 ratio 避免CLS
          * @default false
         */
        "gifPlayOnClick"?: boolean;
        /**
          * GIF 静止时展示的静态预览图（例如第一帧 webp/jpg）
         */
        "gifPreviewSrc"?: string;
        /**
          * 高度（number 自动补 px，string 原样输出，如 '50%'、'200px'）
         */
        "height"?: number | string;
        /**
          * 提示文本（用于 img 的 title 属性，为避免与 HTMLElement.title 冲突，这里命名为 imgTitle）
         */
        "imgTitle"?: string;
        /**
          * IntersectionObserver rootMargin（预加载阈值）
          * @default '200px'
         */
        "intersectionRootMargin"?: string;
        /**
          * 是否懒加载（首屏建议关闭）
          * @default true
         */
        "lazy"?: boolean;
        /**
          * 加载失败
         */
        "onLdesignError"?: (event: LdesignImageCustomEvent<{ src: string; error: string }>) => void;
        /**
          * 加载成功
         */
        "onLdesignLoad"?: (event: LdesignImageCustomEvent<{ width: number; height: number; src: string }>) => void;
        /**
          * 预览关闭
         */
        "onLdesignPreviewClose"?: (event: LdesignImageCustomEvent<void>) => void;
        /**
          * 预览打开
         */
        "onLdesignPreviewOpen"?: (event: LdesignImageCustomEvent<void>) => void;
        /**
          * 自定义占位图 URL（优先级高于骨架）
         */
        "placeholder"?: string;
        /**
          * 占位背景颜色（无自定义占位图时显示）
          * @default '#f5f5f5'
         */
        "placeholderColor"?: string;
        /**
          * object-position
          * @default 'center center'
         */
        "position"?: string;
        /**
          * 点击开启预览
          * @default false
         */
        "preview"?: boolean;
        /**
          * 预览遮罩主题
          * @default 'dark'
         */
        "previewBackdrop"?: 'dark' | 'light';
        /**
          * 预览使用的高清图（不填则使用 src）
         */
        "previewSrc"?: string;
        /**
          * 圆角（number 自动补 px，string 原样输出）
         */
        "radius"?: number | string;
        /**
          * 期望的宽高比（用于在未设置高度、尚未加载时提供正确的占位比例，避免布局抖动） - 可传 16/9、4/3 等字符串，或数值（如 1.777） - 若不传，则在图片加载完成后自动以 naturalWidth/naturalHeight 填充比例
         */
        "ratio"?: string | number;
        /**
          * referrerPolicy
         */
        "referrerPolicy"?: string;
        /**
          * 形状：square（默认）| rounded | circle
          * @default 'square'
         */
        "shape"?: 'square' | 'rounded' | 'circle';
        /**
          * 是否展示错误占位层
          * @default true
         */
        "showError"?: boolean;
        /**
          * 是否展示加载中骨架（当无自定义占位图时）
          * @default true
         */
        "showLoading"?: boolean;
        /**
          * 响应式图片 sizes
         */
        "sizes"?: string;
        /**
          * 多源图片，支持 AVIF/WebP 等，JSON 字符串或对象数组：[{ type, srcset, media? }]
         */
        "sources"?: string | Array<{ type: string; srcset: string; media?: string }>;
        /**
          * 图片地址
         */
        "src": string;
        /**
          * 响应式图片 srcset
         */
        "srcset"?: string;
        /**
          * 宽度（number 自动补 px，string 原样输出，如 '50%'、'320px'）
         */
        "width"?: number | string;
        /**
          * 预览是否可缩放
          * @default true
         */
        "zoomable"?: boolean;
    }
    /**
     * ImageGroup 图集容器
     * - 使用 CSS Grid 布局
     * - 支持列数与间距
     * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
     */
    interface LdesignImageGroup {
        /**
          * 列数
          * @default 3
         */
        "columns"?: number;
        /**
          * 间距（px）
          * @default 8
         */
        "gap"?: number;
        /**
          * 统一子项形状（子项已设置 shape 时不覆盖）
         */
        "shape"?: 'square' | 'rounded' | 'circle';
    }
    /**
     * ImageViewer 图片预览器
     * - 支持多图预览、左右切换、循环
     * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
     * - 支持顶部缩略图快速切换
     * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
     */
    interface LdesignImageViewer {
        /**
          * 主题：暗色/亮色遮罩
          * @default 'dark'
         */
        "backdrop"?: 'dark' | 'light';
        /**
          * 图片列表（数组或 JSON 字符串）
         */
        "images": string | Array<ImageViewerItem | string>;
        /**
          * 是否启用键盘快捷键
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 是否循环播放
          * @default true
         */
        "loop"?: boolean;
        /**
          * 点击遮罩是否可关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * @default 4
         */
        "maxScale"?: number;
        /**
          * 最小/最大缩放
          * @default 0.25
         */
        "minScale"?: number;
        "onLdesignChange"?: (event: LdesignImageViewerCustomEvent<{ index: number }>) => void;
        "onLdesignClose"?: (event: LdesignImageViewerCustomEvent<void>) => void;
        "onLdesignOpen"?: (event: LdesignImageViewerCustomEvent<void>) => void;
        "onLdesignVisibleChange"?: (event: LdesignImageViewerCustomEvent<boolean>) => void;
        /**
          * 小窗拖拽方式：title 标题栏拖拽；anywhere 全面板可拖拽
          * @default 'title'
         */
        "panelDraggable"?: 'title' | 'anywhere';
        "panelHeight"?: number | string;
        /**
          * 小窗宽高（viewerMode=modal 时生效）
         */
        "panelWidth"?: number | string;
        /**
          * 是否显示标题与描述
          * @default true
         */
        "showCaption"?: boolean;
        /**
          * 是否展示顶部缩略图
          * @default true
         */
        "showThumbnails"?: boolean;
        /**
          * 初始索引
          * @default 0
         */
        "startIndex"?: number;
        /**
          * 过渡类型
          * @default 'fade-zoom'
         */
        "transition"?: 'fade' | 'fade-zoom';
        /**
          * 过渡时长（ms）
          * @default 240
         */
        "transitionDuration"?: number;
        /**
          * 过渡缓动函数
          * @default 'cubic-bezier(0.22, 0.61, 0.36, 1)'
         */
        "transitionEasing"?: string;
        /**
          * 查看窗口模式：overlay 全屏；modal 小窗
          * @default 'overlay'
         */
        "viewerMode"?: 'overlay' | 'modal' | 'embedded';
        /**
          * 小窗标题
         */
        "viewerTitle"?: string;
        /**
          * 是否显示
          * @default false
         */
        "visible"?: boolean;
        /**
          * 是否启用滚轮缩放
          * @default true
         */
        "wheelZoom"?: boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
        /**
          * 缩放步进
          * @default 0.1
         */
        "zoomStep"?: number;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface LdesignInput {
        /**
          * 输入限制，只允许输入指定字符
         */
        "allowInput"?: RegExp | ((value: string) => boolean);
        /**
          * 自适应内容高度（仅对 textarea 有效）
          * @default false
         */
        "autosize"?: boolean | { minRows?: number; maxRows?: number };
        /**
          * 是否可清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 是否受控组件
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 最大输入长度
         */
        "maxlength"?: number;
        /**
          * 最小输入长度
         */
        "minlength"?: number;
        /**
          * 失去焦点时触发
         */
        "onLdesignBlur"?: (event: LdesignInputCustomEvent<FocusEvent>) => void;
        /**
          * 值改变时触发
         */
        "onLdesignChange"?: (event: LdesignInputCustomEvent<string>) => void;
        /**
          * 点击清空按钮时触发
         */
        "onLdesignClear"?: (event: LdesignInputCustomEvent<void>) => void;
        /**
          * 获得焦点时触发
         */
        "onLdesignFocus"?: (event: LdesignInputCustomEvent<FocusEvent>) => void;
        /**
          * 输入时触发
         */
        "onLdesignInput"?: (event: LdesignInputCustomEvent<string>) => void;
        /**
          * 输入框占位文本
         */
        "placeholder"?: string;
        /**
          * 输入框头部图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 输入框行数（仅对 textarea 有效）
          * @default 2
         */
        "rows"?: number;
        /**
          * 是否显示输入数量统计
          * @default false
         */
        "showCount"?: boolean;
        /**
          * 是否显示切换密码图标
          * @default false
         */
        "showPassword"?: boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 输入框的状态
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 输入框尾部图标
         */
        "suffixIcon"?: string;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type"?: 'text' | 'password' | 'textarea' | 'number' | 'email' | 'url' | 'tel';
        /**
          * 输入框的值
          * @default ''
         */
        "value"?: string;
    }
    /**
     * Loading 加载组件
     * 轻量的加载指示器，支持两种形态：spinner | dots
     */
    interface LdesignLoading {
        /**
          * 全屏模式（覆盖整个视口）
          * @default false
         */
        "fullscreen"?: boolean;
        /**
          * 全屏时是否锁定页面滚动
          * @default true
         */
        "lockScroll"?: boolean;
        /**
          * 全屏时是否显示遮罩背景
          * @default true
         */
        "mask"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 是否处于加载中
          * @default true
         */
        "spinning"?: boolean;
        /**
          * 说明文字
         */
        "tip"?: string;
        /**
          * 加载指示类型
          * @default 'spinner'
         */
        "type"?: 'spinner' | 'dots';
        /**
          * 垂直布局（图标在上、文字在下）
          * @default false
         */
        "vertical"?: boolean;
        /**
          * 全屏时的层级（可选）
         */
        "zIndex"?: number;
    }
    interface LdesignMenu {
        /**
          * 手风琴模式：同层级只允许展开一个
          * @default false
         */
        "accordion"?: boolean;
        /**
          * 折叠模式：仅显示一级图标，悬停右侧弹出；无子级时显示 tooltip（仅纵向）
          * @default false
         */
        "collapse"?: boolean;
        /**
          * 默认打开的子菜单 key 列表（非受控）
          * @default []
         */
        "defaultOpenKeys"?: string[];
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string;
        /**
          * 子级缩进（px）
          * @default 16
         */
        "indent"?: number;
        /**
          * 菜单数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items"?: string | MenuItem[];
        /**
          * 展示模式：vertical（纵向）| horizontal（横向）
          * @default 'vertical'
         */
        "mode"?: 'vertical' | 'horizontal';
        /**
          * 横向模式下 “更多” 文案
          * @default '更多'
         */
        "moreLabel"?: string;
        /**
          * 展开/收起事件
         */
        "onLdesignOpenChange"?: (event: LdesignMenuCustomEvent<{ key: string; open: boolean; openKeys: string[] }>) => void;
        /**
          * 横向溢出变化事件
         */
        "onLdesignOverflowChange"?: (event: LdesignMenuCustomEvent<{ overflowCount: number }>) => void;
        /**
          * 选中事件
         */
        "onLdesignSelect"?: (event: LdesignMenuCustomEvent<{ key: string; item: MenuItem; pathKeys: string[] }>) => void;
        /**
          * 当前打开的子菜单 key 列表（受控）
         */
        "openKeys"?: string[];
        /**
          * 顶层（一级）是否强制显示图标占位（保证对齐）。若条目没有 icon，将渲染一个占位。
          * @default true
         */
        "requireTopIcon"?: boolean;
        /**
          * 弹出子菜单的触发方式（仅在 flyout/mixed 生效；横向模式同样适用）
          * @default 'hover'
         */
        "submenuTrigger"?: SubmenuTrigger;
        /**
          * 纵向模式：顶层互斥展开（无论 inline 或 flyout），默认开启
          * @default true
         */
        "topLevelExclusive"?: boolean;
        /**
          * 当前选中项（受控）
         */
        "value"?: string;
        /**
          * 垂直模式展开方式：inline（内嵌）、flyout（右侧弹出）、mixed（一级内嵌，其余弹出）
          * @default 'inline'
         */
        "verticalExpand"?: VerticalExpand;
    }
    /**
     * Message 全局提示
     * 轻量级的全局反馈，常用于操作后的轻量提示
     */
    interface LdesignMessage {
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable"?: boolean;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 3000
         */
        "duration"?: number;
        /**
          * 简单文本内容（也可使用 slot 自定义内容）
         */
        "message"?: string;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignMessageCustomEvent<void>) => void;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 出现位置（当前仅支持 top，预留 bottom 扩展）
          * @default 'top'
         */
        "placement"?: 'top' | 'bottom';
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 提示类型
          * @default 'info'
         */
        "type"?: MessageType;
    }
    /**
     * Modal 模态框组件
     */
    interface LdesignModal {
        "animEase"?: string;
        /**
          * 动画效果类型
          * @default 'zoom'
         */
        "animation"?: ModalAnimation;
        /**
          * 软键盘（移动端）避让
          * @default true
         */
        "avoidKeyboard"?: boolean;
        /**
          * 关闭/确认前拦截钩子（函数属性，需 JS 赋值）
         */
        "beforeClose"?: (reason: 'ok' | 'close' | 'mask' | 'esc' | 'api') => boolean | Promise<boolean>;
        /**
          * 向导步进前置钩子：返回 false 阻止切换
         */
        "beforeStepChange"?: (from: number, to: number) => boolean | Promise<boolean>;
        "breakpoints"?: { xs: number; sm: number; md: number; lg: number };
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * @default 'secondary'
         */
        "cancelType"?: ButtonType;
        /**
          * 是否居中显示
          * @default false
         */
        "centered"?: boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 图标可配置
          * @default 'x'
         */
        "closeIcon"?: string;
        /**
          * 当前步骤（0-based，可受控）
          * @default 0
         */
        "currentStep"?: number;
        /**
          * 是否销毁子元素
          * @default false
         */
        "destroyOnClose"?: boolean;
        /**
          * Drawer 滑动关闭阈值（距离）：默认 '30%'（以抽屉宽度为基准）
         */
        "drawerCloseThreshold"?: number | string;
        /**
          * Drawer 边缘滑动关闭
          * @default true
         */
        "drawerSwipeToClose"?: boolean;
        /**
          * 动画参数（也可通过 CSS 变量覆盖）：duration(ms)、ease、animEase
         */
        "duration"?: number;
        "ease"?: string;
        /**
          * 边缘感应宽度（px）
          * @default 24
         */
        "edgeSwipeWidth"?: number;
        /**
          * 容器（选择器或元素）：若提供，则在加载时把组件节点移动到该容器下
         */
        "getContainer"?: string | HTMLElement;
        /**
          * 自定义高度
         */
        "height"?: number | string;
        "initialFocus"?: string;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable"?: boolean;
        /**
          * 按ESC键是否关闭
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask"?: boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        "maxHeight"?: number;
        "maxWidth"?: number;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable"?: boolean;
        /**
          * @default 'maximize-2'
         */
        "maximizeIcon"?: string;
        "minHeight"?: number;
        /**
          * 调整大小边界
         */
        "minWidth"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * @default false
         */
        "okDisabled"?: boolean;
        /**
          * OK 按钮状态
          * @default false
         */
        "okLoading"?: boolean;
        /**
          * 底部按钮文案和类型控制（仅在未自定义 footer 时生效）
          * @default '确定'
         */
        "okText"?: string;
        /**
          * @default 'primary'
         */
        "okType"?: ButtonType;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignModalCustomEvent<void>) => void;
        /**
          * 确认事件
         */
        "onLdesignOk"?: (event: LdesignModalCustomEvent<void>) => void;
        "onLdesignStepChange"?: (event: LdesignModalCustomEvent<number>) => void;
        /**
          * 显示状态变化事件
         */
        "onLdesignVisibleChange"?: (event: LdesignModalCustomEvent<boolean>) => void;
        /**
          * 屏幕边缘滑动打开抽屉（需 destroyOnClose=false 以便组件常驻）
          * @default false
         */
        "openOnEdgeSwipe"?: boolean;
        "preOk"?: () => boolean | Promise<boolean>;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable"?: boolean;
        /**
          * @default 'minimize-2'
         */
        "restoreIcon"?: string;
        /**
          * 关闭阈值：低于该高度则关闭，默认 '30%'
         */
        "sheetCloseThreshold"?: number | string;
        /**
          * Bottom Sheet 拖拽开关（仅在 variant='bottom-sheet' 时生效）
          * @default true
         */
        "sheetDraggable"?: boolean;
        /**
          * 初始高度：同上；若不传且有 snapPoints，则使用最大 snap 值（通常是 100%）
         */
        "sheetInitial"?: number | string;
        /**
          * Snap 点：数组，值支持像素（数字或'120px'），百分比（'50%'），或小数（0.5 表示 50%）
         */
        "sheetSnapPoints"?: (number | string)[];
        /**
          * 模态框尺寸
          * @default 'medium'
         */
        "size"?: ModalSize;
        /**
          * 步骤标题（JS 赋值）
         */
        "steps"?: string[];
        /**
          * 距离顶部的距离
         */
        "top"?: number | string;
        /**
          * 焦点与可访问性
          * @default true
         */
        "trapFocus"?: boolean;
        /**
          * 变体：抽屉/底部弹层等
          * @default 'modal'
         */
        "variant"?: ModalVariant;
        /**
          * 响应式变体：根据断点自动切换
         */
        "variantAt"?: Partial<Record<'xs'|'sm'|'md'|'lg', ModalVariant>>;
        /**
          * 是否显示模态框
          * @default false
         */
        "visible"?: boolean;
        /**
          * 自定义宽度
         */
        "width"?: number | string;
        /**
          * 向导模式
          * @default false
         */
        "wizard"?: boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface LdesignNotification {
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 描述文案（也可使用默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 4500
         */
        "duration"?: number;
        /**
          * 标题
         */
        "notificationTitle"?: string;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignNotificationCustomEvent<void>) => void;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 出现位置
          * @default 'top-right'
         */
        "placement"?: NotificationPlacement;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 通知类型
          * @default 'info'
         */
        "type"?: NotificationType;
    }
    /**
     * Pagination 分页组件
     * 用于数据分页，提供页码切换、页大小切换与快速跳转
     */
    interface LdesignPagination {
        /**
          * 页码省略边界数（两端保留）
          * @default 1
         */
        "boundaryCount"?: number;
        /**
          * 当前页（受控）
         */
        "current"?: number;
        /**
          * 默认当前页（非受控）
          * @default 1
         */
        "defaultCurrent"?: number;
        /**
          * 默认每页条数（非受控）
          * @default 10
         */
        "defaultPageSize"?: number;
        /**
          * 组件禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 仅一页时是否隐藏
          * @default false
         */
        "hideOnSinglePage"?: boolean;
        /**
          * 页码变化事件
         */
        "onLdesignChange"?: (event: LdesignPaginationCustomEvent<{ page: number; pageSize: number }>) => void;
        /**
          * 每页条数变化事件
         */
        "onLdesignPageSizeChange"?: (event: LdesignPaginationCustomEvent<{ pageSize: number; page: number }>) => void;
        /**
          * 每页条数（受控）
         */
        "pageSize"?: number;
        /**
          * 页大小选项（可传数组或逗号分隔字符串）
          * @default [10, 20, 50, 100]
         */
        "pageSizeOptions"?: number[] | string;
        /**
          * 下拉展示文案模板，仅在 dropdown 模式下生效，支持 {size}
          * @default '{size} 条/页'
         */
        "pageSizeText"?: string;
        /**
          * 页信息文案模板，支持 {current}、{pageCount}
          * @default '{current}/{pageCount} 页'
         */
        "pageText"?: string;
        /**
          * 是否显示首页/末页
          * @default false
         */
        "showFirstLast"?: boolean;
        /**
          * 是否显示快速跳转输入框
          * @default false
         */
        "showQuickJumper"?: boolean;
        /**
          * 是否显示每页条数切换器
          * @default false
         */
        "showSizeChanger"?: boolean;
        /**
          * 是否显示总数文案
          * @default false
         */
        "showTotal"?: boolean;
        /**
          * 当前页两侧展示的邻接页数
          * @default 1
         */
        "siblingCount"?: number;
        /**
          * 简洁模式（仅上一页/下一页 + 页码输入）
          * @default false
         */
        "simple"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 切换器类型：native 原生下拉；dropdown 使用组件弹层
          * @default 'dropdown'
         */
        "sizeChangerType"?: 'native' | 'dropdown';
        /**
          * 总条目数
          * @default 0
         */
        "total"?: number;
        /**
          * 总数文案模板，支持 {total}、{rangeStart}、{rangeEnd}
          * @default '共 {total} 条'
         */
        "totalText"?: string;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于 Popup 进行封装，提供确认/取消操作
     */
    interface LdesignPopconfirm {
        /**
          * 箭头（默认显示），透传给 Popup
          * @default true
         */
        "arrow"?: boolean;
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * 取消按钮类型（默认使用次要/描边样式）
          * @default 'outline'
         */
        "cancelType"?: 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 点击外部是否关闭（仅点击触发较常用）
          * @default true
         */
        "closeOnOutside"?: boolean;
        /**
          * 辅助说明（可选，支持默认 slot 覆盖）
         */
        "description"?: string;
        /**
          * @default 0
         */
        "hideDelay"?: number;
        /**
          * 图标名称（可用 slot=icon 覆盖）
          * @default 'help-circle'
         */
        "icon"?: string;
        /**
          * 确认/取消按钮文本
          * @default '确定'
         */
        "okText"?: string;
        /**
          * 确认按钮类型（影响颜色）
          * @default 'primary'
         */
        "okType"?: 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 事件：取消
         */
        "onLdesignCancel"?: (event: LdesignPopconfirmCustomEvent<void>) => void;
        /**
          * 事件：确认
         */
        "onLdesignConfirm"?: (event: LdesignPopconfirmCustomEvent<void>) => void;
        /**
          * 事件：对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignPopconfirmCustomEvent<boolean>) => void;
        /**
          * 出现位置（透传给 Popup）
          * @default 'top'
         */
        "placement"?: PopconfirmPlacement;
        /**
          * 确认标题（支持 slot=title 覆盖）
          * @default '确定要执行该操作吗？'
         */
        "popconfirmTitle"?: string;
        /**
          * 延迟显示/隐藏（毫秒），透传给 Popup
          * @default 0
         */
        "showDelay"?: number;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（默认点击）
          * @default 'click'
         */
        "trigger"?: PopconfirmTrigger;
        /**
          * 外部受控可见性（仅在 trigger='manual' 时生效）
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * ldesign-popup（重写版）
     * 目标：
     * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
     * - 在所有方向上保持一致的 offset 语义：
     *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
     *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
     * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
     * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
     */
    interface LdesignPopup {
        /**
          * @default 'self'
         */
        "appendTo"?: 'self' | 'body' | 'closest-popup';
        /**
          * @default true
         */
        "arrow"?: boolean;
        /**
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * @default true
         */
        "closeOnOutside"?: boolean;
        "content"?: string;
        /**
          * @default false
         */
        "debug"?: boolean;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 0
         */
        "hideDelay"?: number;
        /**
          * @default true
         */
        "interactive"?: boolean;
        /**
          * @default false
         */
        "lockOnScroll"?: boolean;
        "maxWidth"?: number | string;
        /**
          * 动画位移距离（px），用于“朝触发器靠近”的起始位移
          * @default 10
         */
        "motionDistance"?: number;
        /**
          * 动画时长（ms）
          * @default 200
         */
        "motionDuration"?: number;
        /**
          * 是否开启动画（基于 data-placement 的定向靠近/离开）
          * @default true
         */
        "motionEnabled"?: boolean;
        /**
          * 与触发元素的距离：参见组件注释中的语义说明
          * @default 8
         */
        "offsetDistance"?: number | string;
        "onLdesignVisibleChange"?: (event: LdesignPopupCustomEvent<boolean>) => void;
        /**
          * @default 'bottom'
         */
        "placement"?: PopupPlacement;
        /**
          * @default 'dialog'
         */
        "popupRole"?: string;
        "popupTitle"?: string;
        /**
          * @default 0
         */
        "showDelay"?: number;
        /**
          * @default 'auto'
         */
        "strategy"?: 'auto' | 'fixed' | 'absolute';
        /**
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * @default 'hover'
         */
        "trigger"?: PopupTrigger;
        /**
          * @default false
         */
        "visible"?: boolean;
        "width"?: number | string;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface LdesignRadio {
        /**
          * 是否显示边框
          * @default false
         */
        "border"?: boolean;
        /**
          * 是否为按钮样式
          * @default false
         */
        "button"?: boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 单选框的名称，用于分组
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignRadioCustomEvent<string | number>) => void;
        /**
          * 单选框的尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 选中状态的值
         */
        "value"?: string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface LdesignRadioGroup {
        /**
          * 排列方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 组名称，用于原生表单
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignRadioGroupCustomEvent<string | number>) => void;
        /**
          * 单选框组尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 绑定值
         */
        "value"?: string | number;
    }
    /**
     * Rate 评分组件
     * - 支持半星、清空、只读、禁用、键盘可访问
     * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
     */
    interface LdesignRate {
        /**
          * 再次点击清空（值相同则清零）
          * @default true
         */
        "allowClear"?: boolean;
        /**
          * 允许半星
          * @default false
         */
        "allowHalf"?: boolean;
        /**
          * 选中颜色（支持 CSS 变量覆盖）
         */
        "color"?: string;
        /**
          * 受控模式：为 true 时组件不主动修改 value，仅触发事件
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 总星数
          * @default 5
         */
        "count"?: number;
        /**
          * 禁用交互
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 图标名称（默认 star）
          * @default 'star'
         */
        "icon"?: string;
        /**
          * 值变化事件（返回新值）
         */
        "onLdesignChange"?: (event: LdesignRateCustomEvent<number>) => void;
        /**
          * hover 变化事件（返回悬浮值）
         */
        "onLdesignHoverChange"?: (event: LdesignRateCustomEvent<number>) => void;
        /**
          * 只读（展示，不可交互）
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 尺寸（影响图标大小与间距）
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 提示文案（数组），hover 时显示。可传属性为 JSON 字符串或以属性方式传递数组
         */
        "tooltips"?: string[] | string;
        /**
          * 当前分值（支持受控）
          * @default 0
         */
        "value"?: number;
        /**
          * 未选中颜色（支持 CSS 变量覆盖）
         */
        "voidColor"?: string;
    }
    /**
     * Select 选择器
     * 基于 <ldesign-popup> 实现，支持单选/多选。
     */
    interface LdesignSelect {
        /**
          * 是否显示箭头（默认不显示）
          * @default false
         */
        "arrow"?: boolean;
        /**
          * 可清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 选中项后是否自动关闭（默认：单选 true，多选 false）
         */
        "closeOnSelect"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 列表最大高度（px）
          * @default 240
         */
        "maxHeight"?: number;
        /**
          * 多选时最多展示的标签数量，超过后折叠为 +N
         */
        "maxTagCount"?: number;
        /**
          * 是否多选
          * @default false
         */
        "multiple"?: boolean;
        /**
          * 选中变化事件
         */
        "onLdesignChange"?: (event: LdesignSelectCustomEvent<{ value: string | string[] | undefined; options: SelectOption[] }>) => void;
        /**
          * 对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignSelectCustomEvent<boolean>) => void;
        /**
          * 选项列表（可传数组或 JSON 字符串）
          * @default []
         */
        "options"?: string | SelectOption[];
        /**
          * 占位文案（无选中项时）
          * @default '请选择'
         */
        "placeholder"?: string;
        /**
          * 出现位置（默认 bottom-start）
          * @default 'bottom-start'
         */
        "placement"?: SelectPlacement;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（Select 多数使用 click 或 manual）
          * @default 'click'
         */
        "trigger"?: SelectTrigger;
        /**
          * 值（受控）。单选时为 string，多选时为 string[]
         */
        "value"?: string | string[];
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible"?: boolean;
        /**
          * 列表宽度（可选）
         */
        "width"?: number | string;
    }
    /**
     * Slider 滑块组件
     * 通过拖动滑块在一定数值区间内进行选择
     */
    interface LdesignSlider {
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 最大值
          * @default 100
         */
        "max"?: number;
        /**
          * 最小值
          * @default 0
         */
        "min"?: number;
        /**
          * 值改变后触发（释放拖动或点击轨道）
         */
        "onLdesignChange"?: (event: LdesignSliderCustomEvent<number>) => void;
        /**
          * 拖动时实时触发
         */
        "onLdesignInput"?: (event: LdesignSliderCustomEvent<number>) => void;
        /**
          * 是否显示当前值提示
          * @default false
         */
        "showTooltip"?: boolean;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 步长（> 0）
          * @default 1
         */
        "step"?: number;
        /**
          * 当前值
          * @default 0
         */
        "value"?: number;
        /**
          * 是否垂直方向
          * @default false
         */
        "vertical"?: boolean;
    }
    /**
     * Space 间距组件
     * 用于在一组元素之间提供一致的间距与对齐控制
     */
    interface LdesignSpace {
        /**
          * 交叉轴对齐方式
          * @default 'center'
         */
        "align"?: 'start' | 'center' | 'end' | 'baseline';
        /**
          * 是否占满容器宽度
          * @default false
         */
        "block"?: boolean;
        /**
          * 是否自动换行（仅在横向时有效）
          * @default false
         */
        "breakLine"?: boolean;
        /**
          * 间距方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 间距尺寸。可选预设：small | medium | large；也可传数字，单位为 px
          * @default 'medium'
         */
        "size"?: Size | number | string;
        /**
          * 分隔符样式：none 不显示分隔符；line 使用 1px 分隔线
          * @default 'none'
         */
        "split"?: 'none' | 'line';
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface LdesignSwitch {
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 选中时的图标
         */
        "checkedIcon"?: string;
        /**
          * 选中时的文本
         */
        "checkedText"?: string;
        /**
          * 选中时的值
          * @default true
         */
        "checkedValue"?: string | number | boolean;
        /**
          * 颜色风格 可选：brand | success | warning | error | neutral
          * @default 'brand'
         */
        "color"?: 'brand' | 'success' | 'warning' | 'error' | 'neutral';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignSwitchCustomEvent<string | number | boolean>) => void;
        /**
          * 形状 可选：pill（胶囊）| rounded（圆角）| square（直角）
          * @default 'pill'
         */
        "shape"?: 'pill' | 'rounded' | 'square';
        /**
          * 开关尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 未选中时的图标
         */
        "uncheckedIcon"?: string;
        /**
          * 未选中时的文本
         */
        "uncheckedText"?: string;
        /**
          * 未选中时的值
          * @default false
         */
        "uncheckedValue"?: string | number | boolean;
        /**
          * 外观样式 可选：solid | soft | outline | ghost
          * @default 'solid'
         */
        "variant"?: 'solid' | 'soft' | 'outline' | 'ghost';
    }
    /**
     * TabPanel 选项卡面板
     * - 由 <ldesign-tabs> 管理激活状态
     */
    interface LdesignTabPanel {
        /**
          * 由父组件控制的激活状态（反射到属性便于样式控制）
          * @default false
         */
        "active"?: boolean;
        /**
          * 是否可关闭（在标签上显示关闭按钮）
          * @default false
         */
        "closable"?: boolean;
        /**
          * 禁用状态（不可被激活）
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 标签显示文本
         */
        "label": string;
        /**
          * 懒渲染：首次激活时才渲染插槽内容，之后保持渲染
          * @default false
         */
        "lazy"?: boolean;
        /**
          * 面板唯一标识（用于匹配激活项）
         */
        "name": string;
    }
    /**
     * Tabs 选项卡组件
     * - 通过水平或垂直的标签页切换展示内容
     */
    interface LdesignTabs {
        /**
          * 是否显示新增按钮
          * @default false
         */
        "addable"?: boolean;
        /**
          * 默认激活的标签（非受控）
         */
        "defaultValue"?: string;
        /**
          * 点击新增按钮
         */
        "onLdesignAdd"?: (event: LdesignTabsCustomEvent<void>) => void;
        /**
          * 切换事件（返回激活的 name）
         */
        "onLdesignChange"?: (event: LdesignTabsCustomEvent<string>) => void;
        /**
          * 点击关闭某个面板
         */
        "onLdesignRemove"?: (event: LdesignTabsCustomEvent<{ name: string }>) => void;
        /**
          * 选项卡位置
          * @default 'top'
         */
        "placement"?: TabsPlacement;
        /**
          * 尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 选项卡外观类型
          * @default 'line'
         */
        "type"?: TabsType;
        /**
          * 当前激活的标签（受控）
         */
        "value"?: string;
    }
    /**
     * TimePicker 时间选择器
     * - 使用 <ldesign-popup> 作为弹层
     * - 默认格式 HH:mm:ss，可通过 showSeconds 控制秒列
     */
    interface LdesignTimePicker {
        /**
          * 是否允许键盘输入
          * @default true
         */
        "allowInput"?: boolean;
        /**
          * 是否显示箭头（透传给 Popup）
          * @default false
         */
        "arrow"?: boolean;
        /**
          * 无边框模式
          * @default false
         */
        "borderless"?: boolean;
        /**
          * 是否可清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 是否需要点击“确定”确认（默认需要）。关闭后再触发 change
          * @default true
         */
        "confirm"?: boolean;
        /**
          * 默认值（非受控）
         */
        "defaultValue"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 禁用小时集合（可传 JSON 字符串或数组），如 [0,1,2]
         */
        "disabledHours"?: string | number[];
        /**
          * 禁用分钟集合（同上）
         */
        "disabledMinutes"?: string | number[];
        /**
          * 禁用秒集合（同上）
         */
        "disabledSeconds"?: string | number[];
        /**
          * 时间格式
          * @default 'HH:mm:ss'
         */
        "format"?: TimeFormat;
        /**
          * 是否隐藏禁用的时间
          * @default true
         */
        "hideDisabledTime"?: boolean;
        /**
          * 步进
          * @default 1
         */
        "hourStep"?: number;
        /**
          * 最大时间（含），如 18:00 或 18:00:00
         */
        "maxTime"?: string;
        /**
          * 毫秒步进
          * @default 1
         */
        "millisecondStep"?: number;
        /**
          * 最小时间（含），如 08:30 或 08:30:00
         */
        "minTime"?: string;
        /**
          * @default 1
         */
        "minuteStep"?: number;
        /**
          * 输入框失去焦点
         */
        "onLdesignBlur"?: (event: LdesignTimePickerCustomEvent<FocusEvent>) => void;
        /**
          * 值改变
         */
        "onLdesignChange"?: (event: LdesignTimePickerCustomEvent<string | undefined>) => void;
        /**
          * 面板关闭
         */
        "onLdesignClose"?: (event: LdesignTimePickerCustomEvent<void>) => void;
        /**
          * 输入框获得焦点
         */
        "onLdesignFocus"?: (event: LdesignTimePickerCustomEvent<FocusEvent>) => void;
        /**
          * 面板打开
         */
        "onLdesignOpen"?: (event: LdesignTimePickerCustomEvent<void>) => void;
        /**
          * 选择时间（点击、滚动、键盘操作时）
         */
        "onLdesignPick"?: (event: LdesignTimePickerCustomEvent<{ value: string; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' } }>) => void;
        /**
          * 弹层可见性改变
         */
        "onLdesignVisibleChange"?: (event: LdesignTimePickerCustomEvent<boolean>) => void;
        /**
          * 输出格式：'24' -> 24 小时制；'12' -> 12 小时制（hh:mm[:ss] AM/PM）
          * @default '24'
         */
        "outputFormat"?: '24' | '12';
        /**
          * 列表最大高度
          * @default 180
         */
        "panelHeight"?: number;
        /**
          * 占位文案
          * @default '选择时间'
         */
        "placeholder"?: string;
        /**
          * 弹出层位置
          * @default 'bottom-start'
         */
        "placement"?: TimePickerPlacement;
        /**
          * 预设快捷选项（JSON字符串或对象）
         */
        "presets"?: string | TimePickerPresets;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * @default 1
         */
        "secondStep"?: number;
        /**
          * 是否在值为空时显示清除图标
          * @default false
         */
        "showClearIconOnEmpty"?: boolean;
        /**
          * 是否显示秒
          * @default true
         */
        "showSeconds"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: TimePickerSize;
        /**
          * 状态
          * @default 'default'
         */
        "status"?: TimePickerStatus;
        /**
          * 步进 [小时, 分钟, 秒]
          * @default [1, 1, 1]
         */
        "steps"?: number[];
        /**
          * 主题（透传给 Popup）
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 弹出层触发方式
          * @default 'click'
         */
        "trigger"?: TimePickerTrigger;
        /**
          * 是否显示 12 小时制 AM/PM 列（显示方式），内部仍以 24h 保存
          * @default false
         */
        "use12Hours"?: boolean;
        /**
          * 当前值（受控），格式如 23:59:59 或 23:59（当 showSeconds=false 时）
         */
        "value"?: string;
        /**
          * 外部受控可见性（仅 trigger = 'manual' 生效）
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * ldesign-time-picker-panel
     * 仅渲染选择面板，不包含触发器/弹层
     */
    interface LdesignTimePickerPanel {
        /**
          * 默认值
         */
        "defaultValue"?: string;
        /**
          * 时间格式
          * @default 'HH:mm:ss'
         */
        "format"?: TimeFormat1;
        /**
          * 变更事件
         */
        "onLdesignChange"?: (event: LdesignTimePickerPanelCustomEvent<string>) => void;
        /**
          * 选择事件
         */
        "onLdesignPick"?: (event: LdesignTimePickerPanelCustomEvent<{ value: string; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' } }>) => void;
        /**
          * 面板列最大高度
          * @default 180
         */
        "panelHeight"?: number;
        /**
          * 是否显示秒
          * @default true
         */
        "showSeconds"?: boolean;
        /**
          * 步进数组 [h, m, s, ms]
          * @default [1, 1, 1, 1]
         */
        "steps"?: number[];
        /**
          * 是否启用 12 小时制显示（输出仍用 format 决定）
          * @default false
         */
        "use12Hours"?: boolean;
        /**
          * 当前值（受控）
         */
        "value"?: string;
    }
    interface LdesignTimeRangePicker {
        /**
          * @default true
         */
        "allowInput"?: boolean;
        /**
          * @default false
         */
        "arrow"?: boolean;
        /**
          * @default false
         */
        "borderless"?: boolean;
        /**
          * @default true
         */
        "clearable"?: boolean;
        /**
          * @default true
         */
        "confirm"?: boolean;
        "defaultValue"?: TimeRange;
        /**
          * @default false
         */
        "disabled"?: boolean;
        /**
          * @default 'HH:mm:ss'
         */
        "format"?: TimeFormat2;
        /**
          * @default true
         */
        "hideDisabledTime"?: boolean;
        "onLdesignBlur"?: (event: LdesignTimeRangePickerCustomEvent<FocusEvent>) => void;
        "onLdesignChange"?: (event: LdesignTimeRangePickerCustomEvent<TimeRange | undefined>) => void;
        "onLdesignClose"?: (event: LdesignTimeRangePickerCustomEvent<void>) => void;
        "onLdesignFocus"?: (event: LdesignTimeRangePickerCustomEvent<FocusEvent>) => void;
        "onLdesignOpen"?: (event: LdesignTimeRangePickerCustomEvent<void>) => void;
        "onLdesignPick"?: (event: LdesignTimeRangePickerCustomEvent<{ value: TimeRange; context: { trigger: 'click' | 'scroll' | 'keyboard' | 'now' } }>) => void;
        "onLdesignVisibleChange"?: (event: LdesignTimeRangePickerCustomEvent<boolean>) => void;
        /**
          * @default 180
         */
        "panelHeight"?: number;
        /**
          * @default '结束时间'
         */
        "placeholderEnd"?: string;
        /**
          * @default '开始时间'
         */
        "placeholderStart"?: string;
        /**
          * @default 'bottom-start'
         */
        "placement"?: Placement;
        "presets"?: string | Record<string, TimeRange>;
        /**
          * @default false
         */
        "readonly"?: boolean;
        /**
          * @default false
         */
        "showClearIconOnEmpty"?: boolean;
        /**
          * @default 'medium'
         */
        "size"?: TimePickerSize1;
        /**
          * @default 'default'
         */
        "status"?: TimePickerStatus1;
        /**
          * @default [1, 1, 1, 1]
         */
        "steps"?: number[];
        /**
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * @default 'click'
         */
        "trigger"?: 'click' | 'focus' | 'manual';
        "value"?: TimeRange;
        /**
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * Tooltip 工具提示组件
     * 基于 Popup 的轻量封装
     */
    interface LdesignTooltip {
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow"?: boolean;
        /**
          * 提示内容
         */
        "content": string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 100
         */
        "hideDelay"?: number;
        /**
          * 最大宽度
          * @default 250
         */
        "maxWidth"?: number;
        /**
          * 与触发元素的间距（默认 tooltip 更大一些）
          * @default 16
         */
        "offsetDistance"?: number | string;
        /**
          * 提示位置
          * @default 'top'
         */
        "placement"?: TooltipPlacement;
        /**
          * 延迟显示时间（毫秒）
          * @default 100
         */
        "showDelay"?: number;
        /**
          * 主题：深色/浅色（默认深色）
          * @default 'dark'
         */
        "theme"?: 'dark' | 'light';
    }
    interface LdesignTree {
        /**
          * @default true
         */
        "allowAfter"?: boolean;
        /**
          * 全局允许放置位置
          * @default true
         */
        "allowBefore"?: boolean;
        /**
          * 自定义：是否允许拖拽该节点（JS 赋值）
         */
        "allowDrag"?: (node: TreeNode) => boolean;
        /**
          * 自定义：是否允许在目标位置放置（JS 赋值）
         */
        "allowDrop"?: (dragNode: TreeNode, dropNode: TreeNode, position: 'before' | 'after' | 'inside') => boolean;
        /**
          * @default true
         */
        "allowInside"?: boolean;
        /**
          * 是否显示复选框
          * @default false
         */
        "checkable"?: boolean;
        /**
          * 当前勾选项（受控）
         */
        "checkedKeys"?: string[] | string;
        /**
          * 远程数据 URL（根或子节点懒加载）
         */
        "dataUrl"?: string;
        /**
          * 默认勾选项（非受控）
          * @default []
         */
        "defaultCheckedKeys"?: string[] | string;
        /**
          * 默认展开项（非受控）
          * @default []
         */
        "defaultExpandedKeys"?: string[] | string;
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string | string[];
        /**
          * 拖拽悬停自动展开的延迟（毫秒）
          * @default 400
         */
        "dragExpandDelay"?: number;
        /**
          * 是否开启节点拖拽重排
          * @default false
         */
        "draggable"?: boolean;
        /**
          * 当前展开项（受控）
         */
        "expandedKeys"?: string[] | string;
        /**
          * 字段映射：当后端字段名非 key/label/children/isLeaf 等时可用；支持 JSON 字符串或对象（JS 赋值）
         */
        "fieldMap"?: string | { key: string; label: string; children?: string; isLeaf?: string; disabled?: string; icon?: string };
        /**
          * 层级缩进（px）
          * @default 16
         */
        "indent"?: number;
        /**
          * 树数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items"?: string | TreeNode[];
        /**
          * 选择器：读取 <script type="application/json"> 的数据
         */
        "itemsSelector"?: string;
        /**
          * 启用懒加载：展开时若无 children 则触发加载
          * @default false
         */
        "lazy"?: boolean;
        /**
          * 可通过 JS 赋值：自定义加载函数
         */
        "loadData"?: (node?: TreeNode | undefined) => Promise<TreeNode[]>;
        /**
          * 限制最大层级深度（根为 depth=1）；未设置则不限制
         */
        "maxDepth"?: number;
        /**
          * 是否多选
          * @default false
         */
        "multiple"?: boolean;
        /**
          * 勾选事件（包含半选）
         */
        "onLdesignCheck"?: (event: LdesignTreeCustomEvent<{ key: string; checked: boolean; checkedKeys: string[]; halfCheckedKeys: string[] }>) => void;
        /**
          * 拖拽放置事件（也用于键盘重排时回调）
         */
        "onLdesignDrop"?: (event: LdesignTreeCustomEvent<{ dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] }>) => void;
        /**
          * 展开/收起事件
         */
        "onLdesignExpand"?: (event: LdesignTreeCustomEvent<{ key: string; expanded: boolean; expandedKeys: string[] }>) => void;
        /**
          * 键盘重排事件（与 drop 事件区分来源）
         */
        "onLdesignMove"?: (event: LdesignTreeCustomEvent<{ dragKey: string; dropKey: string; position: 'before' | 'after' | 'inside'; items: TreeNode[] }>) => void;
        /**
          * 选中事件
         */
        "onLdesignSelect"?: (event: LdesignTreeCustomEvent<{ key: string; keys: string[]; node?: TreeNode }>) => void;
        /**
          * 懒加载参数名（dataUrl 模式下）：父键参数
          * @default 'parent'
         */
        "parentParam"?: string;
        /**
          * 是否启用键盘重排（Alt+方向键）
          * @default true
         */
        "reorderable"?: boolean;
        /**
          * 是否可选择（高亮）
          * @default true
         */
        "selectable"?: boolean;
        /**
          * 是否显示连接线（简易）
          * @default false
         */
        "showLine"?: boolean;
        /**
          * 可通过 JS 赋值：转换函数，将接口原始数据转换为 TreeNode[]
         */
        "transform"?: (raw: any) => TreeNode[];
        /**
          * 当前选中项（受控，单选为 string，多选为 string[]）
         */
        "value"?: string | string[];
    }
    interface IntrinsicElements {
        "base-component": BaseComponent;
        "ldesign-affix": LdesignAffix;
        "ldesign-backtop": LdesignBacktop;
        "ldesign-button": LdesignButton;
        "ldesign-checkbox": LdesignCheckbox;
        "ldesign-checkbox-group": LdesignCheckboxGroup;
        "ldesign-collapse": LdesignCollapse;
        "ldesign-collapse-panel": LdesignCollapsePanel;
        "ldesign-color-input": LdesignColorInput;
        "ldesign-color-picker": LdesignColorPicker;
        "ldesign-color-picker-panel": LdesignColorPickerPanel;
        "ldesign-drawer": LdesignDrawer;
        "ldesign-dropdown": LdesignDropdown;
        "ldesign-icon": LdesignIcon;
        "ldesign-image": LdesignImage;
        "ldesign-image-group": LdesignImageGroup;
        "ldesign-image-viewer": LdesignImageViewer;
        "ldesign-input": LdesignInput;
        "ldesign-loading": LdesignLoading;
        "ldesign-menu": LdesignMenu;
        "ldesign-message": LdesignMessage;
        "ldesign-modal": LdesignModal;
        "ldesign-notification": LdesignNotification;
        "ldesign-pagination": LdesignPagination;
        "ldesign-popconfirm": LdesignPopconfirm;
        "ldesign-popup": LdesignPopup;
        "ldesign-radio": LdesignRadio;
        "ldesign-radio-group": LdesignRadioGroup;
        "ldesign-rate": LdesignRate;
        "ldesign-select": LdesignSelect;
        "ldesign-slider": LdesignSlider;
        "ldesign-space": LdesignSpace;
        "ldesign-switch": LdesignSwitch;
        "ldesign-tab-panel": LdesignTabPanel;
        "ldesign-tabs": LdesignTabs;
        "ldesign-time-picker": LdesignTimePicker;
        "ldesign-time-picker-panel": LdesignTimePickerPanel;
        "ldesign-time-range-picker": LdesignTimeRangePicker;
        "ldesign-tooltip": LdesignTooltip;
        "ldesign-tree": LdesignTree;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * 组件基类
             * 提供通用的属性和方法
             */
            "base-component": LocalJSX.BaseComponent & JSXBase.HTMLAttributes<HTMLBaseComponentElement>;
            /**
             * Affix 固钉组件
             * - 将元素固定在页面（或指定滚动容器）顶部
             * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
             */
            "ldesign-affix": LocalJSX.LdesignAffix & JSXBase.HTMLAttributes<HTMLLdesignAffixElement>;
            /**
             * BackTop 返回顶部组件
             * - 支持窗口根滚动回到顶部
             * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
             * - 支持设置滚动动画速度（px/s）
             */
            "ldesign-backtop": LocalJSX.LdesignBacktop & JSXBase.HTMLAttributes<HTMLLdesignBacktopElement>;
            /**
             * Button 按钮组件
             * 用于触发操作或导航
             */
            "ldesign-button": LocalJSX.LdesignButton & JSXBase.HTMLAttributes<HTMLLdesignButtonElement>;
            /**
             * Checkbox 复选框组件
             * 在一组备选项中进行多选
             */
            "ldesign-checkbox": LocalJSX.LdesignCheckbox & JSXBase.HTMLAttributes<HTMLLdesignCheckboxElement>;
            /**
             * CheckboxGroup 复选框组组件
             * 管理一组复选框的状态
             */
            "ldesign-checkbox-group": LocalJSX.LdesignCheckboxGroup & JSXBase.HTMLAttributes<HTMLLdesignCheckboxGroupElement>;
            /**
             * Collapse 折叠面板
             * - 支持受控/非受控、手风琴模式、动画、禁用
             */
            "ldesign-collapse": LocalJSX.LdesignCollapse & JSXBase.HTMLAttributes<HTMLLdesignCollapseElement>;
            /**
             * CollapsePanel 折叠面板项
             */
            "ldesign-collapse-panel": LocalJSX.LdesignCollapsePanel & JSXBase.HTMLAttributes<HTMLLdesignCollapsePanelElement>;
            /**
             * ColorInput 颜色输入（内置 Popup + ColorPicker）
             * - 点击触发显示颜色选择面板
             * - 支持透明度/预设/最近使用
             */
            "ldesign-color-input": LocalJSX.LdesignColorInput & JSXBase.HTMLAttributes<HTMLLdesignColorInputElement>;
            /**
             * ColorPicker 颜色选择器
             * - 支持 SV 色板 + Hue 滑条 + 可选 Alpha
             * - 支持 HEX/RGB/HSL/HSV 输入与预设/历史颜色
             */
            "ldesign-color-picker": LocalJSX.LdesignColorPicker & JSXBase.HTMLAttributes<HTMLLdesignColorPickerElement>;
            /**
             * ColorPicker Panel 纯面板
             * - 不包含 Popup/触发器，仅渲染颜色选择面板
             * - 适合内嵌在任意容器，宽度默认铺满容器
             */
            "ldesign-color-picker-panel": LocalJSX.LdesignColorPickerPanel & JSXBase.HTMLAttributes<HTMLLdesignColorPickerPanelElement>;
            /**
             * Drawer 抽屉组件
             * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
             */
            "ldesign-drawer": LocalJSX.LdesignDrawer & JSXBase.HTMLAttributes<HTMLLdesignDrawerElement>;
            /**
             * Dropdown 下拉菜单
             * 基于 <ldesign-popup> 实现
             */
            "ldesign-dropdown": LocalJSX.LdesignDropdown & JSXBase.HTMLAttributes<HTMLLdesignDropdownElement>;
            /**
             * Icon 图标组件
             * 基于 Lucide 图标库
             */
            "ldesign-icon": LocalJSX.LdesignIcon & JSXBase.HTMLAttributes<HTMLLdesignIconElement>;
            /**
             * Image 图片组件
             * - 支持懒加载（IntersectionObserver + 原生 loading）
             * - 支持占位/骨架、错误占位、回退图
             * - 支持响应式图片（srcset/sizes）
             * - 支持 object-fit / object-position
             * - 支持预览（遮罩、缩放、拖拽）
             */
            "ldesign-image": LocalJSX.LdesignImage & JSXBase.HTMLAttributes<HTMLLdesignImageElement>;
            /**
             * ImageGroup 图集容器
             * - 使用 CSS Grid 布局
             * - 支持列数与间距
             * - 可给子项（ldesign-image）注入默认形状（若子项未手动指定）
             */
            "ldesign-image-group": LocalJSX.LdesignImageGroup & JSXBase.HTMLAttributes<HTMLLdesignImageGroupElement>;
            /**
             * ImageViewer 图片预览器
             * - 支持多图预览、左右切换、循环
             * - 支持缩放（滚轮/按钮/双击）、拖拽平移、旋转、重置
             * - 支持顶部缩略图快速切换
             * - 支持键盘操作（Esc 关闭、←/→ 切换、+/- 缩放、0 重置）
             */
            "ldesign-image-viewer": LocalJSX.LdesignImageViewer & JSXBase.HTMLAttributes<HTMLLdesignImageViewerElement>;
            /**
             * Input 输入框组件
             * 通过鼠标或键盘输入内容，是最基础的表单域的包装
             */
            "ldesign-input": LocalJSX.LdesignInput & JSXBase.HTMLAttributes<HTMLLdesignInputElement>;
            /**
             * Loading 加载组件
             * 轻量的加载指示器，支持两种形态：spinner | dots
             */
            "ldesign-loading": LocalJSX.LdesignLoading & JSXBase.HTMLAttributes<HTMLLdesignLoadingElement>;
            "ldesign-menu": LocalJSX.LdesignMenu & JSXBase.HTMLAttributes<HTMLLdesignMenuElement>;
            /**
             * Message 全局提示
             * 轻量级的全局反馈，常用于操作后的轻量提示
             */
            "ldesign-message": LocalJSX.LdesignMessage & JSXBase.HTMLAttributes<HTMLLdesignMessageElement>;
            /**
             * Modal 模态框组件
             */
            "ldesign-modal": LocalJSX.LdesignModal & JSXBase.HTMLAttributes<HTMLLdesignModalElement>;
            /**
             * Notification 通知提醒
             * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
             */
            "ldesign-notification": LocalJSX.LdesignNotification & JSXBase.HTMLAttributes<HTMLLdesignNotificationElement>;
            /**
             * Pagination 分页组件
             * 用于数据分页，提供页码切换、页大小切换与快速跳转
             */
            "ldesign-pagination": LocalJSX.LdesignPagination & JSXBase.HTMLAttributes<HTMLLdesignPaginationElement>;
            /**
             * Popconfirm 气泡确认框
             * 基于 Popup 进行封装，提供确认/取消操作
             */
            "ldesign-popconfirm": LocalJSX.LdesignPopconfirm & JSXBase.HTMLAttributes<HTMLLdesignPopconfirmElement>;
            /**
             * ldesign-popup（重写版）
             * 目标：
             * - 结构清晰：属性/状态/引用/工具/事件/定位/渲染分层
             * - 在所有方向上保持一致的 offset 语义：
             *    arrow=true 时，offsetDistance = 触发元素到箭头尖端的可见距离
             *    arrow=false 时，offsetDistance = 触发元素到面板边缘的可见距离
             * - 支持 hover/click/focus/manual/contextmenu，支持 appendTo(self/body/closest-popup)
             * - 稳健的外部点击与 ESC 关闭，右键通过虚拟参考在鼠标处弹出
             */
            "ldesign-popup": LocalJSX.LdesignPopup & JSXBase.HTMLAttributes<HTMLLdesignPopupElement>;
            /**
             * Radio 单选框组件
             * 在一组备选项中进行单选
             */
            "ldesign-radio": LocalJSX.LdesignRadio & JSXBase.HTMLAttributes<HTMLLdesignRadioElement>;
            /**
             * RadioGroup 单选框组组件
             * 管理一组单选框的状态
             */
            "ldesign-radio-group": LocalJSX.LdesignRadioGroup & JSXBase.HTMLAttributes<HTMLLdesignRadioGroupElement>;
            /**
             * Rate 评分组件
             * - 支持半星、清空、只读、禁用、键盘可访问
             * - 支持自定义图标（基于 ldesign-icon），或通过 slot=character 自定义字符
             */
            "ldesign-rate": LocalJSX.LdesignRate & JSXBase.HTMLAttributes<HTMLLdesignRateElement>;
            /**
             * Select 选择器
             * 基于 <ldesign-popup> 实现，支持单选/多选。
             */
            "ldesign-select": LocalJSX.LdesignSelect & JSXBase.HTMLAttributes<HTMLLdesignSelectElement>;
            /**
             * Slider 滑块组件
             * 通过拖动滑块在一定数值区间内进行选择
             */
            "ldesign-slider": LocalJSX.LdesignSlider & JSXBase.HTMLAttributes<HTMLLdesignSliderElement>;
            /**
             * Space 间距组件
             * 用于在一组元素之间提供一致的间距与对齐控制
             */
            "ldesign-space": LocalJSX.LdesignSpace & JSXBase.HTMLAttributes<HTMLLdesignSpaceElement>;
            /**
             * Switch 开关组件
             * 表示两种相互对立的状态间的切换，多用于触发「开/关」
             */
            "ldesign-switch": LocalJSX.LdesignSwitch & JSXBase.HTMLAttributes<HTMLLdesignSwitchElement>;
            /**
             * TabPanel 选项卡面板
             * - 由 <ldesign-tabs> 管理激活状态
             */
            "ldesign-tab-panel": LocalJSX.LdesignTabPanel & JSXBase.HTMLAttributes<HTMLLdesignTabPanelElement>;
            /**
             * Tabs 选项卡组件
             * - 通过水平或垂直的标签页切换展示内容
             */
            "ldesign-tabs": LocalJSX.LdesignTabs & JSXBase.HTMLAttributes<HTMLLdesignTabsElement>;
            /**
             * TimePicker 时间选择器
             * - 使用 <ldesign-popup> 作为弹层
             * - 默认格式 HH:mm:ss，可通过 showSeconds 控制秒列
             */
            "ldesign-time-picker": LocalJSX.LdesignTimePicker & JSXBase.HTMLAttributes<HTMLLdesignTimePickerElement>;
            /**
             * ldesign-time-picker-panel
             * 仅渲染选择面板，不包含触发器/弹层
             */
            "ldesign-time-picker-panel": LocalJSX.LdesignTimePickerPanel & JSXBase.HTMLAttributes<HTMLLdesignTimePickerPanelElement>;
            "ldesign-time-range-picker": LocalJSX.LdesignTimeRangePicker & JSXBase.HTMLAttributes<HTMLLdesignTimeRangePickerElement>;
            /**
             * Tooltip 工具提示组件
             * 基于 Popup 的轻量封装
             */
            "ldesign-tooltip": LocalJSX.LdesignTooltip & JSXBase.HTMLAttributes<HTMLLdesignTooltipElement>;
            "ldesign-tree": LocalJSX.LdesignTree & JSXBase.HTMLAttributes<HTMLLdesignTreeElement>;
        }
    }
}
