/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonIconPosition, ButtonShape, ButtonType, NativeButtonType, Size, Theme } from "./types";
import { DrawerPlacement } from "./components/drawer/drawer";
import { MenuItem, MenuMode, SubmenuTrigger, VerticalExpand } from "./components/menu/menu";
import { MessageType } from "./components/message/message";
import { ModalAnimation, ModalSize } from "./components/modal/modal";
import { NotificationPlacement, NotificationType } from "./components/notification/notification";
import { PopconfirmPlacement, PopconfirmTrigger } from "./components/popconfirm/popconfirm";
import { PopupPlacement, PopupTrigger } from "./components/popup/popup";
import { TooltipPlacement } from "./components/tooltip/tooltip";
export { ButtonIconPosition, ButtonShape, ButtonType, NativeButtonType, Size, Theme } from "./types";
export { DrawerPlacement } from "./components/drawer/drawer";
export { MenuItem, MenuMode, SubmenuTrigger, VerticalExpand } from "./components/menu/menu";
export { MessageType } from "./components/message/message";
export { ModalAnimation, ModalSize } from "./components/modal/modal";
export { NotificationPlacement, NotificationType } from "./components/notification/notification";
export { PopconfirmPlacement, PopconfirmTrigger } from "./components/popconfirm/popconfirm";
export { PopupPlacement, PopupTrigger } from "./components/popup/popup";
export { TooltipPlacement } from "./components/tooltip/tooltip";
export namespace Components {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface BaseComponent {
        /**
          * 组件类名
         */
        "class"?: string;
        /**
          * 组件ID
         */
        "componentId"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 主题
          * @default 'light'
         */
        "theme": Theme;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface LdesignAffix {
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 距离顶部的偏移量（触发吸顶的阈值）
          * @default 0
         */
        "offset": number;
        /**
          * 指定滚动容器（CSS 选择器）。默认为 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 是否在指定滚动容器内部吸附（使用 position: sticky 策略） 仅当设置了 target 且 target 不是 window 时生效
          * @default false
         */
        "withinTarget": boolean;
        /**
          * 自定义层级
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface LdesignBacktop {
        /**
          * 滚动动画速度（像素/秒）。值越大，速度越快。  最终动画时长 = 当前滚动距离 / speed  当 speed <= 0 时，将立即跳到顶部
          * @default 1200
         */
        "speed": number;
        /**
          * 指定滚动容器（CSS 选择器）。不传则使用 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 出现的滚动阈值（px）。当滚动距离超过该值时显示返回顶部按钮
          * @default 200
         */
        "visibilityHeight": number;
    }
    /**
     * Button 按钮组件
     * 用于触发操作或导航
     */
    interface LdesignButton {
        /**
          * 是否为块级按钮
          * @default false
         */
        "block": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 图标名称
         */
        "icon"?: string;
        /**
          * 图标位置：left | right
          * @default 'left'
         */
        "iconPosition": ButtonIconPosition;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 原生按钮类型：button | submit | reset
          * @default 'button'
         */
        "nativeType": NativeButtonType;
        /**
          * 按钮形状
          * @default 'rectangle'
         */
        "shape": ButtonShape;
        /**
          * 按钮尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 按钮类型
          * @default 'primary'
         */
        "type": ButtonType;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface LdesignCheckbox {
        /**
          * 是否显示边框（兼容旧 API）
          * @default false
         */
        "border": boolean;
        /**
          * 是否为按钮样式（兼容旧 API）
          * @default false
         */
        "button": boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 设置半选状态，只负责样式控制
          * @default false
         */
        "indeterminate": boolean;
        /**
          * 标签位置
          * @default 'right'
         */
        "labelPlacement": 'left' | 'right';
        /**
          * 原生表单 name，用于表单提交/分组
         */
        "name"?: string;
        /**
          * 形状
          * @default 'square'
         */
        "shape": 'square' | 'round';
        /**
          * 多选框的尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 外观主题颜色
          * @default 'brand'
         */
        "status": 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 选中状态的值
         */
        "value"?: string | number;
        /**
          * 外观变体
          * @default 'default'
         */
        "variant": 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface LdesignCheckboxGroup {
        /**
          * 组方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 统一标签位置（可被子项覆盖）
          * @default 'right'
         */
        "labelPlacement": 'left' | 'right';
        /**
          * 最大可选数量
         */
        "max"?: number;
        /**
          * 最小可选数量
         */
        "min"?: number;
        /**
          * 统一形状（可被子项覆盖）
          * @default 'square'
         */
        "shape": 'square' | 'round';
        /**
          * 复选框组尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 统一外观主题（可被子项覆盖）
          * @default 'brand'
         */
        "status": 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 绑定值
          * @default []
         */
        "value": Array<string | number>;
        /**
          * 统一变体（可被子项覆盖）
          * @default 'default'
         */
        "variant": 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * Drawer 抽屉组件
     * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
     */
    interface LdesignDrawer {
        /**
          * 是否显示右上角关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭（等价于 hide），同时触发 close 事件
         */
        "close": () => Promise<void>;
        /**
          * 是否允许按下 ESC 关闭
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * 标题文本（可通过 slot=header 自定义头部）
         */
        "drawerTitle"?: string;
        /**
          * 隐藏抽屉（带动画）
         */
        "hide": () => Promise<void>;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask": boolean;
        /**
          * 点击遮罩是否关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 抽屉出现的位置
          * @default 'right'
         */
        "placement": DrawerPlacement;
        /**
          * 显示抽屉
         */
        "show": (emit?: boolean) => Promise<void>;
        /**
          * 面板尺寸（left/right 为宽度，top/bottom 为高度）。可为数字（px）或任意 CSS 长度
          * @default 360
         */
        "size": number | string;
        /**
          * 是否显示抽屉
          * @default false
         */
        "visible": boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface LdesignIcon {
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 图标尺寸
          * @default 'medium'
         */
        "size": Size | number;
        /**
          * 是否旋转
          * @default false
         */
        "spin": boolean;
        /**
          * 描边宽度
          * @default 2
         */
        "strokeWidth": number;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface LdesignInput {
        /**
          * 输入限制，只允许输入指定字符
         */
        "allowInput"?: RegExp | ((value: string) => boolean);
        /**
          * 自适应内容高度（仅对 textarea 有效）
          * @default false
         */
        "autosize": boolean | { minRows?: number; maxRows?: number };
        /**
          * 是否可清空
          * @default false
         */
        "clearable": boolean;
        /**
          * 是否受控组件
          * @default false
         */
        "controlled": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 最大输入长度
         */
        "maxlength"?: number;
        /**
          * 最小输入长度
         */
        "minlength"?: number;
        /**
          * 输入框占位文本
         */
        "placeholder"?: string;
        /**
          * 输入框头部图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly": boolean;
        /**
          * 输入框行数（仅对 textarea 有效）
          * @default 2
         */
        "rows": number;
        /**
          * 是否显示输入数量统计
          * @default false
         */
        "showCount": boolean;
        /**
          * 是否显示切换密码图标
          * @default false
         */
        "showPassword": boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 输入框的状态
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 输入框尾部图标
         */
        "suffixIcon"?: string;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type": 'text' | 'password' | 'textarea' | 'number' | 'email' | 'url' | 'tel';
        /**
          * 输入框的值
          * @default ''
         */
        "value": string;
    }
    interface LdesignMenu {
        /**
          * 手风琴模式（仅 inline/mixed 生效）：同层级只允许展开一个
          * @default false
         */
        "accordion": boolean;
        /**
          * 默认打开的子菜单 key 列表（非受控，仅 inline/mixed 生效）
          * @default []
         */
        "defaultOpenKeys": string[];
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string;
        /**
          * 子级缩进（px）
          * @default 16
         */
        "indent": number;
        /**
          * 菜单数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items": string | MenuItem[];
        /**
          * 菜单模式：水平/垂直
          * @default 'vertical'
         */
        "mode": MenuMode;
        /**
          * 水平模式“更多”按钮图标（保证一级项都有图标）
          * @default 'more-horizontal'
         */
        "moreIcon": string;
        /**
          * 水平模式溢出项的展示文案
          * @default '更多'
         */
        "moreLabel": string;
        /**
          * 当前打开的子菜单 key 列表（受控，仅 inline/mixed 生效）
         */
        "openKeys"?: string[];
        /**
          * 子菜单触发方式（仅 flyout 或水平模式下生效）
          * @default 'hover'
         */
        "submenuTrigger": SubmenuTrigger;
        /**
          * 当前选中项（受控）
         */
        "value"?: string;
        /**
          * 垂直模式下的展开方式：inline（内嵌展开）、flyout（右侧弹出）、mixed（一层内嵌，更多层右侧弹出）
          * @default 'inline'
         */
        "verticalExpand": VerticalExpand;
    }
    /**
     * Message 全局提示
     * 轻量级的全局反馈，常用于操作后的轻量提示
     */
    interface LdesignMessage {
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画，带动后续消息平滑上移）
         */
        "close": () => Promise<void>;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 3000
         */
        "duration": number;
        /**
          * 简单文本内容（也可使用 slot 自定义内容）
         */
        "message"?: string;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover": boolean;
        /**
          * 出现位置（当前仅支持 top，预留 bottom 扩展）
          * @default 'top'
         */
        "placement": 'top' | 'bottom';
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 提示类型
          * @default 'info'
         */
        "type": MessageType;
    }
    /**
     * Modal 模态框组件
     */
    interface LdesignModal {
        /**
          * 动画效果类型
          * @default 'zoom'
         */
        "animation": ModalAnimation;
        /**
          * 是否居中显示
          * @default false
         */
        "centered": boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 关闭模态框
         */
        "close": () => Promise<void>;
        /**
          * 图标可配置
          * @default 'x'
         */
        "closeIcon": string;
        /**
          * 是否销毁子元素
          * @default false
         */
        "destroyOnClose": boolean;
        /**
          * 自定义高度
         */
        "height"?: number | string;
        /**
          * 隐藏模态框
         */
        "hide": () => Promise<void>;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable": boolean;
        /**
          * 按ESC键是否关闭
          * @default true
         */
        "keyboard": boolean;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask": boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable": boolean;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable": boolean;
        /**
          * 最大化模态框
         */
        "maximize": () => Promise<void>;
        /**
          * @default 'maximize-2'
         */
        "maximizeIcon": string;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable": boolean;
        /**
          * 恢复模态框
         */
        "restore": () => Promise<void>;
        /**
          * @default 'minimize-2'
         */
        "restoreIcon": string;
        /**
          * 显示模态框
         */
        "show": () => Promise<void>;
        /**
          * 模态框尺寸
          * @default 'medium'
         */
        "size": ModalSize;
        /**
          * 切换最大化状态
         */
        "toggleMaximize": () => Promise<void>;
        /**
          * 距离顶部的距离
         */
        "top"?: number | string;
        /**
          * 是否显示模态框
          * @default false
         */
        "visible": boolean;
        /**
          * 自定义宽度
         */
        "width"?: number | string;
        /**
          * z-index
          * @default 1000
         */
        "zIndex": number;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface LdesignNotification {
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable": boolean;
        /**
          * 手动关闭（带高度收起动画，带动后续通知平滑归位）
         */
        "close": () => Promise<void>;
        /**
          * 描述文案（也可使用默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 4500
         */
        "duration": number;
        /**
          * 标题
         */
        "notificationTitle"?: string;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover": boolean;
        /**
          * 出现位置
          * @default 'top-right'
         */
        "placement": NotificationPlacement;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon": boolean;
        /**
          * 通知类型
          * @default 'info'
         */
        "type": NotificationType;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于 Popup 进行封装，提供确认/取消操作
     */
    interface LdesignPopconfirm {
        /**
          * 箭头（默认显示），透传给 Popup
          * @default true
         */
        "arrow": boolean;
        /**
          * @default '取消'
         */
        "cancelText": string;
        /**
          * 取消按钮类型（默认使用次要/描边样式）
          * @default 'outline'
         */
        "cancelType": 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 点击外部是否关闭（仅点击触发较常用）
          * @default true
         */
        "closeOnOutside": boolean;
        /**
          * 辅助说明（可选，支持默认 slot 覆盖）
         */
        "description"?: string;
        /**
          * @default 0
         */
        "hideDelay": number;
        /**
          * 图标名称（可用 slot=icon 覆盖）
          * @default 'help-circle'
         */
        "icon": string;
        /**
          * 确认/取消按钮文本
          * @default '确定'
         */
        "okText": string;
        /**
          * 确认按钮类型（影响颜色）
          * @default 'primary'
         */
        "okType": 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 出现位置（透传给 Popup）
          * @default 'top'
         */
        "placement": PopconfirmPlacement;
        /**
          * 确认标题（支持 slot=title 覆盖）
          * @default '确定要执行该操作吗？'
         */
        "popconfirmTitle": string;
        /**
          * 延迟显示/隐藏（毫秒），透传给 Popup
          * @default 0
         */
        "showDelay": number;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式（默认点击）
          * @default 'click'
         */
        "trigger": PopconfirmTrigger;
        /**
          * 外部受控可见性（仅在 trigger='manual' 时生效）
          * @default false
         */
        "visible": boolean;
    }
    /**
     * Popup 弹出层组件
     * 基于
     * @floating-ui /dom 实现
     */
    interface LdesignPopup {
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow": boolean;
        /**
          * 是否允许 Esc 键关闭
          * @default true
         */
        "closeOnEsc": boolean;
        /**
          * 点击浮层外是否关闭（仅在 trigger = 'click' 时常用）
          * @default true
         */
        "closeOnOutside": boolean;
        /**
          * 弹出层内容
         */
        "content"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 0
         */
        "hideDelay": number;
        /**
          * 是否允许在弹出层上进行交互（仅 hover 触发时有意义）
          * @default true
         */
        "interactive": boolean;
        /**
          * 最大宽度
         */
        "maxWidth"?: number | string;
        /**
          * 偏移量
          * @default 8
         */
        "offsetDistance": number;
        /**
          * 弹出层位置
          * @default 'bottom'
         */
        "placement": PopupPlacement;
        /**
          * 内容区域的语义角色
          * @default 'dialog'
         */
        "popupRole": string;
        /**
          * 弹出层标题
         */
        "popupTitle"?: string;
        /**
          * 延迟显示时间（毫秒）
          * @default 0
         */
        "showDelay": number;
        /**
          * 主题风格
          * @default 'light'
         */
        "theme": 'light' | 'dark';
        /**
          * 触发方式
          * @default 'hover'
         */
        "trigger": PopupTrigger;
        /**
          * 是否显示弹出层
          * @default false
         */
        "visible": boolean;
        /**
          * 弹出层宽度
         */
        "width"?: number | string;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface LdesignRadio {
        /**
          * 是否显示边框
          * @default false
         */
        "border": boolean;
        /**
          * 是否为按钮样式
          * @default false
         */
        "button": boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 单选框的名称，用于分组
         */
        "name"?: string;
        /**
          * 单选框的尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 选中状态的值
         */
        "value"?: string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface LdesignRadioGroup {
        /**
          * 排列方向
          * @default 'horizontal'
         */
        "direction": 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 组名称，用于原生表单
         */
        "name"?: string;
        /**
          * 单选框组尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 绑定值
         */
        "value"?: string | number;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface LdesignSwitch {
        /**
          * 是否选中
          * @default false
         */
        "checked": boolean;
        /**
          * 选中时的图标
         */
        "checkedIcon"?: string;
        /**
          * 选中时的文本
         */
        "checkedText"?: string;
        /**
          * 选中时的值
          * @default true
         */
        "checkedValue"?: string | number | boolean;
        /**
          * 颜色风格 可选：brand | success | warning | error | neutral
          * @default 'brand'
         */
        "color": 'brand' | 'success' | 'warning' | 'error' | 'neutral';
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading": boolean;
        /**
          * 形状 可选：pill（胶囊）| rounded（圆角）| square（直角）
          * @default 'pill'
         */
        "shape": 'pill' | 'rounded' | 'square';
        /**
          * 开关尺寸
          * @default 'medium'
         */
        "size": Size;
        /**
          * 未选中时的图标
         */
        "uncheckedIcon"?: string;
        /**
          * 未选中时的文本
         */
        "uncheckedText"?: string;
        /**
          * 未选中时的值
          * @default false
         */
        "uncheckedValue"?: string | number | boolean;
        /**
          * 外观样式 可选：solid | soft | outline | ghost
          * @default 'solid'
         */
        "variant": 'solid' | 'soft' | 'outline' | 'ghost';
    }
    /**
     * Tooltip 工具提示组件
     * 基于 Popup 的轻量封装
     */
    interface LdesignTooltip {
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow": boolean;
        /**
          * 提示内容
         */
        "content": string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled": boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 100
         */
        "hideDelay": number;
        /**
          * 最大宽度
          * @default 250
         */
        "maxWidth": number;
        /**
          * 提示位置
          * @default 'top'
         */
        "placement": TooltipPlacement;
        /**
          * 延迟显示时间（毫秒）
          * @default 100
         */
        "showDelay": number;
        /**
          * 主题：深色/浅色（默认深色）
          * @default 'dark'
         */
        "theme": 'dark' | 'light';
    }
}
export interface LdesignAffixCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignAffixElement;
}
export interface LdesignButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignButtonElement;
}
export interface LdesignCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCheckboxElement;
}
export interface LdesignCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignCheckboxGroupElement;
}
export interface LdesignDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignDrawerElement;
}
export interface LdesignInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignInputElement;
}
export interface LdesignMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMenuElement;
}
export interface LdesignMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignMessageElement;
}
export interface LdesignModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignModalElement;
}
export interface LdesignNotificationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignNotificationElement;
}
export interface LdesignPopconfirmCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPopconfirmElement;
}
export interface LdesignPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignPopupElement;
}
export interface LdesignRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRadioElement;
}
export interface LdesignRadioGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignRadioGroupElement;
}
export interface LdesignSwitchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLLdesignSwitchElement;
}
declare global {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface HTMLBaseComponentElement extends Components.BaseComponent, HTMLStencilElement {
    }
    var HTMLBaseComponentElement: {
        prototype: HTMLBaseComponentElement;
        new (): HTMLBaseComponentElement;
    };
    interface HTMLLdesignAffixElementEventMap {
        "ldesignAffixChange": boolean;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface HTMLLdesignAffixElement extends Components.LdesignAffix, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignAffixElementEventMap>(type: K, listener: (this: HTMLLdesignAffixElement, ev: LdesignAffixCustomEvent<HTMLLdesignAffixElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignAffixElementEventMap>(type: K, listener: (this: HTMLLdesignAffixElement, ev: LdesignAffixCustomEvent<HTMLLdesignAffixElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignAffixElement: {
        prototype: HTMLLdesignAffixElement;
        new (): HTMLLdesignAffixElement;
    };
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface HTMLLdesignBacktopElement extends Components.LdesignBacktop, HTMLStencilElement {
    }
    var HTMLLdesignBacktopElement: {
        prototype: HTMLLdesignBacktopElement;
        new (): HTMLLdesignBacktopElement;
    };
    interface HTMLLdesignButtonElementEventMap {
        "ldesignClick": MouseEvent;
    }
    /**
     * Button 按钮组件
     * 用于触发操作或导航
     */
    interface HTMLLdesignButtonElement extends Components.LdesignButton, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignButtonElementEventMap>(type: K, listener: (this: HTMLLdesignButtonElement, ev: LdesignButtonCustomEvent<HTMLLdesignButtonElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignButtonElementEventMap>(type: K, listener: (this: HTMLLdesignButtonElement, ev: LdesignButtonCustomEvent<HTMLLdesignButtonElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignButtonElement: {
        prototype: HTMLLdesignButtonElement;
        new (): HTMLLdesignButtonElement;
    };
    interface HTMLLdesignCheckboxElementEventMap {
        "ldesignChange": boolean;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface HTMLLdesignCheckboxElement extends Components.LdesignCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCheckboxElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxElement, ev: LdesignCheckboxCustomEvent<HTMLLdesignCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCheckboxElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxElement, ev: LdesignCheckboxCustomEvent<HTMLLdesignCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCheckboxElement: {
        prototype: HTMLLdesignCheckboxElement;
        new (): HTMLLdesignCheckboxElement;
    };
    interface HTMLLdesignCheckboxGroupElementEventMap {
        "ldesignChange": Array<string | number>;
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface HTMLLdesignCheckboxGroupElement extends Components.LdesignCheckboxGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxGroupElement, ev: LdesignCheckboxGroupCustomEvent<HTMLLdesignCheckboxGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignCheckboxGroupElementEventMap>(type: K, listener: (this: HTMLLdesignCheckboxGroupElement, ev: LdesignCheckboxGroupCustomEvent<HTMLLdesignCheckboxGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignCheckboxGroupElement: {
        prototype: HTMLLdesignCheckboxGroupElement;
        new (): HTMLLdesignCheckboxGroupElement;
    };
    interface HTMLLdesignDrawerElementEventMap {
        "ldesignVisibleChange": boolean;
        "ldesignClose": void;
    }
    /**
     * Drawer 抽屉组件
     * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
     */
    interface HTMLLdesignDrawerElement extends Components.LdesignDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignDrawerElementEventMap>(type: K, listener: (this: HTMLLdesignDrawerElement, ev: LdesignDrawerCustomEvent<HTMLLdesignDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignDrawerElementEventMap>(type: K, listener: (this: HTMLLdesignDrawerElement, ev: LdesignDrawerCustomEvent<HTMLLdesignDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignDrawerElement: {
        prototype: HTMLLdesignDrawerElement;
        new (): HTMLLdesignDrawerElement;
    };
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface HTMLLdesignIconElement extends Components.LdesignIcon, HTMLStencilElement {
    }
    var HTMLLdesignIconElement: {
        prototype: HTMLLdesignIconElement;
        new (): HTMLLdesignIconElement;
    };
    interface HTMLLdesignInputElementEventMap {
        "ldesignInput": string;
        "ldesignChange": string;
        "ldesignFocus": FocusEvent;
        "ldesignBlur": FocusEvent;
        "ldesignClear": void;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface HTMLLdesignInputElement extends Components.LdesignInput, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignInputElementEventMap>(type: K, listener: (this: HTMLLdesignInputElement, ev: LdesignInputCustomEvent<HTMLLdesignInputElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignInputElementEventMap>(type: K, listener: (this: HTMLLdesignInputElement, ev: LdesignInputCustomEvent<HTMLLdesignInputElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignInputElement: {
        prototype: HTMLLdesignInputElement;
        new (): HTMLLdesignInputElement;
    };
    interface HTMLLdesignMenuElementEventMap {
        "ldesignSelect": { key: string; item: MenuItem; pathKeys: string[] };
        "ldesignOpenChange": { key: string; open: boolean; openKeys: string[] };
        "ldesignOverflowChange": { overflowCount: number };
    }
    interface HTMLLdesignMenuElement extends Components.LdesignMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMenuElementEventMap>(type: K, listener: (this: HTMLLdesignMenuElement, ev: LdesignMenuCustomEvent<HTMLLdesignMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMenuElementEventMap>(type: K, listener: (this: HTMLLdesignMenuElement, ev: LdesignMenuCustomEvent<HTMLLdesignMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMenuElement: {
        prototype: HTMLLdesignMenuElement;
        new (): HTMLLdesignMenuElement;
    };
    interface HTMLLdesignMessageElementEventMap {
        "ldesignClose": void;
    }
    /**
     * Message 全局提示
     * 轻量级的全局反馈，常用于操作后的轻量提示
     */
    interface HTMLLdesignMessageElement extends Components.LdesignMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignMessageElementEventMap>(type: K, listener: (this: HTMLLdesignMessageElement, ev: LdesignMessageCustomEvent<HTMLLdesignMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignMessageElementEventMap>(type: K, listener: (this: HTMLLdesignMessageElement, ev: LdesignMessageCustomEvent<HTMLLdesignMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignMessageElement: {
        prototype: HTMLLdesignMessageElement;
        new (): HTMLLdesignMessageElement;
    };
    interface HTMLLdesignModalElementEventMap {
        "ldesignVisibleChange": boolean;
        "ldesignClose": void;
        "ldesignOk": void;
    }
    /**
     * Modal 模态框组件
     */
    interface HTMLLdesignModalElement extends Components.LdesignModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignModalElementEventMap>(type: K, listener: (this: HTMLLdesignModalElement, ev: LdesignModalCustomEvent<HTMLLdesignModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignModalElementEventMap>(type: K, listener: (this: HTMLLdesignModalElement, ev: LdesignModalCustomEvent<HTMLLdesignModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignModalElement: {
        prototype: HTMLLdesignModalElement;
        new (): HTMLLdesignModalElement;
    };
    interface HTMLLdesignNotificationElementEventMap {
        "ldesignClose": void;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface HTMLLdesignNotificationElement extends Components.LdesignNotification, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignNotificationElementEventMap>(type: K, listener: (this: HTMLLdesignNotificationElement, ev: LdesignNotificationCustomEvent<HTMLLdesignNotificationElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignNotificationElementEventMap>(type: K, listener: (this: HTMLLdesignNotificationElement, ev: LdesignNotificationCustomEvent<HTMLLdesignNotificationElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignNotificationElement: {
        prototype: HTMLLdesignNotificationElement;
        new (): HTMLLdesignNotificationElement;
    };
    interface HTMLLdesignPopconfirmElementEventMap {
        "ldesignConfirm": void;
        "ldesignCancel": void;
        "ldesignVisibleChange": boolean;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于 Popup 进行封装，提供确认/取消操作
     */
    interface HTMLLdesignPopconfirmElement extends Components.LdesignPopconfirm, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPopconfirmElementEventMap>(type: K, listener: (this: HTMLLdesignPopconfirmElement, ev: LdesignPopconfirmCustomEvent<HTMLLdesignPopconfirmElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPopconfirmElementEventMap>(type: K, listener: (this: HTMLLdesignPopconfirmElement, ev: LdesignPopconfirmCustomEvent<HTMLLdesignPopconfirmElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPopconfirmElement: {
        prototype: HTMLLdesignPopconfirmElement;
        new (): HTMLLdesignPopconfirmElement;
    };
    interface HTMLLdesignPopupElementEventMap {
        "ldesignVisibleChange": boolean;
    }
    /**
     * Popup 弹出层组件
     * 基于
     * @floating-ui /dom 实现
     */
    interface HTMLLdesignPopupElement extends Components.LdesignPopup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignPopupElementEventMap>(type: K, listener: (this: HTMLLdesignPopupElement, ev: LdesignPopupCustomEvent<HTMLLdesignPopupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignPopupElementEventMap>(type: K, listener: (this: HTMLLdesignPopupElement, ev: LdesignPopupCustomEvent<HTMLLdesignPopupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignPopupElement: {
        prototype: HTMLLdesignPopupElement;
        new (): HTMLLdesignPopupElement;
    };
    interface HTMLLdesignRadioElementEventMap {
        "ldesignChange": string | number;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface HTMLLdesignRadioElement extends Components.LdesignRadio, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRadioElementEventMap>(type: K, listener: (this: HTMLLdesignRadioElement, ev: LdesignRadioCustomEvent<HTMLLdesignRadioElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRadioElementEventMap>(type: K, listener: (this: HTMLLdesignRadioElement, ev: LdesignRadioCustomEvent<HTMLLdesignRadioElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRadioElement: {
        prototype: HTMLLdesignRadioElement;
        new (): HTMLLdesignRadioElement;
    };
    interface HTMLLdesignRadioGroupElementEventMap {
        "ldesignChange": string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface HTMLLdesignRadioGroupElement extends Components.LdesignRadioGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignRadioGroupElementEventMap>(type: K, listener: (this: HTMLLdesignRadioGroupElement, ev: LdesignRadioGroupCustomEvent<HTMLLdesignRadioGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignRadioGroupElementEventMap>(type: K, listener: (this: HTMLLdesignRadioGroupElement, ev: LdesignRadioGroupCustomEvent<HTMLLdesignRadioGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignRadioGroupElement: {
        prototype: HTMLLdesignRadioGroupElement;
        new (): HTMLLdesignRadioGroupElement;
    };
    interface HTMLLdesignSwitchElementEventMap {
        "ldesignChange": string | number | boolean;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface HTMLLdesignSwitchElement extends Components.LdesignSwitch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLLdesignSwitchElementEventMap>(type: K, listener: (this: HTMLLdesignSwitchElement, ev: LdesignSwitchCustomEvent<HTMLLdesignSwitchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLLdesignSwitchElementEventMap>(type: K, listener: (this: HTMLLdesignSwitchElement, ev: LdesignSwitchCustomEvent<HTMLLdesignSwitchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLLdesignSwitchElement: {
        prototype: HTMLLdesignSwitchElement;
        new (): HTMLLdesignSwitchElement;
    };
    /**
     * Tooltip 工具提示组件
     * 基于 Popup 的轻量封装
     */
    interface HTMLLdesignTooltipElement extends Components.LdesignTooltip, HTMLStencilElement {
    }
    var HTMLLdesignTooltipElement: {
        prototype: HTMLLdesignTooltipElement;
        new (): HTMLLdesignTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "base-component": HTMLBaseComponentElement;
        "ldesign-affix": HTMLLdesignAffixElement;
        "ldesign-backtop": HTMLLdesignBacktopElement;
        "ldesign-button": HTMLLdesignButtonElement;
        "ldesign-checkbox": HTMLLdesignCheckboxElement;
        "ldesign-checkbox-group": HTMLLdesignCheckboxGroupElement;
        "ldesign-drawer": HTMLLdesignDrawerElement;
        "ldesign-icon": HTMLLdesignIconElement;
        "ldesign-input": HTMLLdesignInputElement;
        "ldesign-menu": HTMLLdesignMenuElement;
        "ldesign-message": HTMLLdesignMessageElement;
        "ldesign-modal": HTMLLdesignModalElement;
        "ldesign-notification": HTMLLdesignNotificationElement;
        "ldesign-popconfirm": HTMLLdesignPopconfirmElement;
        "ldesign-popup": HTMLLdesignPopupElement;
        "ldesign-radio": HTMLLdesignRadioElement;
        "ldesign-radio-group": HTMLLdesignRadioGroupElement;
        "ldesign-switch": HTMLLdesignSwitchElement;
        "ldesign-tooltip": HTMLLdesignTooltipElement;
    }
}
declare namespace LocalJSX {
    /**
     * 组件基类
     * 提供通用的属性和方法
     */
    interface BaseComponent {
        /**
          * 组件类名
         */
        "class"?: string;
        /**
          * 组件ID
         */
        "componentId"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 组件尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 主题
          * @default 'light'
         */
        "theme"?: Theme;
    }
    /**
     * Affix 固钉组件
     * - 将元素固定在页面（或指定滚动容器）顶部
     * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
     */
    interface LdesignAffix {
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 距离顶部的偏移量（触发吸顶的阈值）
          * @default 0
         */
        "offset"?: number;
        /**
          * 吸附状态变化事件
         */
        "onLdesignAffixChange"?: (event: LdesignAffixCustomEvent<boolean>) => void;
        /**
          * 指定滚动容器（CSS 选择器）。默认为 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 是否在指定滚动容器内部吸附（使用 position: sticky 策略） 仅当设置了 target 且 target 不是 window 时生效
          * @default false
         */
        "withinTarget"?: boolean;
        /**
          * 自定义层级
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * BackTop 返回顶部组件
     * - 支持窗口根滚动回到顶部
     * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
     * - 支持设置滚动动画速度（px/s）
     */
    interface LdesignBacktop {
        /**
          * 滚动动画速度（像素/秒）。值越大，速度越快。  最终动画时长 = 当前滚动距离 / speed  当 speed <= 0 时，将立即跳到顶部
          * @default 1200
         */
        "speed"?: number;
        /**
          * 指定滚动容器（CSS 选择器）。不传则使用 window 例如：'#scrollable' 或 '.scroll-area'
         */
        "target"?: string;
        /**
          * 出现的滚动阈值（px）。当滚动距离超过该值时显示返回顶部按钮
          * @default 200
         */
        "visibilityHeight"?: number;
    }
    /**
     * Button 按钮组件
     * 用于触发操作或导航
     */
    interface LdesignButton {
        /**
          * 是否为块级按钮
          * @default false
         */
        "block"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 图标名称
         */
        "icon"?: string;
        /**
          * 图标位置：left | right
          * @default 'left'
         */
        "iconPosition"?: ButtonIconPosition;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 原生按钮类型：button | submit | reset
          * @default 'button'
         */
        "nativeType"?: NativeButtonType;
        /**
          * 点击事件
         */
        "onLdesignClick"?: (event: LdesignButtonCustomEvent<MouseEvent>) => void;
        /**
          * 按钮形状
          * @default 'rectangle'
         */
        "shape"?: ButtonShape;
        /**
          * 按钮尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 按钮类型
          * @default 'primary'
         */
        "type"?: ButtonType;
    }
    /**
     * Checkbox 复选框组件
     * 在一组备选项中进行多选
     */
    interface LdesignCheckbox {
        /**
          * 是否显示边框（兼容旧 API）
          * @default false
         */
        "border"?: boolean;
        /**
          * 是否为按钮样式（兼容旧 API）
          * @default false
         */
        "button"?: boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 设置半选状态，只负责样式控制
          * @default false
         */
        "indeterminate"?: boolean;
        /**
          * 标签位置
          * @default 'right'
         */
        "labelPlacement"?: 'left' | 'right';
        /**
          * 原生表单 name，用于表单提交/分组
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignCheckboxCustomEvent<boolean>) => void;
        /**
          * 形状
          * @default 'square'
         */
        "shape"?: 'square' | 'round';
        /**
          * 多选框的尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 外观主题颜色
          * @default 'brand'
         */
        "status"?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 选中状态的值
         */
        "value"?: string | number;
        /**
          * 外观变体
          * @default 'default'
         */
        "variant"?: 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * CheckboxGroup 复选框组组件
     * 管理一组复选框的状态
     */
    interface LdesignCheckboxGroup {
        /**
          * 组方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 统一标签位置（可被子项覆盖）
          * @default 'right'
         */
        "labelPlacement"?: 'left' | 'right';
        /**
          * 最大可选数量
         */
        "max"?: number;
        /**
          * 最小可选数量
         */
        "min"?: number;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignCheckboxGroupCustomEvent<Array<string | number>>) => void;
        /**
          * 统一形状（可被子项覆盖）
          * @default 'square'
         */
        "shape"?: 'square' | 'round';
        /**
          * 复选框组尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 统一外观主题（可被子项覆盖）
          * @default 'brand'
         */
        "status"?: 'brand' | 'success' | 'warning' | 'danger' | 'info';
        /**
          * 绑定值
          * @default []
         */
        "value"?: Array<string | number>;
        /**
          * 统一变体（可被子项覆盖）
          * @default 'default'
         */
        "variant"?: 'default' | 'outline' | 'filled' | 'button';
    }
    /**
     * Drawer 抽屉组件
     * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
     */
    interface LdesignDrawer {
        /**
          * 是否显示右上角关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 是否允许按下 ESC 关闭
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * 标题文本（可通过 slot=header 自定义头部）
         */
        "drawerTitle"?: string;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask"?: boolean;
        /**
          * 点击遮罩是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 事件：关闭
         */
        "onLdesignClose"?: (event: LdesignDrawerCustomEvent<void>) => void;
        /**
          * 事件：可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignDrawerCustomEvent<boolean>) => void;
        /**
          * 抽屉出现的位置
          * @default 'right'
         */
        "placement"?: DrawerPlacement;
        /**
          * 面板尺寸（left/right 为宽度，top/bottom 为高度）。可为数字（px）或任意 CSS 长度
          * @default 360
         */
        "size"?: number | string;
        /**
          * 是否显示抽屉
          * @default false
         */
        "visible"?: boolean;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Icon 图标组件
     * 基于 Lucide 图标库
     */
    interface LdesignIcon {
        /**
          * 图标颜色
         */
        "color"?: string;
        /**
          * 图标名称
         */
        "name": string;
        /**
          * 图标尺寸
          * @default 'medium'
         */
        "size"?: Size | number;
        /**
          * 是否旋转
          * @default false
         */
        "spin"?: boolean;
        /**
          * 描边宽度
          * @default 2
         */
        "strokeWidth"?: number;
    }
    /**
     * Input 输入框组件
     * 通过鼠标或键盘输入内容，是最基础的表单域的包装
     */
    interface LdesignInput {
        /**
          * 输入限制，只允许输入指定字符
         */
        "allowInput"?: RegExp | ((value: string) => boolean);
        /**
          * 自适应内容高度（仅对 textarea 有效）
          * @default false
         */
        "autosize"?: boolean | { minRows?: number; maxRows?: number };
        /**
          * 是否可清空
          * @default false
         */
        "clearable"?: boolean;
        /**
          * 是否受控组件
          * @default false
         */
        "controlled"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 最大输入长度
         */
        "maxlength"?: number;
        /**
          * 最小输入长度
         */
        "minlength"?: number;
        /**
          * 失去焦点时触发
         */
        "onLdesignBlur"?: (event: LdesignInputCustomEvent<FocusEvent>) => void;
        /**
          * 值改变时触发
         */
        "onLdesignChange"?: (event: LdesignInputCustomEvent<string>) => void;
        /**
          * 点击清空按钮时触发
         */
        "onLdesignClear"?: (event: LdesignInputCustomEvent<void>) => void;
        /**
          * 获得焦点时触发
         */
        "onLdesignFocus"?: (event: LdesignInputCustomEvent<FocusEvent>) => void;
        /**
          * 输入时触发
         */
        "onLdesignInput"?: (event: LdesignInputCustomEvent<string>) => void;
        /**
          * 输入框占位文本
         */
        "placeholder"?: string;
        /**
          * 输入框头部图标
         */
        "prefixIcon"?: string;
        /**
          * 是否只读
          * @default false
         */
        "readonly"?: boolean;
        /**
          * 输入框行数（仅对 textarea 有效）
          * @default 2
         */
        "rows"?: number;
        /**
          * 是否显示输入数量统计
          * @default false
         */
        "showCount"?: boolean;
        /**
          * 是否显示切换密码图标
          * @default false
         */
        "showPassword"?: boolean;
        /**
          * 输入框尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 输入框的状态
         */
        "status"?: 'error' | 'warning' | 'success';
        /**
          * 输入框尾部图标
         */
        "suffixIcon"?: string;
        /**
          * 输入框类型
          * @default 'text'
         */
        "type"?: 'text' | 'password' | 'textarea' | 'number' | 'email' | 'url' | 'tel';
        /**
          * 输入框的值
          * @default ''
         */
        "value"?: string;
    }
    interface LdesignMenu {
        /**
          * 手风琴模式（仅 inline/mixed 生效）：同层级只允许展开一个
          * @default false
         */
        "accordion"?: boolean;
        /**
          * 默认打开的子菜单 key 列表（非受控，仅 inline/mixed 生效）
          * @default []
         */
        "defaultOpenKeys"?: string[];
        /**
          * 默认选中项（非受控）
         */
        "defaultValue"?: string;
        /**
          * 子级缩进（px）
          * @default 16
         */
        "indent"?: number;
        /**
          * 菜单数据（可传入 JSON 字符串或对象数组）
          * @default []
         */
        "items"?: string | MenuItem[];
        /**
          * 菜单模式：水平/垂直
          * @default 'vertical'
         */
        "mode"?: MenuMode;
        /**
          * 水平模式“更多”按钮图标（保证一级项都有图标）
          * @default 'more-horizontal'
         */
        "moreIcon"?: string;
        /**
          * 水平模式溢出项的展示文案
          * @default '更多'
         */
        "moreLabel"?: string;
        /**
          * 展开/收起事件（inline/mixed）
         */
        "onLdesignOpenChange"?: (event: LdesignMenuCustomEvent<{ key: string; open: boolean; openKeys: string[] }>) => void;
        /**
          * 水平模式下，溢出项数量变化事件
         */
        "onLdesignOverflowChange"?: (event: LdesignMenuCustomEvent<{ overflowCount: number }>) => void;
        /**
          * 选中事件
         */
        "onLdesignSelect"?: (event: LdesignMenuCustomEvent<{ key: string; item: MenuItem; pathKeys: string[] }>) => void;
        /**
          * 当前打开的子菜单 key 列表（受控，仅 inline/mixed 生效）
         */
        "openKeys"?: string[];
        /**
          * 子菜单触发方式（仅 flyout 或水平模式下生效）
          * @default 'hover'
         */
        "submenuTrigger"?: SubmenuTrigger;
        /**
          * 当前选中项（受控）
         */
        "value"?: string;
        /**
          * 垂直模式下的展开方式：inline（内嵌展开）、flyout（右侧弹出）、mixed（一层内嵌，更多层右侧弹出）
          * @default 'inline'
         */
        "verticalExpand"?: VerticalExpand;
    }
    /**
     * Message 全局提示
     * 轻量级的全局反馈，常用于操作后的轻量提示
     */
    interface LdesignMessage {
        /**
          * 是否显示关闭按钮
          * @default false
         */
        "closable"?: boolean;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 3000
         */
        "duration"?: number;
        /**
          * 简单文本内容（也可使用 slot 自定义内容）
         */
        "message"?: string;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignMessageCustomEvent<void>) => void;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 出现位置（当前仅支持 top，预留 bottom 扩展）
          * @default 'top'
         */
        "placement"?: 'top' | 'bottom';
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 提示类型
          * @default 'info'
         */
        "type"?: MessageType;
    }
    /**
     * Modal 模态框组件
     */
    interface LdesignModal {
        /**
          * 动画效果类型
          * @default 'zoom'
         */
        "animation"?: ModalAnimation;
        /**
          * 是否居中显示
          * @default false
         */
        "centered"?: boolean;
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 图标可配置
          * @default 'x'
         */
        "closeIcon"?: string;
        /**
          * 是否销毁子元素
          * @default false
         */
        "destroyOnClose"?: boolean;
        /**
          * 自定义高度
         */
        "height"?: number | string;
        /**
          * 是否可拖拽
          * @default false
         */
        "isDraggable"?: boolean;
        /**
          * 按ESC键是否关闭
          * @default true
         */
        "keyboard"?: boolean;
        /**
          * 是否显示遮罩层
          * @default true
         */
        "mask"?: boolean;
        /**
          * 点击遮罩层是否关闭
          * @default true
         */
        "maskClosable"?: boolean;
        /**
          * 是否可最大化
          * @default false
         */
        "maximizable"?: boolean;
        /**
          * @default 'maximize-2'
         */
        "maximizeIcon"?: string;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignModalCustomEvent<void>) => void;
        /**
          * 确认事件
         */
        "onLdesignOk"?: (event: LdesignModalCustomEvent<void>) => void;
        /**
          * 显示状态变化事件
         */
        "onLdesignVisibleChange"?: (event: LdesignModalCustomEvent<boolean>) => void;
        /**
          * 是否可调整大小
          * @default false
         */
        "resizable"?: boolean;
        /**
          * @default 'minimize-2'
         */
        "restoreIcon"?: string;
        /**
          * 模态框尺寸
          * @default 'medium'
         */
        "size"?: ModalSize;
        /**
          * 距离顶部的距离
         */
        "top"?: number | string;
        /**
          * 是否显示模态框
          * @default false
         */
        "visible"?: boolean;
        /**
          * 自定义宽度
         */
        "width"?: number | string;
        /**
          * z-index
          * @default 1000
         */
        "zIndex"?: number;
    }
    /**
     * Notification 通知提醒
     * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
     */
    interface LdesignNotification {
        /**
          * 是否显示关闭按钮
          * @default true
         */
        "closable"?: boolean;
        /**
          * 描述文案（也可使用默认 slot 自定义内容）
         */
        "description"?: string;
        /**
          * 自动关闭的时长（毫秒）；设为 0 则不自动关闭
          * @default 4500
         */
        "duration"?: number;
        /**
          * 标题
         */
        "notificationTitle"?: string;
        /**
          * 关闭事件
         */
        "onLdesignClose"?: (event: LdesignNotificationCustomEvent<void>) => void;
        /**
          * 悬浮时是否暂停计时
          * @default true
         */
        "pauseOnHover"?: boolean;
        /**
          * 出现位置
          * @default 'top-right'
         */
        "placement"?: NotificationPlacement;
        /**
          * 是否显示图标
          * @default true
         */
        "showIcon"?: boolean;
        /**
          * 通知类型
          * @default 'info'
         */
        "type"?: NotificationType;
    }
    /**
     * Popconfirm 气泡确认框
     * 基于 Popup 进行封装，提供确认/取消操作
     */
    interface LdesignPopconfirm {
        /**
          * 箭头（默认显示），透传给 Popup
          * @default true
         */
        "arrow"?: boolean;
        /**
          * @default '取消'
         */
        "cancelText"?: string;
        /**
          * 取消按钮类型（默认使用次要/描边样式）
          * @default 'outline'
         */
        "cancelType"?: 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 点击外部是否关闭（仅点击触发较常用）
          * @default true
         */
        "closeOnOutside"?: boolean;
        /**
          * 辅助说明（可选，支持默认 slot 覆盖）
         */
        "description"?: string;
        /**
          * @default 0
         */
        "hideDelay"?: number;
        /**
          * 图标名称（可用 slot=icon 覆盖）
          * @default 'help-circle'
         */
        "icon"?: string;
        /**
          * 确认/取消按钮文本
          * @default '确定'
         */
        "okText"?: string;
        /**
          * 确认按钮类型（影响颜色）
          * @default 'primary'
         */
        "okType"?: 'primary' | 'secondary' | 'outline' | 'text' | 'danger';
        /**
          * 事件：取消
         */
        "onLdesignCancel"?: (event: LdesignPopconfirmCustomEvent<void>) => void;
        /**
          * 事件：确认
         */
        "onLdesignConfirm"?: (event: LdesignPopconfirmCustomEvent<void>) => void;
        /**
          * 事件：对外转发可见性变化
         */
        "onLdesignVisibleChange"?: (event: LdesignPopconfirmCustomEvent<boolean>) => void;
        /**
          * 出现位置（透传给 Popup）
          * @default 'top'
         */
        "placement"?: PopconfirmPlacement;
        /**
          * 确认标题（支持 slot=title 覆盖）
          * @default '确定要执行该操作吗？'
         */
        "popconfirmTitle"?: string;
        /**
          * 延迟显示/隐藏（毫秒），透传给 Popup
          * @default 0
         */
        "showDelay"?: number;
        /**
          * 主题（浅色/深色），透传给 Popup
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式（默认点击）
          * @default 'click'
         */
        "trigger"?: PopconfirmTrigger;
        /**
          * 外部受控可见性（仅在 trigger='manual' 时生效）
          * @default false
         */
        "visible"?: boolean;
    }
    /**
     * Popup 弹出层组件
     * 基于
     * @floating-ui /dom 实现
     */
    interface LdesignPopup {
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow"?: boolean;
        /**
          * 是否允许 Esc 键关闭
          * @default true
         */
        "closeOnEsc"?: boolean;
        /**
          * 点击浮层外是否关闭（仅在 trigger = 'click' 时常用）
          * @default true
         */
        "closeOnOutside"?: boolean;
        /**
          * 弹出层内容
         */
        "content"?: string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 0
         */
        "hideDelay"?: number;
        /**
          * 是否允许在弹出层上进行交互（仅 hover 触发时有意义）
          * @default true
         */
        "interactive"?: boolean;
        /**
          * 最大宽度
         */
        "maxWidth"?: number | string;
        /**
          * 偏移量
          * @default 8
         */
        "offsetDistance"?: number;
        /**
          * 显示状态变化事件
         */
        "onLdesignVisibleChange"?: (event: LdesignPopupCustomEvent<boolean>) => void;
        /**
          * 弹出层位置
          * @default 'bottom'
         */
        "placement"?: PopupPlacement;
        /**
          * 内容区域的语义角色
          * @default 'dialog'
         */
        "popupRole"?: string;
        /**
          * 弹出层标题
         */
        "popupTitle"?: string;
        /**
          * 延迟显示时间（毫秒）
          * @default 0
         */
        "showDelay"?: number;
        /**
          * 主题风格
          * @default 'light'
         */
        "theme"?: 'light' | 'dark';
        /**
          * 触发方式
          * @default 'hover'
         */
        "trigger"?: PopupTrigger;
        /**
          * 是否显示弹出层
          * @default false
         */
        "visible"?: boolean;
        /**
          * 弹出层宽度
         */
        "width"?: number | string;
    }
    /**
     * Radio 单选框组件
     * 在一组备选项中进行单选
     */
    interface LdesignRadio {
        /**
          * 是否显示边框
          * @default false
         */
        "border"?: boolean;
        /**
          * 是否为按钮样式
          * @default false
         */
        "button"?: boolean;
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 单选框的名称，用于分组
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignRadioCustomEvent<string | number>) => void;
        /**
          * 单选框的尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 选中状态的值
         */
        "value"?: string | number;
    }
    /**
     * RadioGroup 单选框组组件
     * 管理一组单选框的状态
     */
    interface LdesignRadioGroup {
        /**
          * 排列方向
          * @default 'horizontal'
         */
        "direction"?: 'horizontal' | 'vertical';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 组名称，用于原生表单
         */
        "name"?: string;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignRadioGroupCustomEvent<string | number>) => void;
        /**
          * 单选框组尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 绑定值
         */
        "value"?: string | number;
    }
    /**
     * Switch 开关组件
     * 表示两种相互对立的状态间的切换，多用于触发「开/关」
     */
    interface LdesignSwitch {
        /**
          * 是否选中
          * @default false
         */
        "checked"?: boolean;
        /**
          * 选中时的图标
         */
        "checkedIcon"?: string;
        /**
          * 选中时的文本
         */
        "checkedText"?: string;
        /**
          * 选中时的值
          * @default true
         */
        "checkedValue"?: string | number | boolean;
        /**
          * 颜色风格 可选：brand | success | warning | error | neutral
          * @default 'brand'
         */
        "color"?: 'brand' | 'success' | 'warning' | 'error' | 'neutral';
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 是否加载中
          * @default false
         */
        "loading"?: boolean;
        /**
          * 当绑定值变化时触发的事件
         */
        "onLdesignChange"?: (event: LdesignSwitchCustomEvent<string | number | boolean>) => void;
        /**
          * 形状 可选：pill（胶囊）| rounded（圆角）| square（直角）
          * @default 'pill'
         */
        "shape"?: 'pill' | 'rounded' | 'square';
        /**
          * 开关尺寸
          * @default 'medium'
         */
        "size"?: Size;
        /**
          * 未选中时的图标
         */
        "uncheckedIcon"?: string;
        /**
          * 未选中时的文本
         */
        "uncheckedText"?: string;
        /**
          * 未选中时的值
          * @default false
         */
        "uncheckedValue"?: string | number | boolean;
        /**
          * 外观样式 可选：solid | soft | outline | ghost
          * @default 'solid'
         */
        "variant"?: 'solid' | 'soft' | 'outline' | 'ghost';
    }
    /**
     * Tooltip 工具提示组件
     * 基于 Popup 的轻量封装
     */
    interface LdesignTooltip {
        /**
          * 是否显示箭头
          * @default true
         */
        "arrow"?: boolean;
        /**
          * 提示内容
         */
        "content": string;
        /**
          * 是否禁用
          * @default false
         */
        "disabled"?: boolean;
        /**
          * 延迟隐藏时间（毫秒）
          * @default 100
         */
        "hideDelay"?: number;
        /**
          * 最大宽度
          * @default 250
         */
        "maxWidth"?: number;
        /**
          * 提示位置
          * @default 'top'
         */
        "placement"?: TooltipPlacement;
        /**
          * 延迟显示时间（毫秒）
          * @default 100
         */
        "showDelay"?: number;
        /**
          * 主题：深色/浅色（默认深色）
          * @default 'dark'
         */
        "theme"?: 'dark' | 'light';
    }
    interface IntrinsicElements {
        "base-component": BaseComponent;
        "ldesign-affix": LdesignAffix;
        "ldesign-backtop": LdesignBacktop;
        "ldesign-button": LdesignButton;
        "ldesign-checkbox": LdesignCheckbox;
        "ldesign-checkbox-group": LdesignCheckboxGroup;
        "ldesign-drawer": LdesignDrawer;
        "ldesign-icon": LdesignIcon;
        "ldesign-input": LdesignInput;
        "ldesign-menu": LdesignMenu;
        "ldesign-message": LdesignMessage;
        "ldesign-modal": LdesignModal;
        "ldesign-notification": LdesignNotification;
        "ldesign-popconfirm": LdesignPopconfirm;
        "ldesign-popup": LdesignPopup;
        "ldesign-radio": LdesignRadio;
        "ldesign-radio-group": LdesignRadioGroup;
        "ldesign-switch": LdesignSwitch;
        "ldesign-tooltip": LdesignTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * 组件基类
             * 提供通用的属性和方法
             */
            "base-component": LocalJSX.BaseComponent & JSXBase.HTMLAttributes<HTMLBaseComponentElement>;
            /**
             * Affix 固钉组件
             * - 将元素固定在页面（或指定滚动容器）顶部
             * - 默认基于窗口滚动容器，支持设置 offsetTop、target(container) 与 zIndex
             */
            "ldesign-affix": LocalJSX.LdesignAffix & JSXBase.HTMLAttributes<HTMLLdesignAffixElement>;
            /**
             * BackTop 返回顶部组件
             * - 支持窗口根滚动回到顶部
             * - 支持指定容器内部滚动回到顶部（通过 target 选择器）
             * - 支持设置滚动动画速度（px/s）
             */
            "ldesign-backtop": LocalJSX.LdesignBacktop & JSXBase.HTMLAttributes<HTMLLdesignBacktopElement>;
            /**
             * Button 按钮组件
             * 用于触发操作或导航
             */
            "ldesign-button": LocalJSX.LdesignButton & JSXBase.HTMLAttributes<HTMLLdesignButtonElement>;
            /**
             * Checkbox 复选框组件
             * 在一组备选项中进行多选
             */
            "ldesign-checkbox": LocalJSX.LdesignCheckbox & JSXBase.HTMLAttributes<HTMLLdesignCheckboxElement>;
            /**
             * CheckboxGroup 复选框组组件
             * 管理一组复选框的状态
             */
            "ldesign-checkbox-group": LocalJSX.LdesignCheckboxGroup & JSXBase.HTMLAttributes<HTMLLdesignCheckboxGroupElement>;
            /**
             * Drawer 抽屉组件
             * 从屏幕边缘滑出一个面板，常用于显示导航、表单或详情
             */
            "ldesign-drawer": LocalJSX.LdesignDrawer & JSXBase.HTMLAttributes<HTMLLdesignDrawerElement>;
            /**
             * Icon 图标组件
             * 基于 Lucide 图标库
             */
            "ldesign-icon": LocalJSX.LdesignIcon & JSXBase.HTMLAttributes<HTMLLdesignIconElement>;
            /**
             * Input 输入框组件
             * 通过鼠标或键盘输入内容，是最基础的表单域的包装
             */
            "ldesign-input": LocalJSX.LdesignInput & JSXBase.HTMLAttributes<HTMLLdesignInputElement>;
            "ldesign-menu": LocalJSX.LdesignMenu & JSXBase.HTMLAttributes<HTMLLdesignMenuElement>;
            /**
             * Message 全局提示
             * 轻量级的全局反馈，常用于操作后的轻量提示
             */
            "ldesign-message": LocalJSX.LdesignMessage & JSXBase.HTMLAttributes<HTMLLdesignMessageElement>;
            /**
             * Modal 模态框组件
             */
            "ldesign-modal": LocalJSX.LdesignModal & JSXBase.HTMLAttributes<HTMLLdesignModalElement>;
            /**
             * Notification 通知提醒
             * 位于页面角落的全局通知，支持标题、描述、操作区与自动关闭。
             */
            "ldesign-notification": LocalJSX.LdesignNotification & JSXBase.HTMLAttributes<HTMLLdesignNotificationElement>;
            /**
             * Popconfirm 气泡确认框
             * 基于 Popup 进行封装，提供确认/取消操作
             */
            "ldesign-popconfirm": LocalJSX.LdesignPopconfirm & JSXBase.HTMLAttributes<HTMLLdesignPopconfirmElement>;
            /**
             * Popup 弹出层组件
             * 基于
             * @floating-ui /dom 实现
             */
            "ldesign-popup": LocalJSX.LdesignPopup & JSXBase.HTMLAttributes<HTMLLdesignPopupElement>;
            /**
             * Radio 单选框组件
             * 在一组备选项中进行单选
             */
            "ldesign-radio": LocalJSX.LdesignRadio & JSXBase.HTMLAttributes<HTMLLdesignRadioElement>;
            /**
             * RadioGroup 单选框组组件
             * 管理一组单选框的状态
             */
            "ldesign-radio-group": LocalJSX.LdesignRadioGroup & JSXBase.HTMLAttributes<HTMLLdesignRadioGroupElement>;
            /**
             * Switch 开关组件
             * 表示两种相互对立的状态间的切换，多用于触发「开/关」
             */
            "ldesign-switch": LocalJSX.LdesignSwitch & JSXBase.HTMLAttributes<HTMLLdesignSwitchElement>;
            /**
             * Tooltip 工具提示组件
             * 基于 Popup 的轻量封装
             */
            "ldesign-tooltip": LocalJSX.LdesignTooltip & JSXBase.HTMLAttributes<HTMLLdesignTooltipElement>;
        }
    }
}
